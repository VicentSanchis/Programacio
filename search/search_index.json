{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CONTINGUTS DEL CURS","text":"Tema 1. Introducci\u00f3 Programaci\u00f3 <p>\u00cdNDEX</p> <ul> <li>1. Introducci\u00f3: Hola m\u00f3n! Benvinguts al m\u00f3n de la programaci\u00f3.</li> <li>2. Conceptes b\u00e0sics: els essencials per poder programar.</li> <li>3. Fases de desenvolupament: an\u00e0lisi, disseny, codificaci\u00f3, prova i documentaci\u00f3.</li> <li>5. Entorns integrats de desenvolupament: aplicacions que faciliten la tasca de programar.</li> <li>6. Eclipse: Entorn de programaci\u00f3 per a Java d'\u00fas general</li> <li>7. Visual Studio Code</li> <li>8. Processing IDE: Entorn de programaci\u00f3 orientat a l'art</li> <li>9. Breu hist\u00f2ria de la programaci\u00f3</li> <li>10. Diagrames de flux: t\u00e8cnica gr\u00e0fica de disseny d'algorismes.</li> </ul> Tema 02. El llenguatge Java <p>\u00cdNDEX</p> <ul> <li>1. Introducci\u00f3: Com apliquem tot all\u00f2 vist als temes anteriors a un llenguatge de programaci\u00f3 com Java?</li> <li>2. Dades, variables i identificadors: o com usem la informaci\u00f3 i les dades en un llenguatge de programaci\u00f3</li> <li>3. Paraules reservades: aquelles paraules o mots propietat del llenguatge de programaci\u00f3</li> <li>4. Tipus de dades: tipus d'informaci\u00f3 que pot usar el llenguatge i com</li> <li>5. Variables: contenidors d'informaci\u00f3 amb una etiqueta i un tipus de dades associats</li> <li>6. Literals: s\u00f3n el que semblen.</li> <li>7. Constants: valors immutables durant l'execuci\u00f3 del programa</li> <li>8. Operadors i expressions: simbols utilitzats per fer operacions</li> <li>9. Operador assignaci\u00f3: per donar valor a les expressions</li> <li>10. Operadors aritm\u00e8tics: suma, resta, multiplicaci\u00f3, divisi\u00f3...</li> <li>11. Operadors relacionals: major, menor, igual...</li> <li>12. Operadors l\u00f2gics: and, or, not...</li> <li>13. Comentaris: text no compilable i part de la documentaci\u00f3 de les aplicacions</li> </ul> Tema 03. Programaci\u00f3 Orientada a Objectes <p>\u00cdNDEX</p> <ul> <li>1. Introducci\u00f3: Qu\u00e8 \u00e9s el paradigma de programaci\u00f3 orientada a objectes?</li> <li>2. Caracter\u00edstiques: abstracci\u00f3, modularitat, encapsulament, jerarquia i polimorfisme</li> <li>3. Realitzaci\u00f3 de programes orientats a objectes: Per on comencem</li> <li>4. Definici\u00f3 de classes en Java: Com declarar una classe en Java.</li> <li>5. Classes i objectes: Difer\u00e8ncia entre classes i objectes.</li> <li>6. Instanciaci\u00f3 d'objectes: Com crear objectes a partir de les classes Java</li> <li>7. Propietats i m\u00e8todes: Membre principals de les classes a Java i com s'utilitzen.</li> <li>8. Constructors:  Funci\u00f3 principal per a la creaci\u00f3 d'objectes.</li> <li>9. Codificaci\u00f3, edici\u00f3 i compilaci\u00f3 de programes simples</li> </ul> Tema 04. Estructures de Control en Java <p>\u00cdNDEX - 1. Introducci\u00f3: Qu\u00e8 s\u00f3n?</p> Tema 05. Her\u00e8ncia, polimorfisme i interf\u00edcies <p>\u00cdNDEX</p> <ul> <li>1. Introducci\u00f3: Her\u00e8ncia i polimorfisme: t\u00e8cniques molt potents de POO.</li> <li>2. Her\u00e8ncia: Mecanisme d'her\u00e8ncia en POO</li> <li>3. Disseny de superclasses: super classes o classes pares</li> <li>3. Disseny de subclasses: com fer classes derivades o subclasses d'una superclasses</li> <li>4. Sobrec\u00e0rrega de constructors: un mateix constructor que realitza funcions diferents en diferent subclasses.</li> <li>5. Polimorfisme: les mateixes funcions realitzant tasques diferents</li> <li> <p>6. Interf\u00edcies: prototips de funcions que serveixen per implementar classes noves</p> </li> <li> <p>1. Introducci\u00f3: Qu\u00e8 \u00e9s el paradigma de programaci\u00f3 modular?</p> </li> <li>2. Caracter\u00edstiques: propietats principals del paradigma</li> <li>3. Funcions en Java: Com dissenyar i utilitzar funcions en Java.</li> <li>4. Arguments i par\u00e0metres: Valors que es passen als m\u00e8todes o funcions en Java</li> <li>5. Declaraci\u00f3 i crida: Difer\u00e8ncies</li> <li>6. Valor i refer\u00e8ncia: par\u00e0metres modificable o no.</li> <li>7. Recursivitat: T\u00e8cnica de programaci\u00f3 modular.</li> </ul> Tema 06. Entrada, eixida i excepcions <p>\u00cdNDEX</p> <ul> <li>1. Introducci\u00f3: Com es realitza la comunicaci\u00f3 de Java amb dispositius externs</li> <li>2. Entrada i eixida b\u00e0siques: consola i fitxers b\u00e0sics.</li> <li>3. Flux a nivell de byte: Streams de comunicaci\u00f3 a nivell de byte o baix nivell.</li> <li>3. Flux a nivell de caracter: Streams de comunicaci\u00f3 a nivell de caracter o de nivell alt.</li> <li>4. Persist\u00e8ncia d'objectes: Com desar objectes i estat a dispositius externs o fitxers.</li> <li>5. Excepcions: Control d'errors en temps d'execuci\u00f3.</li> </ul> Tema 07. Tipus avan\u00e7ats de dades <p>\u00cdNDEX</p> <ul> <li>1. Introducci\u00f3: que s\u00f3n el tipus compostos de dades.</li> <li>2. Arrays: declaraci\u00f3 i \u00fas, inicialitzaci\u00f3, bucles...</li> <li>3. Algorismes de recerca: per tal de buscar elements coincidents dins d'un array</li> <li>4. Algorismes d'ordenaci\u00f3: per ordenar un array segons algun criteri d'ordenaci\u00f3.</li> <li>5. Arrays multidimensionals: arrays amb tres o m\u00e9s dimensions.</li> <li>6. API de Java: tipus compostos de dades predefinits a Java.</li> </ul> Tema 08. Gr\u00e0fics. ControlP5 <p>\u00cdNDEX</p> <ul> <li>1. Introducci\u00f3: disseny de formularis a nivell gr\u00e0fic.</li> <li>2. Llibreria SWING: llibreria de disseny gr\u00e0fic amb Java</li> <li>3. JFrame i JPanel: Controls principals en la creaci\u00f3 d'aplicacions gr\u00e0fiques.</li> <li>3. Gestors de posicionament: controls que determinen la forma en la que es col\u00b7locaran els controls al formulari.</li> <li>4. Controls: JLabel, JText...</li> <li>5. Taules: Com treballar amb taules i SWING</li> <li>6. Esdeveniments: Interacci\u00f3 amb l'usuari.</li> </ul> Tema 09. Acc\u00e9s a dades <p>\u00cdNDEX</p> <ul> <li>1. Introducci\u00f3: com treballar amb Java i bases de dades relacionals.</li> <li>2. Drivers: programari addicional necessari</li> <li>3. JDBC: Java Database Connectivity</li> <li>3. Connexi\u00f3 a la BD: Codi necessari per connectar a una BD</li> <li>4. Realitzaci\u00f3 de consultes: SQL, Insert, Update, Select ...</li> </ul>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/","title":"Tema 1 - Introducci\u00f3 a la programaci\u00f3","text":"<p>Resultat d'aprenentatge associat</p> <p>REcoenixer les estructures bla bla bla..</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#hola-mon","title":"Hola m\u00f3n!","text":"<p>Hola a tots i benvinguts al m\u00f3n de la programaci\u00f3. En aquest curs aprendrem com escriure codi utilitzant el llenguatge de programaci\u00f3 Java per desenvolupar aplicacions. Com podreu observar, programar b\u00e0sicament consisteix en poder comunicar-se amb una m\u00e0quina per tal que seguisca adequadament les instruccions que li donem, \u00e9s a dir, aprendre a programar \u00e9s aprendre un idioma nou, per\u00f2 no patiu, no es tracta d'un idioma com l'angl\u00e8s o el llenguatge musical, ja que per tal que aquesta comunicaci\u00f3 entre persona i m\u00e0quina siga eficient i efectiva, el llenguatge a aprendre ha de ser molt m\u00e9s simple i sobre tot lliure d'ambig\u00fcitats. </p> <p>Per\u00f2 no avancem esdeveniments. Millor comencem pel principi. Qu\u00e8 \u00e9s un programa?</p> segons el DNV: Diccionari Normatiu Valencia <p>Conjunt d'instruccions detallades i codificades que es donen a un sistema inform\u00e0tic perqu\u00e8 execute unes determinades operacions</p> segons el Termcat: Centre de Terminologia en llengua catalana <p>Un programa \u00e9s un conjunt d\u2019instruccions escrites en un llenguatge de programaci\u00f3 que s\u2019utilitzen per donar ordres o indicacions a un ordinador.</p> <p>El m\u00e9s paregut a programar que hi ha en el m\u00f3n real seria elaborar un conjunt d'instruccions de tal forma que una altra persona siga capa\u00e7 de llegir, interpretar i executar satisfact\u00f2riament obtenint un resultat. Una recepta de cuina per exemple \u00e9s un conjunt d'instruccions que qualsevol \u00e9s capa\u00e7 de llegir, interpretar i executar obtenint al final un resultat.</p> <p>Si seguim l'analogia amb la recepta de cuina i la comparem amb un model de comunicaci\u00f3 cl\u00e0ssica els elements que ens podem trobar s\u00f3n: </p> <ul> <li>Origen: persona que diu les instruccions o ordres, el que escriu la recepta.</li> <li>Dest\u00ed: persona que les ha de llegir, interpretar i executar, el cuiner i el llenguatge usat (valenci\u00e0).</li> <li>Canal: medi f\u00edsic pel qual es transmet el missatge. Aire, televisi\u00f3, tel\u00e8fon, internet...</li> <li>Missatge: f\u00e0cil no? La recepta.</li> </ul> <p>Observa l'esquema seg\u00fcent:</p> <p> </p> <p>Doncs b\u00e9, en inform\u00e0tica tindr\u00edem els mateixos elements on l'origen seria el programador, el dest\u00ed l'ordinador, el llenguatge seria el llenguatge de programaci\u00f3 i el missatge seria el programa. </p> <p>Podriem concloure que aprendre a programar \u00e9s aprendre l'idioma que parlen els ordinadors per tal de poder comunicar-nos amb ells i donar-los ordres o instruccions.</p> <p>En aquest primer tema, veurem una s\u00e8rie de conceptes b\u00e0sics que seran necessaris per entendre que \u00e9s la programaci\u00f3.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#conceptes-basics","title":"Conceptes b\u00e0sics","text":"<p>Com ja hem explicat a la introducci\u00f3 d'aquest tema, programar consisteix en b\u00e0sicament donar ordres a un dispositiu mitjan\u00e7ant un algorisme en un llenguatge de programaci\u00f3 concret que a l'executar-se en una m\u00e0quina es converteix en programa. Veiem amb un poc m\u00e9s de detall aquests conceptes:</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#algorisme-vs-programa","title":"Algorisme vs Programa","text":"<p>Si el que farem en aquest curs \u00e9s programar, per qu\u00e8 parlem tant d'algorismes. Qu\u00e8 \u00e9s un algorisme? Quina difer\u00e8ncia hi ha entre un algorisme i un programa? En aquest primer tema treballarem tots aquests conceptes.</p> <p>Definici\u00f3 d'algorisme</p> <p>Un algorisme \u00e9s un conjunt ordenat i finit d\u2019operacions o instruccions a seguir que permeten trobar la soluci\u00f3 a un problema. Per exemple: algorisme de la suma, la resta, la multiplicaci\u00f3 o la divisi\u00f3.</p> <p>Per tal de fer una suma de xifres de m\u00e9s d\u2019un digit cadascuna, el que es diu comunament sumar portant, hem de seguir unes instruccions que si les realitzem de forma correcta, obtenim el resultat. Doncs b\u00e9, eixes \u2018instruccions\u2019 serien l\u2019algorisme.</p> <p>Un programa no \u00e9s m\u00e9s que un algorisme les \u2018instruccions\u2019 del qual les executa un ordinador.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#caracteristiques","title":"Caracter\u00edstiques","text":"<p>Un algorisme posteriorment convertit a programa ha de complir una s\u00e8rie de caracter\u00edstiques:</p> <ul> <li>Finit: ha de comen\u00e7ar i acabar.</li> <li>Llegible: un programa s'escriu una vegada per\u00f2 es llig moltes.</li> <li>Modificable: ha de poder evolucionar.</li> <li>Eficient: No utilitza m\u00e9s recursos dels necessaris</li> <li>Modular: s'ha de dividir en parts el qual millora la legibilitat.</li> <li>Estructurat: utilitza les estructures del paradigma de la programaci\u00f3 estructurada.</li> </ul>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#algorisme-del-sandwich-de-melmelada-i-crema-de-cacau","title":"Algorisme del sandwich de melmelada i crema de cacau","text":"<p>Una de les dificultats inicials a l'hora d'aprendre a programar \u00e9s desfer-se de l'ambig\u00fcitat amb la s'utilitza el llenguatge natural, l'esser hum\u00e0 t\u00e9 la capacitat de contextualitzar i desambiguar per\u00f2 una m\u00e0quina no, per tant, \u00e9s necessari que el llenguatge amb el que es donen ordres a un ordinador, estiga lliure d'ambig\u00fcitat i siga el m\u00e9s exacte possible. </p> <p>A continuaci\u00f3 observa el seg\u00fcent v\u00eddeo on uns fills li donen instruccions \"precises\" al pare per tal que els faja un sandwich.</p> Activitat 101. Algorisme de la Nutella <p>Al v\u00eddeo anterior uns xiquets intenten explicar-li al pare els passos que ha de seguir per fer-los un sandwich de melmelada i crema de cacau. </p> <p>Intenta escriure un algorisme per fer un sandwich de Nutella basant-te en el que has vista al v\u00eddeo anterior. \u00c9s molt important que tingues en compte els seg\u00fcents aspectes:</p> <ul> <li>Les instruccions han de ser breus i concises.</li> <li>les instruccions han d'anar adequades al seu destinatari.</li> <li>S'ha d'evitar en tot cas l'ambig\u00fcitat a les instruccions</li> <li>L'algorisme no pot ser m\u00e9s complicat que fer un sandwich.</li> </ul> <p>Tamb\u00e9 s'han de tenir en compte quines s\u00f3n les precondicions, \u00e9s a dir, des d'on partim. Al nostre cas estem asseguts a una cadira, davant tenim una taula on podem trobar les seg\u00fcents coses:</p> <ul> <li>Un pot de Nutella tancat</li> <li>Un ganivet d'untar</li> <li>Un paquet de pa de motle per obrir.</li> </ul> <p>En acabar d'escriure l'algorisme, dona-lo a alg\u00fa i que intente seguir les instruccions per a veure que \u00e9s el que ix. Recorda advertir a la persona que t'ajude que siga el menys ambigua possible i que interprete el m\u00e9s estrictament possible que puga les instruccions que li has passat. A continuaci\u00f3 que escriga un apartat amb les correccions que li faria al algorisme per que fora millor.</p> <p>A banda d'escriure les instruccions en llenguatge natural tamb\u00e9 podries utilitzar algun tipus de representaci\u00f3 gr\u00e0fica. \u00c9s a dir, una vegada tingues l'algorisme escrit en llenguatge natural, fer una representaci\u00f3 gr\u00e0fica del mateix algorisme.</p> <p>Entrega: Un document pdf amb els passos a seguir per aconseguir el resultat esperat.</p> Activitat 102. Dissenya el teu propi algorisme <p>Basant-te en l'activitat anterior, pensa en un problema quotidi\u00e0 i escriu un algorisme que el solucione. Has de seguir els mateixos passos que a l'activitat anterior: Primer escriu les precondicions del teu problema i despr\u00e9s les instruccions a seguir. Recorda que has de seguir les caracter\u00edstiques d'un algorisme que hem explicat abans. Un algorisme ha de ser finit, legible, modificable, eficient, modular i estructurat.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#llenguatges-programacio","title":"Llenguatges programaci\u00f3","text":"<p>De la mateixa manera que dues persones es comuniquen entre s\u00ed utilitzant un llenguatge natural, una persona es comunica amb una m\u00e0quina utilitzant un llenguatge de programaci\u00f3. Evidentment, un llenguatge de programaci\u00f3 ha de ser m\u00e9s simple i gens ambigu al contrari de com passa amb els llenguatges naturals. </p> <p>Els llenguatges de programaci\u00f3 solen complir les seg\u00fcents caracter\u00edstiques:</p> <ol> <li>Existeix un nombre finit de paraules reservades que podem usar: per, var, int, mentre, repetir... \u00c9s a dir, un llenguatge de programaci\u00f3 t\u00e9 un conjunt l\u00e8xic de paraules amb un significat associat com passa amb els llenguatges naturals.</li> <li>Les frases com a combinaci\u00f3 de diferents paraules amb les que ens comuniquem en llenguatge natural es diuen instruccions</li> <li>Cada instrucci\u00f3 finalitza d\u2019una manera concreta, per exemple, utilitzant un \u2018;\u2019 per tal que la m\u00e0quina sapiga quan acaba una instrucci\u00f3 i comen\u00e7a una altra.</li> </ol>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#classificacio","title":"Classificaci\u00f3","text":"<p>Els llenguatges de programaci\u00f3 es poden classificar segons els seg\u00fcents criteris</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#proximitat-a-la-maquina","title":"PROXIMITAT A LA M\u00c0QUINA","text":"<p>Les m\u00e0quines en realitat nom\u00e9s entenen 0 i 1, hi han llenguatges de programaci\u00f3 molts pr\u00f2xims a aquest tipus de codificaci\u00f3 bin\u00e0ria per\u00f2 que s\u00f3n complicats d\u2019entendre per un \u00e9sser hum\u00e0. D\u2019una altra banda existeixen llenguatges que utilitzen un conjunt de paraules reservades que fan que siga m\u00e9s f\u00e0cil d\u2019entendre per una persona. Al final de tot aquest llenguatge m\u00e9s pr\u00f2xim al llenguatge hum\u00e0 acaba convertint-se en una seq\u00fc\u00e8ncia de 0 i 1 la m\u00e0quina pot entendre en el proc\u00e9s de compilaci\u00f3 que veurem m\u00e9s endavant.</p> <ul> <li>Llenguatges de baix nivell: s\u00f3n els llenguatges m\u00e9s pr\u00f2xims al llenguatge m\u00e0quina com per exemple el llenguatge assemblador.</li> <li>Llenguatges de nivell mitj\u00e0: llenguatges que s\u2019aproximen un poc m\u00e9s al llenguatge natural utilitzant una s\u00e8rie de paraules reservades que s\u2019utilitzen en llenguatge natural com per exemple el llenguatge C</li> <li>Llenguatges d\u2019alt nivell: Els m\u00e9s pr\u00f2xims al llenguatge natural per\u00f2 sense ambig\u00fcitats.</li> </ul> <p></p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#proposit-del-llenguatge","title":"PROPOSIT DEL LLENGUATGE","text":"<p>\u00c9s a dir segons quins tipus de programes poden generar, quina \u00e9s la seua finalitat.</p> <ul> <li>Llenguatges de prop\u00f2sit general: que s\u00f3n capa\u00e7os de crear qualsevol tipus de programa. Llenguatge C</li> <li>Llenguatges de prop\u00f2sit espec\u00edfic: que es dissenyen per realitzar una tasca m\u00e9s espec\u00edfica.</li> </ul>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#segons-generacio","title":"SEGONS GENERACI\u00d3","text":"<ul> <li>Primera Generaci\u00f3: llenguatges m\u00e0quina i llenguatges assemblador. Anys 40 \u2013 50. En aquesta \u00e8poca s\u2019usaven targetes perforades i es programava utilitzant seq\u00fcencies d\u2019uns i zeros indicant quin c\u00e0lcul havien de realitzar els programes. Els llenguatges assemblador afegeixen la primera capa d\u2019abstracci\u00f3 sobre el binari de forma que una s\u00e8rie d\u2019instruccions simples s\u00f3n despr\u00e9s tradu\u00efdes a binari per la mateixa m\u00e0quina. Aquestes instruccions estaven directament relacionades amb el processador, \u00e9s a dir, cada processador tenia el seu conjunt d'instruccions propi.</li> <li>Segona Generaci\u00f3: Apareixen els llenguatges de nivell mitj\u00e0 i els primers compiladors, que per que ho entenem de moment, s\u00f3n els encarregats de traduir d\u2019un llenguatge de programaci\u00f3 a llenguatge m\u00e0quina o binari. Exemple de llenguatge de nivell mitj\u00e0: FORTRAN (FORmula TRANSlating system) de l\u2019any 1956</li> <li>Tercera Generaci\u00f3: Apareix la programaci\u00f3 estructurada, ja no nom\u00e9s s\u2019utilitzen els llenguatges de programaci\u00f3 per realitzar c\u00e0lculs matem\u00e0tics com fins ara. Apareix tamb\u00e9 l\u2019\u00fas de variables, subprogrames, estructures etc.. En aquesta generaci\u00f3 podem trobar llenguatges de programaci\u00f3 com C, Pascal o Modula.</li> <li>Quarta Generaci\u00f3: En aquesta generaci\u00f3 trobarem llenguatges desenvolupats per crear un determinat tipus de programari, es configuren per tasques molt concretes.</li> <li>Cinquena Generaci\u00f3: on estarien els llenguatges dissenyats per afrontar la intel\u00b7lig\u00e8ncia artificial com per exemple Prolog. Comen\u00e7a tamb\u00e9 a posar-se en pr\u00e0ctica la programaci\u00f3 orientada a objectes com a nou paradigma de programaci\u00f3.</li> <li>Generaci\u00f3 Visual: nascuda a principis dels anys 90 i com a conseq\u00fc\u00e8ncia de la necessitat de usar interf\u00edcies cada vegada m\u00e9s amigables i f\u00e0cils.</li> </ul>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#forma-dexecucio","title":"FORMA D'EXECUCI\u00d3","text":"<p>Com havien dit abans, abans d\u2019executar un programa escrit en un llenguatge de programaci\u00f3 qualsevol, s\u2019ha de traduir al llenguatge que pot entendre la m\u00e0quina, binari. Aquest proc\u00e9s es pot fer de dues formes:</p> <ul> <li> <p>Llenguatges compilats: per tal de compilar un programa es realitzen les seg\u00fcents tasques: an\u00e0lisi l\u00e8xic, sint\u00e0ctic i sem\u00e0ntic del programa, traducci\u00f3 a codi objecte, enlla\u00e7 amb altres llibreries i creaci\u00f3 de l\u2019executable. El proc\u00e9s de compilaci\u00f3 \u00e9s un proc\u00e9s de traducci\u00f3 del llenguatge d'alt nivell utilitzat al llenguatge m\u00e0quina que pot entendre l'ordinador.</p> </li> <li> <p>Llenguatges interpretats: Aquest tipus de codis es lligen,Un diagrama de flux \u00e9s una representaci\u00f3 gr\u00e0fica d'un algorisme. S'utilitza en disciplines com la programaci\u00f3 inform\u00e0tica, l'economia, els processos industrials o la psicologia cognitiva. Aquests diagrames utilitzen s\u00edmbols amb significats ben definits que representen els passos de l'algorisme, i representen el flux d'execuci\u00f3 mitjan\u00e7ant fletxes que connecten els punts d'inici i de finalitzaci\u00f3. Un diagrama de flux sempre t\u00e9 un \u00fanic punt d'inici i un \u00fanic punt de finalitzaci\u00f3. A m\u00e9s, tot cam\u00ed d'execuci\u00f3 ha de permetre arribar des de l'inici fins al final.</p> </li> </ul>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#paradigma-de-programacio","title":"PARADIGMA DE PROGRAMACI\u00d3","text":"<ul> <li> <p>Programaci\u00f3 estructurada: Utilitzen les estructures b\u00e0siques de programaci\u00f3: seq\u00fcencial, alternativa i iterativa combinats amb la programaci\u00f3 modular per dissenyar programes. Els exemples podrien ser C i Pascal.</p> </li> <li> <p>Programaci\u00f3 orientada a objectes: Entenen els programes com un conjunt d\u2019objectes que tenen unes caracter\u00edstiques pr\u00f2pies, uns m\u00e8todes i que interactuen amb els altres objectes que formen part del sistema. Entre aquests ens podrem trobar: C++ o Java</p> </li> </ul>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#segons-nombre-de-processos","title":"SEGONS NOMBRE DE PROCESSOS","text":"<p>\u00c9s a dir, si permeten la execuci\u00f3 concurrent, m\u00e9s d\u2019un proc\u00e9s al mateix temps o no. Per tant ens podem trobar:</p> <ul> <li> <p>Llenguatges de programaci\u00f3 concurrents que permeten la concurr\u00e8ncia, \u00e9s a dir, aquells llenguatges de programaci\u00f3 que disposen de les eines necess\u00e0ries per definir i treballar amb diverses tasques (fils d'execuci\u00f3 o threads) dins del mateix programa. La concurr\u00e8ncia \u00e9s l'habilitat que t\u00e9 un ordinador per realitzar diverses tasques al mateix temps.</p> </li> <li> <p>Llenguatges de programaci\u00f3 no concurrents. Nom\u00e9s una tasca al mateix temps.</p> </li> </ul>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#segons-interactivitat","title":"SEGONS INTERACTIVITAT","text":"<p>\u00c9s el procediment per escriure parts d'un programa mentre est\u00e0 actiu. Programaci\u00f3 interactiva. Modificaci\u00f3 d'un programa mentre aquest estiga actiu. El terme de programaci\u00f3 interactiva no t\u00e9 a veure amb l'estil en qu\u00e8 est\u00e0 escrit un programa, sin\u00f3 amb el proc\u00e9s d'escriptura del codi.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#visuals-o-no","title":"VISUALS O NO","text":"<p>Permeten la programaci\u00f3 per reutilitzaci\u00f3 de components mitjan\u00e7ant drag and drop en un entorn gr\u00e0fic o no. L'exemple m\u00e9s conegut \u00e9s l'Scratch.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#mapa-mental","title":"MAPA MENTAL","text":"<p>Al seg\u00fcent mapa mental s'ha intentat organitzar en categories i subcategories dels diferents llenguatges de programaci\u00f3 segons l'explicaci\u00f3 anterior.</p> mindmap   root ((LLENGUATGES))     Classificaci\u00f3       Proximitat         baix         mitj\u00e0         alt       Proposit         general         espec\u00edfic       Generaci\u00f3         1G         2G         3G         4G         5G         Gen Visual     Caracter\u00edstiques t\u00e8cniques       Execuci\u00f3         compilats         interpretats       Paradigma         estructurats         orientat a a objectes       Processos         concurrents         No concurrents       Visuals         visuals         No visuals       Interactivitat         Interactius         No interactius   Activitat 103. Compara diferents llenguatges de programaci\u00f3 <p>Els llenguatges de programaci\u00f3 s'utilitzen per donar solucions a problemes, per exemple problemes matem\u00e0tics. Imagina que volem escriure un algorisme en un llenguatge programaci\u00f3 que donat un nombre en base decimal el convertisca a binari. </p> <p>Demana-li a ChatGPT que t'escriga aquesta algorisme en diversos llenguatges de programaci\u00f3 diferents, per exemple, Java, Python, C# i C++. Copia el codi que et proporciona la IA, compara els dos codis en els dos llenguatges i escriu les teues conclusions.</p> <p>Pregunta-li tamb\u00e9 que t'assenyale els blocs principals de cada programa escrit en llenguatges diferents.</p> <p>Entrega: Un document pdf amb els codis de dos llenguatges diferents i les difer\u00e8ncies i conclusions que hages tret en clar.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#fases-desenvolupament","title":"Fases desenvolupament","text":"<p>A l\u2019hora d\u2019afrontar la realitzaci\u00f3 d\u2019un programa hem de tindre clar que hem de fer. \u00c9s un error comen\u00e7ar a crear programari a lo loco ja que nom\u00e9s aconseguirem dedicar a aquest menester m\u00e9s temps que el que es necessita. A m\u00e9s a m\u00e9s el proc\u00e9s de creaci\u00f3 d\u2019un programa no nom\u00e9s \u00e9s picar codi. D\u2019aquesta manera a l\u2019hora de construir un programa es deurien seguir una s\u00e8rie de fases o pautes.</p> <p>Les fases de desenvolupament de programari s\u00f3n: an\u00e0lisi, disseny, codificaci\u00f3, prova i documentaci\u00f3</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#analisi-del-problema","title":"An\u00e0lisi del problema","text":"<p>Estudi del problema, quina \u00e9s la seua finalitat, a qui va dirigit, quins elements ha d\u2019incloure, quines tasques ha de realitzar. En aquesta fase es realitzen entrevistes amb els usuaris o clients entre d\u2019altres t\u00e8cniques. La finalitat d\u2019aquesta fase \u00e9s fer un recull dels diferents requeriments que ha de tenir el nostre producte. Per tant al final d'aquesta fase deuriem tindre una llista amb els requisits que ha de tindre la nostra aplicaci\u00f3. Aquesta fase respon al QU\u00c8 del nostre projecte, es a dir, s'intenta esbrinar qu\u00e8 \u00e9s el que realment es necessita i s'arriba a una comprensi\u00f3 adequada dels requeriments del sistema.</p> <p>FruitApp - An\u00e0lisi</p> <p>Imaginem que ens disposem a fer una aplicaci\u00f3 que gestione la fruiteria del barri. En aquesta fase \u00e9s on hauriem d'esbrinar, entre altres coses: quins productes es venen, quin preu tenen, l'agenda de clients, quina informaci\u00f3 volem saber dels clients, quina informaci\u00f3 volem saber de prove\u00efdors etc. Suposem que ens farem c\u00e0rrec d'una part xicoteta d'aquesta aplicaci\u00f3: la introducci\u00f3 de tickets de compra nous. En aquesta fase, l'encarregat de la tenda, ens ha dit que necessitaria que els per cada client que compre es necessita un ticket, amb c\u00f2pia per al venedor, que mostrara el nom de la botiga, adre\u00e7a completa juntament amb la data i hora de la compra. A continuaci\u00f3 el ticket reflectir\u00e0 els productes que s'han comprat tenint en compte que s'ha de mostrar per cada producte: quantitat, nom del producte, preu per unitat i preu total (preu per unitat per quantitat). Finalment tamb\u00e9 ha de mostrar la base imposable, suma del total dels productes comprats, IVA (21%), descompte i preu total de la compra. Per acabar, al ticket tamb\u00e9 es reflectir\u00e0 la quantitat de diners rebuts per part del client i els diners que li hem tornat.</p> <p>Mira el seg\u00fcent exemple:</p> <p> </p> Producte - An\u00e0lisi <p>Requeriments del sistema o aplicaci\u00f3 en base a la informaci\u00f3 que hem aconseguit per mitjan\u00e7ant entrevistes, enquestes etc.. En altres paraules: el que ha de fer la nostra aplicaci\u00f3, finalitat, objectius. S'hauria de descriure detalladament el que realitza el sistema i com reacciona en les diferents situacions en les que ens podr\u00edem trobar.</p> <p>El producte d'aquesta fase podria ser per exemple una llista de requeriments a partir de la quan podrem comen\u00e7ar a treballar a la fase seg\u00fcent.</p> <pre><code>1. Els tiquets tindran una cap\u00e7alera amb la informaci\u00f3 de la botiga.\n2. En la cap\u00e7alera tamb\u00e9 es reflectir\u00e0 la data i hora en que s'ha fet la compra.\n3. Per cada producte que es compre, hem de coneixer el nom del producte, la quantitat, el preu unitari i el total.\n4. Cada l\u00ednia del tiquet nom\u00e9s mostra informaci\u00f3 relativa a un producte.\n5. Una vegada tancada la compra, es mostrar\u00e0 un footer que tindra: preu, IVA, descompte i preu final.\n6. El preu o base imposable \u00e9s la suma del total de cadascuna de les l\u00ednies de productes anteriors\n7. L'IVA \u00e9s del 21%\n8. El descompte \u00e9s un percentatge que s'aplica al preu total amb IVA i que podria anar des del 0% fins al 15%.\n9. Del c\u00e0lcul anterior obtindrem el preu total que ha de pagar el client.\n10. Es guardar\u00e0 informaci\u00f3 al sistema de la quantitat de diners que ha entregat el client.\n11. Al tiquet tamb\u00e9 es mostrar\u00e0 quin \u00e9s el canvi que se li ha tornat a client.\n12. Finalment el tiquet s'imprimir\u00e0 en paper per duplicat: un per al client i un per a la botiga.\n</code></pre>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#disseny-de-lalgorisme","title":"Disseny de l'algorisme","text":"<p>Es refereix a com anem a solucionar els requeriments obtinguts a la fase anterior. En aquesta fase s'estudien possibles opcions d'implementaci\u00f3 per a l'aplicaci\u00f3 que hem de construir, aix\u00ed com decidir l'estructura general de la mateixa. El disseny \u00e9s una etapa complexa i el seu proc\u00e9s s'ha de realitzar d'una forma iterativa.</p> <p>Es possible que la soluci\u00f3 inicial no siga la m\u00e9s adequada, per tant en tal cas s'hauria de redefinir. Tanmateix, hi ha cat\u00e0legs de patrons de disseny molt \u00fatils que recullen errades que altres han com\u00e9s per no caure a la mateixa trampa. Aquesta fase respon al QUAN del nostre projecte.</p> <p>FruitApp - Disseny</p> <p>Continuant en la nostra aplicaci\u00f3 de la fruiteria, en aquesta fase i una vegada acabada la fase d'an\u00e0lisi d'on s'obtenen els requeriments, hauriem de, per un costat triar el paradigma de programaci\u00f3 que escollirem: programaci\u00f3 estructurada o programaci\u00f3 orientada a objectes (Normalment aquest \u00faltim). El llenguatge de programaci\u00f3 a utilitzar. Una vegada ja ho hem triat, hem de decidir com el nostre programa va a complir amb els requeriments obtinguts a la fase d'analisi, \u00e9s a dir, com crearem el nou ticket de compra, com afegirem els productes i com calcularem el preu final i imprimirem el document.</p> Producte - Disseny <p>Si hem triat el paradigma de programaci\u00f3 estructurada hauriem de dissenyar els diagrames flux de les diferents funcionalitats de l'aplicaci\u00f3, el pseudocodi, etc.. Aquestes funcionalitats s'hauran de deduir dels requeriments de la fase anterior.</p> <p>Per exemple, si utilitzem el paradigma de programaci\u00f3 estructurada, en aquesta fase es dissenyaria l'algorisme en pseudocodi o diagrama de flux de cadascuna de les funcionalitats que ha de tindre la nostra aplicaci\u00f3. </p> <p>\u00c9s a dir, si FruitApp ha de poder, crear tickets nous, cobrar i calcular les tornes, hauriem de dissenyar dos diagrames de flux, un per a cada funcionalitat.</p> <p>En canvi, si pel contrari escollim el paradigma de programaci\u00f3 orientada a objectes obtindriem casos d'\u00fas, diagrames de classes, diagrames de comportament en UML. </p> <p>Un resultat possible d'aquesta fase \u00e9s l'algorisme que resol el problema. Seguint l'exemple de les receptes anteriors, una possible soluci\u00f3 a aquesta fase seria:</p> <pre><code>1. Obre un nou ticket.\n2. Agafa el primer producte que porta el client\n3. Selecciona el producte al sistema inform\u00e0tic.\n4. Pesa o compta la quantitat de producte que vol comprar.\n5. Introdueix les dades anteriors.\n6. Repeteix els passos 2, 3, 4 i 5 mentre queden productes per enregistrar.\n7. Aplica descompte en cas necessari.\n8. Tanca el ticket.\n9. Imprimeix el ticket.\n</code></pre>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#codificacio","title":"Codificaci\u00f3","text":"<p>Ha arribat el moment de picar codi. A la fase de codificaci\u00f3, ens arriben els documents (pseudocodi, flux, diagrames de classes, UML) necessaris per poder comen\u00e7ar a programar. En aquesta fase hem d'escollir les eines (IDEs) adequades per poder desenvolupar el nostre projecte i tamb\u00e9 escollirem (va lligat en realitat) el llenguatge de programaci\u00f3 </p> <p>FruitApp - Codificaci\u00f3</p> <p>Seguint amb la fruiteria i suposant que ens han passat un diagrama de flux, pseudocodi o diferents diagrames en UML de la nostra aplicaci\u00f3 de generaci\u00f3 de tickets, podriem per exemple triar l'IDE Visual Studio Code i C# com a llenguatge de programaci\u00f3 o l'IDE Eclipse i Java o Visual Studio i Java, per despr\u00e9s, traduir de la t\u00e8cnica de disseny utilitzada a un llenguatge de programaci\u00f3 concret.</p> Producte - Codificaci\u00f3 <p>El projecte amb tots els fitxers que tenen el codi desenvolupat aix\u00ed com tamb\u00e9 els executables o binaris ja compilats i funcionant.</p> <pre><code>Ticket t = new Ticket();\nwhile(quedenProductesPerPesar) {\n    Producte p = new Producte(\"Nom\");\n    p.pesa();\n    t.afegir(p);\n}\nt.aplicaDescompte(10);\nt.close();\nt.print();\n</code></pre>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#prova-i-depuracio","title":"Prova i depuraci\u00f3","text":"<p>Com que errar es d'humans, la fase de proves del cicle de vida de programari busca detectar els errors comesos en les etapes anteriors per tal de poder corregir-los. Per suposat, all\u00f2 ideal \u00e9s fer-ho abans que l'usuari final se'ls trobe. Es diu que una prova amb exit \u00e9s una prova que detecta algun error.</p> <p>Seguint amb la nostra aplicaci\u00f3 podria passar que una vegada posada en marxa ens adonem que no hem contemplat la possibilitat d'esborrar l\u00ednies del ticket. Com ho solucionariem? Primer agafariem el diagrama de flux d'aquesta funci\u00f3 i el modificariem per tal que s'adapte a la nova realitat. Despr\u00e9s hauriem de modificar el codi a la fase de codificaci\u00f3 per tornar finalment a la fase de prova i depuraci\u00f3.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#documentacio","title":"Documentaci\u00f3","text":"<p>Aquesta \u00e9s la fase que a cap programador li agrada fer, per\u00f2 en realitat \u00e9s una fase que no est\u00e0 necess\u00e0riament al final del cicle de vida del programa, sino que es fa de forma transversal en totes les etapes del desenvolupament. </p> <p>Es considera documentaci\u00f3 des dels requeriments inicials al manual d'usuari passant per el pseudocodi, diagrames de classes i \u00fas, i tamb\u00e9 els comentaris que es posen al codi.</p> Activitat 104. Simula les fases de desenvolupament software <p>Imagina que tens el projecte d'una aplicaci\u00f3 t\u00e9 com a finalitat gestionar les diverses llistes de compra que poden haver a una casa. Simula que passes per cadascuna de les fases de desenvolupament de programari vistes a l'apartat anterior i genera tota la documentaci\u00f3 necess\u00e0ria.</p> <p>Considera que la fase d'an\u00e0lisi l'has de fer a partir d'aquest enunciat, \u00e9s a dir, els requeriments o requisits d'aquesta fase els haur\u00e0s de treure d'ac\u00ed.</p> <p>La idea \u00e9s tenir una app que controle les diverses llistes de compra que pots tindre a casa. B\u00e0sicament seria digitalitzar la t\u00edpica llibreta que hi ha, normalment, a la nevera on anotem aquelles coses que hem de comprar la propera vegada que anem al supermercat, per exemple: si estem cuinant i veiem que no hi ha: ous, sal o oli; o anotem a la llibreta per comprar-ho. O si estem posant la llavador i s'acaba el suavitzant, o anotem per tal de recordar-nos de comprar-ho. </p> <p>Quan s'obre l'aplicaci\u00f3 m'apareix una primera pantalla amb les llistes, que es diferencien pel nom que tenen, de la compra que tinc. Una vegada seleccione la llista que vull, m'apareix un llistat amb els productes que tinc pendent per comprar. En aquesta mateixa pantalla he de poder afegir productes o esborrar-los si ja els he comprat.</p> <p>Com podeu observar \u00e9s una aplicaci\u00f3 relativament senzilla. A l'hora de fer aquesta activitat, vos aconselle que la manteniu all\u00f2 m\u00e9s senzilla possible per tal de poder fer-la correctament.</p> <p>Igual que a l'activitat dels llenguatges de programaci\u00f3, la presentaci\u00f3 i maquetaci\u00f3 en aquest document \u00e9s important. Per tant, deuries posar portada i \u00edndex i tindre cura amb la formataci\u00f3 (textos i imatges). A banda de les fases d'an\u00e0lisi (llista de requeriments) i la fase de disseny (algorisme en instruccions de text).</p> <p>Entregar: Un document pdf amb els requeriments de la fase d'an\u00e0lisi, un disseny d'algun dels algorismes que formen part del nostre projecte a mode de seq\u00fc\u00e8ncia d'instruccions.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#ides","title":"IDE's","text":"<p>Un entorn de desenvolupament integrat o IDE (de l'angl\u00e8s Integrated Development Environment) \u00e9s una eina inform\u00e0tica per al desenvolupament de programari de manera c\u00f2moda i r\u00e0pida. Aix\u00ed doncs \u00e9s un entorn de desenvolupament que agrupa diferents funcions en un sol programa, habitualment: editor de codi, compilador, depurador i un programa de disseny d'interf\u00edcie gr\u00e0fica.</p> <p>Els IDE estan dissenyats per maximitzar la productivitat del programador proporcionant components molt units amb interf\u00edcies d'usuari similars. Els IDE presenten un \u00fanic programa en qu\u00e8 es porta a terme tot el desenvolupament. Generalment, aquest programa sol oferir moltes caracter\u00edstiques per a la creaci\u00f3, modificaci\u00f3, compilaci\u00f3, implementaci\u00f3 i depuraci\u00f3 de programari.</p> <p>Durant el curs utilitzarem principalment el seg\u00fcent IDE: Processing IDE. Per\u00f2 tamb\u00e9 podriem treballar utilitzant Eclipse IDE. Una alternativa a Eclipse pot ser tamb\u00e9 Visual Studio Code</p> <p>Veiem-los amb m\u00e9s detall.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#processing-ide","title":"Processing IDE","text":"<p>Processing \u00e9s un llenguatge de programaci\u00f3 i entorn de desenvolupament integrat de codi obert basat en Java, de f\u00e0cil utilitzaci\u00f3, i que serveix com a mitj\u00e0 per a l'ensenyament i la producci\u00f3 de projectes multim\u00e8dia i interactius de disseny digital. Va ser iniciat per Ben Fry i Casey Reas, ambd\u00f3s membres d'Aesthetics and Computation Group del MIT Media Lab dirigit per John Maeda.</p> <p>Un dels objectius declarats de Processing \u00e9s actuar com a eina perqu\u00e8 artistes, dissenyadors visuals i membres d'altres comunitats aliens al llenguatge de la programaci\u00f3, n'aprenguessin les bases a trav\u00e9s d'una mostra gr\u00e0fica instant\u00e0nia i visual de la informaci\u00f3. El llenguatge de Processing es basa en Java, tot i que fa servir una sintaxi simplificada i un model de programaci\u00f3 de gr\u00e0fics.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#caracteristiques_1","title":"Caracter\u00edstiques","text":"<p>Processing inclou una finestra visual com a complement al contorn de l'entorn de desenvolupament integrat (IDE) per organitzar-les als projectes.</p> <p>Cada esquema de Processing \u00e9s en realitat una subclasse de PApplet, un tipus Java que posa en funcionament la majoria de les caracter\u00edstiques del llenguatge del Processing.</p> <p>En programar a Processing, totes les classes addicionals definides seran tractades com a classes internes quan el codi es tradueix en pur Java abans de compilar. Aix\u00f2 vol dir que l'\u00fas de variables est\u00e0tiques i m\u00e8todes de les classes est\u00e0 prohibit llevat que s'indiqui espec\u00edficament a Processing qu\u00e8 vol el codi en mode pur Java.</p> <p>Processing tamb\u00e9 permet als usuaris crear les seves pr\u00f2pies classes de PApplet a la finestra. Aix\u00f2 permet que els tipus de dades complexes puguin incloure qualsevol nombre d'arguments i evita les limitacions a l'\u00fas de tipus de dades est\u00e0ndard com int (sencer), char (car\u00e0cters), float (nombre real) o color (RGB, hexadecimal ARGB).</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#estructura-en-processing-ide","title":"Estructura en Processing IDE","text":"<p>Per tal de treballar amb les estructures b\u00e0siques del paradigma de programaci\u00f3 estructurada, utilitzarem Processing IDE que \u00e9s un IDE lleuger que ens permet programar en Java sense necessitat de fer estructures de classes molt complexes.</p> <p>Concretament Processing IDE \u00e9s un entorn integrat de desenvolupament juntament amb una llibreria gr\u00e0fica que inicialment es va construir per a arts electr\u00f2niques i disseny visual per tal de poder ensenyar els fonaments de la programaci\u00f3 a no-programadors en un context visual. \u00c9s per aix\u00f2 que aquesta n de l'entorn de desenvolupament integrat (IDE) per organitzar-les als projectes.</p> <p>Cada esquema de Processing \u00e9s en realitat una subclasse de PApplet, un tipus Java que posa en funcionament la majoria de les caracter\u00edstiques del llenguatge del Processing.</p> <p>En programar a Processing, totes les classes addicionals definides seran tractades com a classes internes quan el codi es tradueix en pur Java abans de compilar. Aix\u00f2 vol dir que l'\u00fas de variables est\u00e0tiques i m\u00e8todes de les classes est\u00e0 prohibit llevat que s'indiqui espec\u00edficament a Processing qu\u00e8 vol el codi en mode pur Java.</p> <p>Processing tamb\u00e9 permet als usuaris crear les seves pr\u00f2pies classes de PApplet a la finestra. Aix\u00f2 permet que els tipus de dades complexes puguin incloure qualsevol nombre d'arguments i evita les limitacions a l'\u00fas de tipus de dades est\u00e0ndard com int (sencer), char (car\u00e0cters), float (nombre real) o color (RGB, hexadecimal ARGB).</p> <p>A continuaci\u00f3 vos mostrem un exemple d'estructura de programa en Processing IDE</p> Codi Projecte Processing IDE <pre><code>// Bloc 1. Refer\u00e8ncies a altres llibreries.\nimport javax.swing.JOptionPane;      // Llibreria gr\u00e0fica per a di\u00e0legs\n\n// Bloc 2. Constants\nfinal static int TAM = 30;\n\n// Bloc 3. Variables globals a l'aplicaci\u00f3.\nint posX, posY;\n\n// Funci\u00f3 setup: nom\u00e9s s'executa una vegada a l'inici de l'execuci\u00f3.\nvoid setup () {  \n    // Sent\u00e8ncies d'inicialitzaci\u00f3 de la nostra aplicaci\u00f3.\n    size (640,480);\n    background (255);\n    posX = -1;\n    posY = -1;\n}\n\n// Funci\u00f3 draw: s'executa 60 vegades per segon (60Hz freq\u00fc\u00e8ncia del monitor)\nvoid draw () { \n    fill(255,0,0);\n    // Codi principal del programa.\n    if (posX != -1 &amp;&amp; posY != -1)\n        ellipse(posX, posY, TAM, TAM);\n}\n\n// Declaraci\u00f3 d'altres funcions. Opcional\n\n// Esedeveniments\nvoid mousePressed () {\n    posX = mouseX;\n    posY = mouseY;\n}\n\nvoid keyPressed() {}\nvoid keyReleased () {}\nvoid mouseDragged () {}\nvoid mouseMoved () {}\n</code></pre> Activitat 105. Instal\u00b7la Processing IDE i crea un projecte <p>Descarrega l'aplicaci\u00f3 Processing IDE de la seua p\u00e0gina oficial i instal\u00b7la-la al teu ordinador. Despr\u00e9s copia i apega qualsevol codi (compatible amb Processing IDE) que trobes per Internet i prova el que passa. Tamb\u00e9 pots copiar el codi anterior i veure el que est\u00e0 passant. Fes-li modificacions al codi per que actue de forma diferent a l'original.</p> <p>Entrega: programa escrit en Processing IDE amb nom activitat105.pde amb les modificacions i els comentaris que consideres oportuns. Les modificacions al codi les pots indicar mitjan\u00e7ant comentaris en l\u00ednia.</p> <p>Si t'has fixat al desar el projecte veur\u00e0s que s'ha creat una carpeta activitat105 que ser\u00e0 la carpeta del projecte i dintre estar\u00e0 el .pde.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#visual-studio-code","title":"Visual Studio Code","text":"<p>Visual Studio Code \u00e9s un editor de codi font desenvolupat per Microsoft per a Windows, Linux i macOS. Inclou suport per a la depuraci\u00f3, control integrat de Git, ressaltat de sintaxi, finalitzaci\u00f3 intel\u00b7ligent codi, fragments i refactoritzaci\u00f3 de codi. Tamb\u00e9 \u00e9s personalitzable, de manera que els usuaris poden canviar el tema de l'editor, les adreces de teclat i les prefer\u00e8ncies. \u00c9s gratu\u00eft i de codi obert, encara que la desc\u00e0rrega oficial est\u00e0 sota programari propietari. Visual Studio. </p> <p>L'avantatge principal del Visual Studio Code \u00e9s l'ecosistema d'extensions que l'envolten i que el fan un entorn de desenvolupament tant potent com l'Eclipse IDE per\u00f2 no tan pesat</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#crear-un-projecte-en-visual-studio-code","title":"Crear un projecte en Visual Studio Code","text":"<p>Una vegada tens instal\u00b7lat Visual Studio Code al teu ordinador t'hauries d'assegurar que tens instal\u00b7lada l'extensi\u00f3 Java Extension Pack que inclou:</p> <pre><code>1. Language Support for Java(TM)\n2. Debugger for Java\n3. Java Test Runner\n4. Maven for Java\n5. Gradle for Java\n6. Project Manager for Java\n7. Visual Studio IntelliCode (opcional)\n</code></pre> <p>Si no el tens instal\u00b7lat, prem \"Ctrl+Mayus+X\" i te s'obrir\u00e0 el taules d'extensions a l'esquerra del Visual Studio Code. Busca Java Extension Pack i instal\u00b7la'l.</p> <p>Quan ja tingues instal\u00b7lada l'extensi\u00f3 de Java a Visual Studio Code, has de seguir els seg\u00fcents passos per crear un projecte:</p> <ul> <li>Obre la paleta (Ctrl+May\u00fas+P) i tria Java: Create Project.</li> <li>Tria No build tools (si no vols usar Maven/Gradle).</li> <li>Dona-li nom al projecte.</li> <li>Tria la carpeta de dest\u00ed.</li> </ul> <p>Si vas al explorador de carpetes del sistema, et trobar\u00e0s la seg\u00fcent estructura de carpetes:</p> <p>     graph TD \t\tA[\ud83d\udcc1 ProjecteJavaVS] --&gt; B[\ud83d\udcc1 lib]         A --&gt; C[\ud83d\udcc1 src]         A --&gt; D[\ud83d\udcc1 .vscode]         C --&gt; E[\ud83d\udce6 App.java]         A --&gt; F[\ud83d\udcd8 README.md]  </p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#executar-el-projecte","title":"Executar el projecte","text":"<p>Per poder executar el projecte has d'obrir el fitxer .java principal, al nostre cas App.java, despr\u00e9s fes clic a la icona de \"play\" al costat de la funci\u00f3 main o a la cantonada superior dreta. La sortida apareixer\u00e0 al terminal integrat.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#extensio-per-a-processing-ide","title":"Extensi\u00f3 per a Processing-IDE","text":"<p>Un projecte fet amb Processing \u00e9s pot gestionar tamb\u00e9 utilitzant Visual Studio Code si segueixes aquests passos</p> <ol> <li>Ves a la pestanya Extensions (Ctrl+Mayus+X)</li> <li>Busca l'extensi\u00f3 per al llenguatge de Processing</li> <li>Instal\u00b7la'l</li> </ol> <p> </p> <ol> <li>Una vegada instal\u00b7lada l'extensi\u00f3 per tal que funcione correctament has d'afegir el seg\u00fcent fitxer tasks.json a la carpeta .vscode del propi projecte</li> </ol> Codi de tasks.json <pre><code>{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"Run Processing\",\n            \"type\": \"shell\",\n            \"command\": \"/rutaProcessing/processing-java\",\n            \"args\": [\n                \"--sketch=${workspaceFolder}\",\n                \"--output=${workspaceFolder}/out\",\n                \"--force\",\n                \"--run\"\n            ],\n            \"group\": {\n                \"kind\": \"build\",\n                \"isDefault\": true\n            },\n            \"problemMatcher\": []\n        }\n    ]\n}\n</code></pre> <ol> <li>Una vegada seguits aquests passos i si has escrit b\u00e9 el fitxer json, al premer Ctrl+Mayus+B s'executar\u00e0 l'sketch fet amb Processing IDE.</li> </ol>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#extensio-per-a-mermaid","title":"Extensi\u00f3 per a Mermaid","text":"<p>Eina molt \u00fatil per poder dissenyar gr\u00e0fics tipus diagrames de flux o diagrames de classes i UML en general entre altres. Has d'anar a les extensions de Visual Studio Code i buscar Mermaid Char</p> <p> </p> <p>Una vegada instal\u00b7lada, l'extensi\u00f3 et demanar\u00e0 que vol entrar al lloc web de mermaid chart per validar-se. Digues que s\u00ed i si no tens compte en pots crear un i despr\u00e9s segueix els passos que et diu el proc\u00e9s d'instal\u00b7laci\u00f3.</p> Activitat 106. Instal\u00b7la Visual Studio Code i les extensions <p>Instal\u00b7la Visual Studio Code al teu ordinador. Una vegada ja tens l'IDE instal\u00b7lat afegeix-li les extensions \"Processing Language\" i \"Mermaid Chart\".</p> <p>Entrega: Tutorial pas a pas (i en pdf) on s'explique els passos que has seguit per instal\u00b7lar l'IDE de Visual Studio Code i les seues extensions.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#estructura-dun-programa-en-visual-studio-code","title":"Estructura d'un programa en Visual Studio Code","text":"<p>El primer que s'ha de tenir en compte \u00e9s que tot programa escrit en Java ha de tindre almenys un main() a la classe principal per tal que s'execute. En resum, un programa escrit en Java ha de tindre:</p> <ul> <li>Declaracions d'importaci\u00f3 de paquets o inclusi\u00f3 d'altres llibreries.</li> <li>Declaracions de les classes que el formen.</li> <li>El m\u00e8tode main</li> <li>M\u00e8todes definits pels usuaris dins de les classes.</li> <li>Comentaris.</li> </ul> Codi Projecte Visual Studio Code <pre><code>    // Programa principal\n    // Llibreries amb funcions d'entrada i eixida.\n    import java.io.*;\n\n    // Nom de la classe principal\n    public class nomPrograma {    \n\n        // Membres de la classe (una calculadora)\n        Calculadora calc;         \n\n        // M\u00e8tode principal main\n        public static void main (String [] args) { \n            // Instruccions del m\u00e8tode principal.\n            calc = new Calculadora();              \n            int result = calc.suma(10,20);\n            System.out.println(\"Resultat: \" + result );\n        }\n    }\n\n    // Una altra classe\n    import java.io.*;\n\n    // Nom de la classe \n    public class Calculadora {            \n        \n        // M\u00e8tode de la classe\n        public int suma(int a, int b) {   \n            return a + b;\n        }\n    }\n</code></pre> <p>Al programa anterior podem trobar una classe Calculadora que cont\u00e9 el m\u00e8tode principal main i que al mateix temps cont\u00e9 el conjunt d'instruccions que es van a executar de forma seq\u00fcencial al nostre programa. Aquesta classe Calculadora t\u00e9 un membre calc que \u00e9s un objecte (ja veurem classes i objectes m\u00e9s endavant) de tipus calculadora i que est\u00e0 definit m\u00e9s endavant amb la classe p\u00fablica calculadora.</p> <p>Les sent\u00e8ncies que executa el nostre programa d'exemple s\u00f3n les seg\u00fcents:</p> <ul> <li>Instancia l'objecte calc (calc = new Calculadora()).</li> <li>Declara una variable de tipus enter result</li> <li>Crida al m\u00e8tode suma de l'objecte calc passant-li els par\u00e0metres 10 i 20</li> <li>Deposita el resultat que retorna el m\u00e8tode suma de la classe calc a la variable result</li> <li>Mostra per pantalla el resultat de la suma.</li> </ul> Activitat 107. Crea un projecte amb Visual Studio Code <p>Segueix les instruccions de com crear un projecte en Visual Studio Code. Desa el projecte com a Calculadora per tal que el nom del teu projecte coincidesca amb el nom de la classe principal i no done cap problema a l'hora d'executar-se.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#breu-historia-de-la-programacio","title":"Breu hist\u00f2ria de la programaci\u00f3","text":"<p>A continuaci\u00f3 una breu hist\u00f2ria sobre la evoluci\u00f3 de la programaci\u00f3 estructurada. A l'inici dels temps del la inform\u00e0tica moderna  segona meitat dels segle XX i considerant ordinador programable aquell que seguia l'arquitectura de von Neumann, els primers programes s'escrivien en binari (llenguatge m\u00e0quina) en targetes perforades.</p> <p>Aquestes targetes perforades s'utilitzaven per escriure programes sencers amb una finalitat molt concreta. Les targetes s'utilitzaven com a entrada de dades a la m\u00e0quina que s'encarregava de llegir les instruccions escrites en binari, i una a una, carregar-les a mem\u00f2ria i executar-les. Un problema d'aquest incipient paradigma de programaci\u00f3 \u00e9s que cada conjunt d'instruccions \u00e9s espec\u00edfic a cada m\u00e0quina.</p> <p>Amb el temps i conforme augmenta la capacitat de computaci\u00f3 dels ordinadors i tamb\u00e9 la complexitat dels programes, les targetes deixen de ser funcionals i apareixen els primers llenguatges de programaci\u00f3 generalistes com FORTRAN, COBOL o LISP per\u00f2 aquests encara no utilitzen el paradigma de programaci\u00f3 estructurada.</p> <p>A la decada dels anys 60, B\u00f6hm i Jacopini escriuen el teorema de la programaci\u00f3 estructurada, basant-se per suposat en part en aquells llenguatges de programaci\u00f3 que ja existien, i arriben a la conclusi\u00f3 qu\u00e8: la sent\u00e8ncia GOTO era una sent\u00e8ncia considerada perjudicial per a la programaci\u00f3 i per entendre els programes escrits en qualsevol llenguatge i tamb\u00e9 que amb nom\u00e9s les estructures seq\u00fcencial, iterativa i condicional era suficient per escriure qualsevol programa.</p> <p>En aquest tema veurem quines s\u00f3n les estructures de control de la programaci\u00f3 estructurada i com s'utilitzen, aix\u00ed com tamb\u00e9 les seues corresponents representacions gr\u00e0fiques en programes escrits en diagrames de flux, pseudocodi o algun llenguatge de programaci\u00f3 d'alt nivell.</p> <p> </p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#estructures-basiques","title":"Estructures b\u00e0siques","text":"<p>El teorema de el programa estructurat \u00e9s un resultat en la teoria de llenguatges de programaci\u00f3. Estableix que tota funci\u00f3 computable pot ser implementada en un llenguatge de programaci\u00f3 que combine nom\u00e9s tres estructures l\u00f2giques. Aquestes tres formes tamb\u00e9 anomenades estructures de control espec\u00edficament s\u00f3n:</p> <ul> <li>Seq\u00fc\u00e8ncia: execuci\u00f3 d'una instrucci\u00f3 despr\u00e9s d'una altra.</li> <li>Selecci\u00f3: execuci\u00f3 d'una de dues instruccions (o conjunts), segons el valor d'una variable booleana.</li> <li>Iteraci\u00f3: execuci\u00f3 d'una instrucci\u00f3 (o conjunt) mentre una variable booleana siga 'veritable'. Aquesta estructura l\u00f2gica tamb\u00e9 es coneix com a cicle o bucle.</li> </ul> <p>Aquest teorema demostra que la instrucci\u00f3 GOTO no \u00e9s estrictament necess\u00e0ria i que per a tot programa que l'utilitze existeix un altre equivalent que no fa \u00fas d'aquesta instrucci\u00f3.</p> <p>Els cient\u00edfics de la computaci\u00f3 usualment acrediten el teorema a un article de 1966 escrit per Corrado B\u00f6hm i Giuseppe Jacopini. No obstant aix\u00f2, David Harel va rastrejar els seus or\u00edgens fins a la descripci\u00f3 de 1946 de l'arquitectura de von Neumann i el teorema de la forma normal de Kleene.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#diagrames-de-flux","title":"Diagrames de flux","text":"<p>Abans d'entrar en el detall del que serien les estructures proposades en el teorema de programaci\u00f3 estructurada,  \u00e9s necessari que mirem amb detall una de les t\u00e8cniques de disseny d'algorismes m\u00e9s utilitzada i que ens servira per entendre un poc millor i de forma gr\u00e0fica que fa cada estructura.</p> <p>Un diagrama de flux \u00e9s una representaci\u00f3 gr\u00e0fica d'un algorisme. S'utilitza en disciplines com la programaci\u00f3 inform\u00e0tica, l'economia, els processos industrials o la psicologia cognitiva. Aquests diagrames utilitzen s\u00edmbols amb significats ben definits que representen els passos de l'algorisme, i representen el flux d'execuci\u00f3 mitjan\u00e7ant fletxes que connecten els punts d'inici i de finalitzaci\u00f3. Un diagrama de flux sempre t\u00e9 un \u00fanic punt d'inici i un \u00fanic punt de finalitzaci\u00f3. A m\u00e9s, tot cam\u00ed d'execuci\u00f3 ha de permetre arribar des de l'inici fins al final.</p> <p>Les seg\u00fcents s\u00f3n accions pr\u00e8vies a la realitzaci\u00f3 del diagrama de flux:</p> <ul> <li> <p>Identificar les idees principals que s'han d'incloure en el diagrama de flux. Han d'estar presents el propietari o responsable del proc\u00e9s, els propietaris o responsables del proc\u00e9s anterior i posterior i d'altres processos interrelacionats, aix\u00ed com les terceres parts interessades.</p> </li> <li> <p>Definir qu\u00e8 s'espera obtenir del diagrama de flux.</p> </li> <li>Identificar qui ho far\u00e0 servir i com.</li> <li>Establir el nivell de detall requerit.</li> <li>Determinar els l\u00edmits del proc\u00e9s a descriure.</li> </ul> <p>Els passos a seguir per construir el diagrama de flux s\u00f3n:</p> <ul> <li>Establir l'abast del proc\u00e9s a descriure. D'aquesta manera quedar\u00e0 fixat el comen\u00e7ament i el final del diagrama. Sovint el comen\u00e7ament \u00e9s la sortida del proc\u00e9s previ i el final l'entrada al proc\u00e9s seg\u00fcent.</li> <li>Identificar i llistar les principals activitats/subprocessos que estan incloses en el proc\u00e9s a descriure i el seu ordre cronol\u00f2gic.</li> <li>Si el nivell de detall definit inclou activitats menors, llistar-les tamb\u00e9.</li> <li>Identificar i llistar els punts de decisi\u00f3.</li> <li>Construir el diagrama respectant la seq\u00fc\u00e8ncia cronol\u00f2gica i assignant els corresponents s\u00edmbols.</li> <li>Assignar un t\u00edtol al diagrama i verificar que estigui complet i descrigui amb exactitud el proc\u00e9s escollit.</li> </ul>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#simbologia-i-significat","title":"Simbologia i significat","text":"<ul> <li>Oval o el\u00b7lipse: inici i final (obre i/o tanca el diagrama).</li> <li>Rectangle: activitat (representa l'execuci\u00f3 d'una o m\u00e9s activitats o procediments).</li> <li>Rombe: decisi\u00f3 (formula una pregunta o q\u00fcesti\u00f3).</li> <li>Cercle: connector (representa l'enlla\u00e7 d'activitats amb una altra dins d'un procediment).</li> <li>Triangle cap per avall: fitxer definitiu (guarda un document de forma permanent).</li> <li>Triangle cap per amunt: fitxer temporal (proporciona un temps per a l'emmagatzematge del document).</li> </ul> <p>A l'esquema seg\u00fcent pots revisar la simbologia gr\u00e0fica que usarem en aquest curs per tal de representar diagrames de flux.</p> <p>S\u00edmbols dels diagrames de flux</p> graph LR     class B classNode     Ini((Ini))     style Ini fill:#0F0     Ini--&gt;|L\u00ednia de flux|A[/Entrada eixida/]     A--&gt;B[Procediment oInstrucci\u00f3]     B--&gt;C{Decisi\u00f3}     C--&gt;Fi((Fi))     style Fi fill:#F00"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#exemples","title":"Exemples","text":"<p>A continuaci\u00f3 vegem alguns exemples que ens ajudaran a entendre-ho millor. Et recomane que intentes dissenyar una soluci\u00f3 utilitzant la t\u00e8cnica dels diagrames de flux abans de mirar a la soluci\u00f3.</p> Exemple 1. La nostra fruiteria <p>Es pret\u00e9n implementar un algorisme que s'encarregue, de la forma m\u00e9s eficient possible, la creaci\u00f3 i impressi\u00f3 de tiquets de compra per a tots els clients que entren a la nostra botiga. </p> <p>A la imatge seg\u00fcent podem observar un exemple d'algorisme de creaci\u00f3 d'un nou tiquet (nova compra).</p> graph LR     Id1((Inici))--&gt;B[Crear Tiquet Nou];     style Id1 fill:#0F0;     B--&gt;C[Afegir Item];     C--&gt;D{Compraacabada?};     D--&gt;|NO|C;     D--&gt;|SI|E[Calcular Preu Final];     E--&gt;F[Imprimir];     F--&gt;Id2((Final));     style Id2 fill:#F00;  <p>Expliquem breument el que fa aquest diagrama: primer crea un nou tiquet i afegeix un nou element (fruita o verdura), aquesta acci\u00f3 \u00faltima es repeteix fins que acabe de comprar. Quan s'acaba d'afegir items al nou tiquet, es calcula el preu final i s'imprimeix.</p> Exemple 2. Trobar les claus de casa <p>Imagineu que vull eixir de casa per\u00f2 no recorde on he posat les claus i sense elles no puc anar a cap lloc. Les he de buscar. El seg\u00fcent algorisme representat utilitzant un diagrama de flux, ens podria ajudar a trobar-les.</p> graph LR     Id1((Inici))--&gt;B[Buscar on sempre];     style Id1 fill:#0F0;     B--&gt;P1(fa:fa-spinner);     P1--&gt;D{Trobades?};     D--&gt;|NO|C[Buscar altre lloc];     C--&gt;P1;     D--&gt;|SI|E[Eixir de casa];     E--&gt;Id2((Fi));     style Id2 fill:#F00;  Exemple 3. Com anar de l'ajuntament al passeig <p>Ens trobem a la pla\u00e7a de l'ajuntament i un visitant ens pregunta com arribar al passeig Cervantes. Observa el seg\u00fcent diagrama de flux. Al tractar-se d'un exemple un poc m\u00e9s extens, primer descriurem les instruccions en llenguatge natural i despr\u00e9s farem el diagrama.</p> <ul> <li>Camina pel carrer major en direcci\u00f3 sud</li> <li>Quan arribes a l'encreuament amb el Carrer Ramon i Cajal gira a la dreta</li> <li>Camina fins la farmacia</li> <li>Quan arribes a la farm\u00e0cia gira a l'esquerra</li> <li>Caminar fins encreuament amb el carrer Moreral.</li> <li>Agafa el carrer moreral</li> <li>Al final del carrer moreral a l'esquerra.</li> </ul> <p>Una possible soluci\u00f3 al problema anterior seria:</p> graph LR      subgraph 1         Inici((Inici))--&gt;A[Caminar carrer major direcci\u00f3 sud];         style Inici fill:#0F0;         A--&gt;B{Hem arribat al Ram\u00f3n i Cajal?};         B--&gt;|NO|A;         B--&gt;|SI|C[Gira a la dreta];         C--&gt;D[Camina pel Ram\u00f3n i Cajal];      end          subgraph 2             D--&gt;E;         E{Hem arribat a la farmacia?}--&gt;|SI|F[Gira a l'esquerra];         E--&gt;|NO|C;         F--&gt;G[Camina pel Mestre Esteve];         G--&gt;H{Hem arribat alcarrer Moreral?}         H--&gt;|NO|G;         end          subgraph 3         H--&gt;|SI|I[Baixa pel carrer Moreral];         I--&gt;J{Has arribat al final del carrer?};         J--&gt;|SI|K[Gira a l'esquerra];         J--&gt;|NO|H;         K--&gt;L[Camina fins el Passeig];         L--&gt;Final((Fi));         style Final fill:#F00;     end  Exemple 4. Fer Zapping <ul> <li>Agafare el comandament</li> <li>Engegar la tele</li> <li>M'agrada el canal? </li> <li>Si no m'agrada canvie de canal</li> <li>Si s\u00ed que m'agrada, deixe el comandament i em pose comode.</li> </ul> graph LR     Ini((Inici))--&gt;A[Agafar Comandament TV];     style Ini fill:#0F0;     A--&gt;B[Engegar TV];     B--&gt;P1(fa:fa-spinner);     P1--&gt;C1{M'agrada el que fan?};     C1--&gt;|NO|C[Canvia de Canal];     C--&gt;P1;     C1--&gt;|SI|D[Posat Comode]     D--&gt;Fi((Fi));     style Fi fill:#F00;  Exemple 5. Adolesc\u00e8ncia (Spoiler: no t\u00e9 soluci\u00f3) <p>Durant l'adolesc\u00e8ncia cal marcar b\u00e9 les prioritats abans de les diversions. Tot adolescent abans de poder eixir amb els amics primer ha de fer els deures i despr\u00e9s tindre el quarto arreglat. Dissenya un algorisme que solucione aquest problema sense que l'adolescent haja de consultar a sa mare si pot eixir o no.</p> graph LR     Ini((Inici))--&gt;A{Has fet  els deures?};     style Ini fill:#0F0;     A--&gt;|NO|B[Fes els deures];     B--&gt;A;     A--&gt;|SI|C{Has ordenatl'habitaci\u00f3?};     C--&gt;|NO|D[Ordena l'habitaci\u00f3];     C--&gt;|SI|E[Pots eixir];     E--&gt;Fi((Fi));     style Fi fill:#F00;"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#activitats","title":"Activitats","text":"Activitat 108. Diagrama de flux. Gesti\u00f3 de llistes de la compra <p>Bastant-nos en l'activitat 104. Dissenya utilitzant la t\u00e8cnica de diagrames de flux un algorisme que mostre el funcionament b\u00e0sic de l'aplicaci\u00f3 de gesti\u00f3 de les llistes de la compra.</p> <p>Entregar: Document pdf amb el disseny en diagrama de flux que hages fet del funcionament de l'aplicaci\u00f3 de les llistes de la compra.</p> Activitat 109. \u00das del transport p\u00fablic. <p>Acabes d'arribar a l'estaci\u00f3 del Nord de Val\u00e8ncia i necessites anar al Campus de tarongers, concretament a l'UPV, utilitzant els transports p\u00fablics de la ciutat. </p> <p>Per tal d'arribar a l'UPV hi han dues opcions: en autobus o en metro.</p> <p>Si agafes l'autob\u00fas, primer t'has de despla\u00e7ar caminant fins a la parada d'autobus que es troba a la Gran Via Marqu\u00e9s del Turia, trobar la marquesina i esperar a que arribe l'autob\u00fas amb el n\u00famero 93. Despr\u00e9s d'un trajecte d'uns 30 minuts quan arribes a la parada d'autobus del Campus de Tarongers, et baixes i ja estaries. </p> <p>Si pel contrari uses el metro pots agafar-lo directament des de la mateixa eixida de l'estaci\u00f3 del Nord baixant al metro. Una vegada al metro, has d'agafar la l\u00ednia roja (3) fins la parada de \"Vicent Saragoss\u00e0\". Arribats a la parada has de pujar a superf\u00edcie fins la parada del tramvia. Quan arribe el tramvia, has d'agafar el que va en direcci\u00f3 \"Doctor Lluch\" fins arribar a la parada de \"La Carrasca\". Baixes del tramvia i ja estaries.</p> <p>Utilitzant la t\u00e8cnica dels diagrames de flux, dissenya un algorisme que solucione el problema anterior. Et recomane que primer escriguen una seq\u00fc\u00e8ncia d'instruccions i despr\u00e9s ho passes a diagrama de flux.</p> <p>Els exemples de dissenys d'algorismes que hem vist abans, s\u00f3n exemples gr\u00e0fics per a la soluci\u00f3 de problemes quotidians on, normalment, serien v\u00e0lides tot tipus d'instruccions com per exemple: \"Camina cap al sud\", \"espera fins que arribe l'autobus\", \"busca\", \"ix de casa\" etc ..</p> <p>Per\u00f2 quan estem parlant d'ordinadors el conjunt d'instruccions amb el que ens podem comunicar amb la m\u00e0quina no \u00e9s el mateix que el llenguatge natural amb una persona amb totes les ambiguitats.  \u00c9s molt important que un llenguatge de programaci\u00f3, que \u00e9s la llengua amb la que ens comuniquem amb les m\u00e0quines, siga clar, conc\u00eds, simple i sobre totes les coses lliure d'ambig\u00fcitats. </p> <p>Per exemple: la Thermomix \u00ae \u00e9s un dels robots de cuina m\u00e9s coneguts del mercat. Aquest robot t\u00e9 una interf\u00edcie molt senzilla formada per tres controls: Temps, Velocitat, Temperatura. Amb el temps podem establir el tems (segons) que estar\u00e0 la m\u00e0quina treballant, el control de velocitat determina la velocitat (0-10) a la que roden les aspes depenent si vols triturar molt els aliments o deixar-los sencers. Per \u00faltim la temperatura a la qual treballa el robot la podem regular des de 0 graus fins a 120.  Finalment ens quedaria nom\u00e9s el bot\u00f3 d'inici/parada que com b\u00e9 indica el que fa \u00e9s engegar quan est\u00e0 parada i parar quan est\u00e0 en marxa.  </p> <p>Com podeu observar les instruccions que se li poden donar a la Thermomix \u00ae a trav\u00e9s de la seua interf\u00edcie s\u00f3n molt reduides per\u00f2 si investigueu un poc per Internet trobareu que el total de receptes que es poden fer amb aquest set d'instruccions \u00e9s molt abundant.</p> Activitat 110. Recepta Thermomix\u00ae ProblemaInstruccions Thermomix <p>Busca per Internet una recepta que t'agrade i amb la t\u00e8cnica abans vista dels diagrames de flux, dissenya un algorisme per al robot de cuina Thermomix \u00ae, tenint el seu repertori d'instruccions que hem vist abans. Recorda que depenent de la recepta que tries, pot ser que estiga dividida en parts i hi haja una part de l'algorisme on s'indiquen instruccions per al/la cuiner/a.</p> <p>A la Thermomix se li poden donar tres tipus de ordres: a quina temperatura ha de cuinar des de 0 fins a 120 graus, la velocitat de les aspes de 0 fins a 7 i el temps de cocci\u00f3 en minuts i segons.</p> <ul> <li>Temperatura: des de 0 graus fins a 120 graus.</li> <li>Velocitats: enrere, 0, SL (Slow), o de 0 fins a 7</li> <li>Temps: minuts i segons</li> </ul> <p>Per exemple, si volgu\u00e9rem bullir aigua, donariem les seg\u00fcents instruccions:     - Temperatura: 100 graus.     - Temps: 5:00     - Velocitat: SL</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#estructures","title":"Estructures","text":"<p>Com ja hem anomenat als primers punts d'aquest tema, el teorema de la programaci\u00f3 estructurada preveu una s\u00e8rie d'estructures b\u00e0siques amb les quals es podrien codificar tots els algorismes sense necessitat d'usar cap sent\u00e8ncia GOTO o similar. Aquestes estructures s\u00f3n:</p> <ul> <li>Seq\u00fcencial: una sentencia s'executa despr\u00e8s d'acabar l'anterior.</li> <li>Condicional: s'avalua una condici\u00f3 i depenent del seu resultat s'executaran unes instruccions o altres.</li> <li>Repetitiva: repetici\u00f3 d'un grup d'instruccions que depenen d'una s\u00e8rie de condicions.</li> </ul> <p>Al final tot algorisme escrit en un llenguatge de programaci\u00f3 estructurada s'executa de forma seq\u00fcencial, \u00e9s a dir, es llig la primera sent\u00e8ncia s'executa i despr\u00e8s passem a la seg\u00fcent fins arribar al if niat. Les estructures condicional i repetitiva es poden interpretar com estructures seq\u00fcencials amb algunes particularitats. L'estructura condicional potser s'execute o no i l'estructura repetitiva s'executara un nombre de vegades.</p> graph TD     A(Estructures de Control)--&gt;B(Seq\u00fcencial)     A(Estructures de Control)--&gt;C(condicional)     A(Estructures de Control)--&gt;D(Repetitiva)     A(Estructures de Control)--&gt;E(Salt)     C--&gt;F(if)     C--&gt;G(if else)     C--&gt;H(if niat)     C--&gt;I(switch)     D--&gt;J(while)     D--&gt;K(do while)     D--&gt;L(for)     E--&gt;M(break)     E--&gt;N(continue)"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#estructura-sequencial","title":"Estructura Seq\u00fcencial","text":"<p>Les ordres d'un programa s'executen per defecte en ordre seq\u00fcencial. El que significa que les instruccions s'executen, com hem comentat abans, una darrere de l'altra en el mateix ordre que apareixen escrites al programa.</p>  graph LR     id1((Inici))--&gt;Instrucci\u00f31;     style id1 fill:#0F0     Instrucci\u00f31--&gt;Instrucci\u00f32;     Instrucci\u00f32--&gt;Instrucci\u00f33;     Instrucci\u00f33--&gt;Instrucci\u00f34;     Instrucci\u00f34--&gt;Instrucci\u00f35;     Instrucci\u00f35--&gt;Instrucci\u00f36;     Instrucci\u00f36--&gt;id2([Fi]);     style id2 fill:#F00   <p>L'estructura seq\u00fcencial \u00e9s l'ordre natura d'execuci\u00f3. Les instruccions que formen part d'aquesta estructura s'executen en ordre una a continuaci\u00f3 de l'altra. Al final de cada instrucci\u00f3 hi ha un punt i coma per indicar-li al compilador el final de la sent\u00e8ncia individual. Les instruccions dintre d'una estructura seq\u00fcencial es solen agrupar en blocs ( {...} )</p> <pre><code>// Exemple de bloc - estructura seq\u00fcencial\n{\n    Instrucci\u00f31;\n    Instrucci\u00f32;\n    ...\n    Instrucci\u00f3N;\n}\n</code></pre>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#exemple-destructura-sequencial","title":"Exemple d'estructura seq\u00fcencial","text":"<p>Un exemple d'estructura seq\u00fcencial al m\u00f3n real seria com li podem donar ordres a alg\u00fa per tal que puga veure la tele. Seguint el nostre exemple, s'haurien de seguir els seg\u00fcents passos: agafar el comandament a dist\u00e0ncia, despr\u00e9s premer el bot\u00f3 ON/OFF per tal que s'engegue i finalment hauriem de escollir el canal que m\u00e9s ens agrade amb els controls pertinents del comandament a dist\u00e0ncia.</p> <pre><code>// Exemple d'estructura seq\u00fcencial.\n// Com engegar la TV\n{\n    AgafarComandament();\n    PremerBotoOn();\n    TriarCanal();\n}\n</code></pre> <p>En resum podr\u00edem dir que l'estructura seq\u00fcencial no \u00e9s m\u00e9s que un conjunt de sent\u00e8ncies o instruccions individuals agrupades.</p> Activitat 111: Millora el codi anterior. Estructura seq\u00fcencial. <p>La seq\u00fcencia d'instruccions anterior, \u00e9s molt simple i segurament no cobriria una soluci\u00f3 factible per els diversos escenaris en els que ens podriem trobar.</p> <p>Com milloraries el codi anterior per tal de fer-lo m\u00e9s eficient?  Escriu el codi utilitzant nom\u00e9s l'estructura seq\u00fcencial.</p> <p>Entrega: Document en pdf amb la seq\u00fc\u00e8ncia d'instruccions ampliada juntament amb una motivaci\u00f3 del que has fet.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#estructures-de-seleccio","title":"Estructures de selecci\u00f3","text":"<p>\u00c9s una de les estructures que permeten modificar l'ordre d'execuci\u00f3 de les instruccions del programa. Una estructura condicional determina si s'executen unes accions o altres segons es compleixi o no una determinada condici\u00f3. La condici\u00f3 que es comprova per decidir si unes instruccions s'executen o no deu ser una expressi\u00f3 booleana, \u00e9s a dir, ha de donar com a resultat un valor boole\u00e0 true o false. </p> <p>En programaci\u00f3 estructurada ens podem trobar les seg\u00fcents:</p> <ul> <li>Selecci\u00f3 simple: si la condici\u00f3 s'acompleix, executa l'acci\u00f3, sino no fa res.</li> <li>Selecci\u00f3 doble: si la condici\u00f3 s'acompleix, executa una acci\u00f3 sino executa una altra acci\u00f3.</li> <li>Selecci\u00f3 multiple: davant una opci\u00f3 existeixen m\u00faltiples accions a realitzar.</li> <li>Operador condicional ?: expressi\u00f3 matem\u00e0tica que simula l'estructura condicional o de selecci\u00f3.</li> </ul>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#seleccio-simple","title":"Selecci\u00f3 Simple","text":"<p>\u00c9s l'estructura condicional m\u00e9s simple en programaci\u00f3 estructurada. S'utilitza per determinar si una instrucci\u00f3 o bloc d'instruccions s'executa basat en una condici\u00f3. S'avalua la condici\u00f3 i si es true, s'executa la instrucci\u00f3 o bloc d'instruccions associat a la condici\u00f3.</p>     graph LR     id1((Inici))--&gt;Instrucci\u00f31;     style id1 fill:#0F0;     Instrucci\u00f31--&gt;Instrucci\u00f32;     Instrucci\u00f32--&gt;Cond1{Condici\u00f3};     Cond1--&gt;|SI|Instrucci\u00f33;     Instrucci\u00f33--&gt;Instrucci\u00f34;     Instrucci\u00f34--&gt;con1;     style con1 fill:#000;     Cond1--&gt;|NO|con1(fa:fa-spinner);     con1--&gt;Instrucci\u00f35;     Instrucci\u00f35--&gt;id2([Fi]);     style id2 fill:#F00;  <p>Si mirem b\u00e9 la imatge anterior, el codi que s'executaria seria:</p> <ol> <li>S'executa la instrucci\u00f3 1</li> <li>S'executa la instrucci\u00f3 2</li> <li>S'avalua a condici\u00f3</li> <li>Si s'acompleix: <ol> <li>S'executa la instrucci\u00f3 3</li> <li>S'executa la instruccio 4</li> </ol> </li> <li>S'executa la instrucci\u00f3 5</li> <li>S'acaba l'execuci\u00f3 de l'algorisme.</li> </ol> <p>En definitiva, al codi anterior podrien passar dues coses: que s'acompleixi la condici\u00f3 (true) o que no s'acompleixi (false). Si s'avalua true la condici\u00f3 el codi seria: Instrucci\u00f31, Instrucci\u00f32, Instrucci\u00f33, Instrucci\u00f34, Instrucci\u00f35 i Instrucci\u00f36. Pel contrari si s'avalua la condici\u00f3 a false, les instruccions a executar serien: Instrucci\u00f31, Instrucci\u00f32, Instrucci\u00f35 i Instrucci\u00f36. \u00c9s a dir, no s'executarien la 3 i la 4.</p> <p>El seu codi en pseudocodi seria:</p> <pre><code>    si (condicio) aleshores\n        instruccio\n    fsi\n\n    // O tamb\u00e9\n    si (condicio) aleshores\n        instruccio1\n        instruccio2\n        ...\n        instruccioN\n    fsi\n</code></pre> <p>En el primer cas si quan s'avalua la condici\u00f3 aquesta \u00e9s veritat, s'executaria la instrucci\u00f3 si pel contrari la condici\u00f3 \u00e9s falsa, no es fa res.</p> <p>Al segon cas \u00e9s igual que el primer per\u00f2 en cas d'avaluar-se positivament la condici\u00f3 no s'executaria una sola instrucci\u00f3 si no que s'executaria (de forma seq\u00fcencial) el bloc d'instruccions seg\u00fcent: instrucci\u00f31, instrucci\u00f32 fins instrucci\u00f3N.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#exemple-de-seleccio-simple","title":"Exemple de selecci\u00f3 simple","text":"<p>A continuaci\u00f3 expliquem un algorisme en el qual expliquem a alg\u00fa que ha de fer si plou a l'eixir de casa. B\u00e0sicament el que estem dient \u00e9s si est\u00e0 plovent que agafe el paraig\u00fces abans d'eixir de casa.</p> <pre><code>    // Exemple de selecci\u00f3 simple\n    si (plou) aleshores\n        AgafaParaig\u00fces();\n    fsi\n    ObrelaPorta();\n    IxDeCasa();\n</code></pre> Activitat 112. Selecci\u00f3 Simple <p>Escriu un algorisme que simule una situaci\u00f3 al m\u00f3n real, diferent a l'exemple anterior, en el que utilitzes una estructura de selecci\u00f3 simple. Has de dissenyar el codi primer en diagrames de flux i despr\u00e9s en pseudocodi.</p> <p>Entrega: Document en pdf amb les instruccions de la selecci\u00f3 simple juntament amb una motivaci\u00f3 del que has fet. I recorda que l'algorisme ha d'estar tant en diagrama de flux com en pseudocodi.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#seleccio-doble","title":"Selecci\u00f3 doble","text":"<p>Amb aquesta estructura condicional de la programaci\u00f3 estructurada es poden seguir camins distints depenent de si l'avaluaci\u00f3 de la condici\u00f3 \u00e9s true o false. En altres paraules, si la condici\u00f3 \u00e9s true, executaria una instrucci\u00f3 o bloc d'instruccions mentre que si s'avalua a false executaria una altra instrucci\u00f3 o bloc d'instruccions.</p> graph LR     id1((Inici))--&gt;Instrucci\u00f31;     style id1 fill:#0F0;     Instrucci\u00f31--&gt;Instrucci\u00f32     Instrucci\u00f32--&gt;C1{Condici\u00f3}     C1--&gt;|SI|Instrucci\u00f33;     Instrucci\u00f33--&gt;Instrucci\u00f34;     C1--&gt;|NO|Instrucci\u00f35;     Instrucci\u00f35--&gt;Instrucci\u00f36;     style con1 fill:#000;     Instrucci\u00f34--&gt;con1(fa:fa-spinner);     Instrucci\u00f36--&gt;con1;     con1--&gt;Instrucci\u00f37;     Instrucci\u00f37--&gt;Instrucci\u00f38;     Instrucci\u00f38--&gt;id2((FI));     style id2 fill:#F00  <p>El codi en pseudocodi del diagrama de flux anterior seria el seg\u00fcent:</p> <pre><code>instruccio1;\ninstruccio2;\nsi (condicio) aleshores\n    instruccio3;\n    instruccio4;\nsino\n    instruccio5;\n    instruccio6;\nfsi\ninstruccio7;\ninstruccio8;\n</code></pre> <p>Si ens fixem en el codi anterior, podem trobar dues seq\u00fc\u00e8ncies d'execucio d'instruccions depenent si la condici\u00f3 del 'si' s'avalua 'veritable' o 'fals'. </p> <ul> <li>En el primer cas, amb la condici\u00f3 a 'true', s'executarien: instrucci\u00f31, instrucci\u00f32, instrucci\u00f33, instrucci\u00f34, instrucci\u00f37 i instrucci\u00f38.</li> <li>Mentre que si la condici\u00f3 del 'si' s'avaluara a 'false', les instruccions a executar serien: instrucci\u00f31, instrucci\u00f32, instrucci\u00f35, instrucci\u00f36, instrucci\u00f37 i instrucci\u00f38.</li> </ul>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#exemple-de-seleccio-doble","title":"Exemple de selecci\u00f3 doble","text":"<p>Al seg\u00fcent exemple, utilitzarem l'estructura de selecci\u00f3 doble per tal de millorar l'exemple anterior de com entrar a casa amb les claus. Qu\u00e8 passaria si no tenim les claus de casa a la butxaca quan intentem entrar a casa? Que podriem fer? Fixa't en el seg\u00fcent codi.</p> <pre><code>// Exemple de selecci\u00f3 doble\nsi (plou) aleshores\n    AgafaParaig\u00fces();\nsino\n    PosatXancles();\nfsi\nObreLaPorta();\nIxDeCasa();\n</code></pre> Activitat 113. Selecci\u00f3 Doble <p>Seguint amb l'exemple de l'activitat 204, converteix el teu exemple, si es pot, en un algorisme que utilitze l'estructura de selecci\u00f3 doble. Igualment que a l'activitat anterior has de dissenyar el teu codi en diagrama de flux primer i despr\u00e9s en pseudocodi. En altres paraules, millora o amplia l'exemple de la vida real afegint-li les estructures noves.</p> <p>Entrega: Document en pdf amb les instruccions de la selecci\u00f3 doble juntament amb una motivaci\u00f3 del que has fet. I recorda que l'algorisme ha d'estar tant en diagrama de flux com en pseudocodi.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#condicionals-niats","title":"Condicionals niats","text":"<p>Si volem avaluar m\u00e9s d'una condici\u00f3 al nostre codi, estariem parlant d'una estructura condicional m\u00faltiple que b\u00e0sicament consisteix en encadenar diversos if..else. A continuaci\u00f3 es pot veure com seria un exemple de condicional m\u00faltiple en diagrama de flux.</p> graph LR     id1((Inici))--&gt;Instrucci\u00f31;     style id1 fill:#0F0;     Instrucci\u00f31--&gt;|NO|C1{Condici\u00f3 1};     C1--&gt;|NO|C2{Condici\u00f3 2};     C2--&gt;|NO|C3{Condici\u00f3 3};     C1--&gt;|SI|Instrucci\u00f32;     Instrucci\u00f32--&gt;Instrucci\u00f33;     C2--&gt;|SI|Instrucci\u00f34;     C3--&gt;|SI|Instrucci\u00f35;     Instrucci\u00f35--&gt;Instrucci\u00f36;     Instrucci\u00f36--&gt;Instrucci\u00f37;     style con1 fill:#000;     Instrucci\u00f33--&gt;con1(fa:fa-spinner);     Instrucci\u00f34--&gt;con1;     Instrucci\u00f37--&gt;con1;     con1--&gt;Instrucci\u00f310;     Instrucci\u00f310--&gt;Id2((FI));     style Id2 fill:#F00;  <p>El mateix exemple en pseudocodi que teniu a la imatge anterior seria:</p> <pre><code>instruccio1\n\nsi (condicio1) aleshores\n    instruccio2\n    instruccio3\n\nsino si (condicio2) aleshores\n    instruccio4\n\nsino si (condicio3) aleshores\n    instruccio5\n    instruccio6\n    instruccio7\nsino \n    instruccio8\n    instruccio9\nfsi\ninstruccio10\n</code></pre> <p>Al codi anterior l'\u00fanic que s\u00ed sabem cert \u00e9s que s'executaran les instruccions 1, 2 i 10 i depenent de quina condici\u00f3 s'avalua a true s'executar\u00e0 algun bloc d'instruccions que estan dins de l'estructura condicional.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#exemple-destructura-condicional-niada","title":"Exemple d'estructura condicional niada","text":"<p>Un repartidor de Mirinda segueix el seg\u00fcent horari de feina: el dilluns reparteix a Pego, el dimarts a Oliva, el dimecres a Ondara, el dijous a El Verger i el divendres a Els poblets. Al seg\u00fcent algorisme utilitzarem els condicionals niats per dissenyar un algorisme que solucione el problema del repartidor de Mirinda.</p> <pre><code>// Exemple: El repartidor de Mirinda\nsi  huiEsDilluns  aleshores\n    repartirPego();\n\nsino si huiEsDimarts aleshores\n    repartirOliva();\n\nsino si huiEsDimecres aleshores\n    repartirOndara();fa:fa-spinner\n\nsino si huiEsDijous aleshores\n    repartirElVerger();\n\nsino si huiEsDivendres aleshores\n    repartirElsPoblets();\n\nsino\n    NoEsTreballaHui();\n\nfsi\n</code></pre> Activitat 114. Condicional niada <p>M\u00e9s dif\u00edcil encara, modifica els exemples anteriors i per tal d'acoblar-hi al teu algorisme una estructura condicional niada.</p> <p>Entrega: Document en pdf amb les instruccions de la condicional niada juntament amb una motivaci\u00f3 del que has fet. I recorda que l'algorisme ha d'estar tant en diagrama de flux com en pseudocodi.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#condicional-multiple","title":"Condicional m\u00faltiple","text":"<p>La sent\u00e8ncia de control 'switch' \u00e9s una altra forma de codificar la condici\u00f3 m\u00faltiple que hem vist a l'apartat anterior per\u00f2 m\u00e9s senzilla de visualitzar a primer cop d'ull. Fixa't en la imatge seg\u00fcent:</p> graph LR     id1((Inici))--&gt;Instrucci\u00f31;     style id1 fill:#F00;     Instrucci\u00f31--&gt;C1{Condici\u00f3 1};     C1--&gt;|A|Instrucci\u00f32;     C1--&gt;|B|Instrucci\u00f33;     C1--&gt;|C|Instrucci\u00f34;     style D fill:#000;     Instrucci\u00f32--&gt;D(fa:fa-spinner);     Instrucci\u00f33--&gt;D;     Instrucci\u00f34--&gt;D;     D--&gt;Instrucci\u00f35;     Instrucci\u00f35--&gt;id3((FI));      style id3 fill:#0F0;       <p>Al diagrama de flux anterior, s'avalua una condici\u00f3 (que pot resultar en m\u00e8s d'un cas diferent) i segons el resultat d'aquesta avaluaci\u00f3 de la condici\u00f3, realitzar\u00e0 una acci\u00f3 o una altra. Mira com s'escriuria el codi de la condicional m\u00faltiple.</p> <pre><code>enCasDe (expressi\u00f3) fer\n    cas &lt;opcio1&gt;\n    Instruccio1\n    Instruccio2\n    \n    cas &lt;opcio2&gt; \n        Instruccio3\n        Instruccio4\n    \n    sino\n        Instruccio5\n        Instruccio6\nfiCas\n</code></pre> <p>L'exemple del repartidor ens serviria per veure aquesta estructura. La condici\u00f3 a avaluar seria: **Quin dia es hu\u00ed?\". La resposta a aquesta pregunta, com tots podem intuir, pot donar diversos resultats, concretament 7: dilluns, dimarts, dimecres, dijous, divendres, dissabte o diumenge.  </p> <p>Ara es tractaria d'establir les accions a realitzar segons el resultat de l'avaluaci\u00f3 anterior com mostra el seg\u00fcent codi.</p> <pre><code>enCasDe (huiQuinDiaEs) fer\n    cas &lt;Dilluns&gt;\n        RepartirPego();\n    \n    cas &lt;Dimarts&gt; \n        RepartirOliva();\n\n    cas &lt;Dimecres&gt; \n        RepartirOndara();\n\n    cas &lt;Dijous&gt; \n        RepartirElVerger();\n\n    cas &lt;Divendres&gt; \n        RepartirElsPoblets();\n\n    sino\n        HuiNoEsTreballa();\nfiCas\n</code></pre> Activitat 115. Estructura condicional m\u00faltiple. <p>Dissenya un algorisme que t'ajude a decidir quina roba posar-te abans d'eixir de casa en funci\u00f3 del temps que faja. Cal tenir en compte les seg\u00fcents consideracions geogr\u00e0fiques: estem a Pego i l'oratge pot ser molt variable. Es poden donar les seg\u00fcents condicions meteorol\u00f2giques: ploure a c\u00e0nters, fer un sol que bada penyes, fa frescoreta i tamb\u00e9 pot fer un fred que pela. El mateix programa l'has d'escriure utilitzant l'estructura encasde i la de selecci\u00f3 m\u00faltiple niada.</p> <p>Entrega: Document en pdf amb les instruccions de la condicional niada juntament amb una motivaci\u00f3 del que has fet. I recorda que l'algorisme ha d'estar tant en diagrama de flux com en pseudocodi.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#estructures-de-repeticio","title":"Estructures de repetici\u00f3","text":"<p>Si les estructures condicionals serveixen per determinar quines instruccions o bloc d'instruccions s'executen, la programaci\u00f3 estructurada tamb\u00e9 disposa d'estructures repetitives o tamb\u00e9 anomenades bucles, que ens permeten executar una instrucci\u00f3 o bloc d'instruccions v\u00e0ries vegades.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#mentre","title":"mentre","text":"<p>Mentre la condici\u00f3 (tamb\u00e9 anomenada condici\u00f3 d'eixida) siga avaluada com a true, s'executarien les instruccions que hi ha dins del bucle while. </p> graph LR     Id1((Inici))--&gt;Instrucci\u00f31;     style Id1 fill:#0F0;     style D fill:#000;     Instrucci\u00f31--&gt;D(fa:fa-spinner);      D--&gt;C1{Condici\u00f3};     C1--&gt;|V|Instrucci\u00f32;     Instrucci\u00f32--&gt;D;     style P2 fill:#F00;     C1--&gt;|F|P2((Fi));  <p>En aquest tipus de bucle, el bloc d'instruccions del bucle while, es poden executar zero o m\u00e9s vegades.</p> <p>Els passos que representen el diagrama anterior s\u00f3n:</p> <ol> <li>S'executa la instrucci\u00f3 </li> <li>S'avalua la condici\u00f3 </li> <li>Si la condici\u00f3 \u00e9s true, s'executa el bloc d'instruccions del bucle i es torna a avaluar la condici\u00f3.</li> <li>En cas que la condici\u00f3 s'avalue com a false, passar\u00edem a executar la instrucci\u00f3 2.</li> </ol> <p>El codi escrit de l'estructura mentre explicada anteriorment seria:</p> <pre><code>Instrucci\u00f31\nmentre (condicio) fer\n    Instruccio2\nfmentre\n</code></pre> Activitat 116. Obrir tots els calaixos. Mentre fer <p>Imagina que estas buscant el m\u00f2bil. Recordes que l'has guardat a un calaix de la teua habitaci\u00f3. El problema \u00e9s que a la teua habitaci\u00f3 entre armaris, escriptoris, tauletes de nit i altres mobles, hi ham m\u00e9s de 30 calaixos. Dissenya un codi en el que busques el m\u00f2bil obrint tots els calaixos fins que el trobes.</p> <p>Entrega: Document en pdf amb les instruccions mentre fer juntament amb una motivaci\u00f3 del que has fet. I recorda que l'algorisme ha d'estar tant en diagrama de flux com en pseudocodi.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#repetir-mentre","title":"repetir .. mentre","text":"<p>Molt semblant al bucle while per\u00f2 amb la difer\u00e8ncia que el bloc s'instruccions que cont\u00e9 l'estructura s'executaria almenys una vegada ja que la condici\u00f3 d'eixida s'avalua despr\u00e9s d'executar les instruccions.</p> graph LR     Id1((Inici))--&gt;Instrucci\u00f31;     style Id1 fill:#F00;     style P1 fill:#000;     Instrucci\u00f31--&gt;P1(fa:fa-spinner);     P1--&gt;Instrucci\u00f32;     Instrucci\u00f32--&gt;C1{Condici\u00f3};     C1--&gt;|V|Instrucci\u00f33;     C1--&gt;|F|P1;     Instrucci\u00f33--&gt;Id2((Fi));     style Id2 fill:#0F0;       <p>Els passos que representen el diagrama anterior s\u00f3n:</p> <ol> <li>S'executa la instrucci\u00f3 1</li> <li>S'executen les instruccions que cont\u00e9 el bloc </li> <li>S'avalua la condici\u00f3 </li> <li>Si la condici\u00f3 \u00e9s true, s'executa el bloc d'instruccions del bucle i es torna a avaluar la condici\u00f3.</li> <li>En cas que la condici\u00f3 s'avalue com a false, passar\u00edem a executar la instrucci\u00f3 2.</li> </ol> <p>Exemple: Com far\u00edem el codi necessari per rec\u00f3rrer el nostre array de 100 elements fins trobar el n\u00famero que busquem?</p> <pre><code>Instrucci\u00f31\nfer\n    Instruccio2\nmentre (condicio)\nInstruccio3\n</code></pre> Activitat 117. La formigonera. Fer mentre <p>Algorisme de la formigonera. Tenim una formigonera preparada amb l'aigua i el cement necessaris i nom\u00e9s ens faltaria posar-li l'arena necess\u00e0ria que est\u00e0 en un munt\u00f3 a prop de la formigonera. Disposem d'una pala per passar l'arena del munt\u00f3 a dins de la formigonera. Dissenya un algorisme que tire arena, pala a pala, dins de la formigonera fins que aquesta estiga plena.</p> <p>Entrega: Document en pdf amb les instruccions repetir .. mentre fer juntament amb una motivaci\u00f3 del que has fet. I recorda que l'algorisme ha d'estar tant en diagrama de flux com en pseudocodi.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#bucle-per","title":"bucle per","text":"<p>Aquesta estructura de repetici\u00f3 \u00e9s possiblement la m\u00e9s complicada de comprendre per\u00f2 tamb\u00e9 possiblement la m\u00e9s utilitzada. Aquesta estructura de control sol utilitzar-se la majoria de les vegades quan sabem la quantitat de vegades que es repetir\u00e0 la instrucci\u00f3 o conjunt d'instruccions que t\u00e9 dintre d'ella. Per\u00f2 mirem un exemple:</p> graph LR     Id1((Inici))--&gt;Instrucci\u00f31;     style Id1 fill:#0F0;     Instrucci\u00f31--&gt;Inicialitzaci\u00f3;     style D fill:#000;     Inicialitzaci\u00f3--&gt;D(fa:fa-spinner);      D--&gt;C1{Condici\u00f3}     C1--&gt;|NO|Instrucci\u00f32;     C1--&gt;|SI|Instruccions;     Instruccions--&gt;Actualitzaci\u00f3;     Actualitzaci\u00f3--&gt;D;     Instrucci\u00f32--&gt;Id3([Fi])     style Id3 fill:#F00;  <p>El diagrama anterior est\u00e0 executant les seg\u00fcents accions: </p> <ol> <li>Executem instrucci\u00f3 1 (aliena al bucle for)</li> <li>Inicialitzaci\u00f3</li> <li>Avaluaci\u00f3 de la condici\u00f3</li> <li>Si la condici\u00f3 \u00e9s true<ol> <li>Executem les instruccions del bucle for</li> <li>Actualitzem \u00edndex</li> </ol> </li> <li>Si la condici\u00f3 es false eixim del bucle i executem instrucci\u00f3 2</li> </ol> <p>Aquest mateix diagrama de flux es pot escriure en pseudocodi de la seg\u00fcent forma:</p> <pre><code>per i=0 mentre i &lt; 100 incrementa i en 1 fer\n    Instruccio1\n    Instruccio2\nfiper\n</code></pre> <p>Al codi anterior:</p> <ol> <li>Inicialitzaci\u00f3: int i = 0;</li> <li>Avaluaci\u00f3 de la condici\u00f3: \u00e9s mentre i &lt; 100 </li> <li>Instruccio1 i Instruccio2</li> <li>Actualitzaci\u00f3: incrementa i en 1</li> </ol> Activitat 118. Busca aigua. Bucle per <p>Imagina que hi ha un text que t\u00e9 un total de 200 paraules i vols saber quantes vegades es repeteix la paraula aigua. Dissenya un algorisme en diagrames de flux que busque la paraula \"aigua\" en eixe text. \u00c9s a dir, el nostre algorisme el que far\u00e0 ser\u00e0 llegir el text i comptar\u00e0 quantes vegades ha trobat la paraula aigua en total.</p> <p>Entrega: Document en pdf amb les instruccions del bucle per juntament amb una motivaci\u00f3 del que has fet. I recorda que l'algorisme ha d'estar tant en diagrama de flux com en pseudocodi.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#activitats_1","title":"Activitats","text":"<p>Una vegada hem vist les estructures que es desenvolupen al teorema d'estructura, les combinarem entre elles per tal de donar soluci\u00f3 a problemes un poc m\u00e9s complexos que els vistos fins ara.</p> <p>Llig i fes les activitats que es mostren a continuaci\u00f3 per tal d'assolir els coneixements exposats als punts anteriors.</p> Activitat 119. Iniciar sessi\u00f3 a una xarxa social <p>Dibuixa un diagrama de flux per iniciar sessi\u00f3 en un compte de qualsevol xarxa social.</p> <ol> <li>Obrim el navegador web.</li> <li>Escrivim facebook.com</li> <li>Aquesta sol\u00b7licitud s'envia a Facebook i respon enviant-nos a la p\u00e0gina d'inici o login.</li> <li>Escrivim les nostres credencials, email i contrasenya i fem clic a iniciar.</li> <li>Si es correcte es mostrar\u00e0 la p\u00e0gina del nostre perfil. En cas contrari, es produir\u00e0 un error i ens demanar\u00e0 una altra vegada usuari i contrasenya.</li> </ol> <p>Entrega: Document en pdf que continga el diagrama de flux que hages extret de l'algorisme anterior.</p> Activitat 120. Calculem l'\u00e0rea d'un rectangle <p>Calcula l'\u00e0rea d'un rectangle donades les seues dimensions</p> <ol> <li>Inserim la base.</li> <li>Especifiquem l'al\u00e7ada.</li> <li>Calculem l'\u00e0rea: base per al\u00e7ada</li> <li>Mostrem el resultat per pantalla</li> </ol> <p>Entrega: Document en pdf que continga el diagrama de flux que hages extret de l'algorisme anterior.</p> Activitat 121. Hola m\u00f3n 10 vegades <p>Escriu el diagrama de flux necessari per imprimir per pantalla 10 vegades \"hola m\u00f3n\"</p> <p>Resolem aquesta activitat utilitzant el concepte bucle. Creem la variable \"compte\" i l'inicialitzem a 0. Despr\u00e9s imprimim \"Hola m\u00f3n\" i incrementem la variable \"compte\" en uno.</p> <p>Verifiquem si \"compte\" encara \u00e9s menor que 10. En cas veritable, imprimim \"Hola m\u00f3n\" i tornem a incrementar. Quan la \"compte\" valga 10 eixim del programa.</p> <ol> <li>comptador = 0;</li> <li>Imprimir \"Hola m\u00f3n\"</li> <li>Incrementem compte</li> <li>Si comptador &lt; 10  tornem al pas 2 en cas contrari s'acaba l'execuci\u00f3</li> </ol> <p>Entrega: Document en pdf que continga el diagrama de flux que hages extret de l'algorisme anterior.</p> Activitat 122. Preparar el t\u00e9 <p>Dibuixa el diagrama de flux amb els passos necessaris per preparar el t\u00e9.</p> <ol> <li>Comprar t\u00e9 i/o sucre. </li> <li>Tindre tassa i cullera.</li> <li>Posar a bullir aigua.</li> <li>Posar la bossa de t\u00e9 a la tassa.</li> <li>Posar aigua a la tassa amb la bossa (de t\u00e9).</li> <li>Esperar uns minuts a que es dissolga el t\u00e9.</li> <li>Retirar la bossa (de t\u00e9)</li> <li>Vols sucre? Si la resposta \u00e9s s\u00ed, posar sucre i mesclar. Si la resposta \u00e9s no s'acabat el proc\u00e9s.</li> </ol> <p>Entrega: Document en pdf que continga el diagrama de flux que hages extret de l'algorisme anterior.</p> Activitat 123. N\u00famero major <p>Escriu el diagrama de flux de tal forma que donats dos n\u00fameros ens indique quin \u00e9s m\u00e9s gran.</p> <ol> <li>Introduir els valors A i B</li> <li>Llegir els seus valors</li> <li>Si A == B tornar al pas 1</li> <li>Si A &gt; B escriure per pantalla: \"A \u00e9s major que B\"</li> <li>En cas contrari escriure: \"B \u00e9s major que A\".</li> <li>Acabar el proc\u00e9s.</li> </ol> <p>Entrega: Document en pdf que continga el diagrama de flux que hages extret de l'algorisme anterior.</p> Activitat 124. Suma dos n\u00fameros <p>Algorisme que demana dos n\u00fameros i els suma mostrant el resultat per pantalla.</p> <ol> <li>Declarem la variable suma i la inicialitzem a 0.</li> <li>Inserim dos n\u00fameros.</li> <li>Sumem els dos n\u00fameros i els afegim a suma.</li> <li>Mostrem suma per pantalla.</li> </ol> <p>Entrega: Document en pdf que continga el diagrama de flux que hages extret de l'algorisme anterior.</p> Activitat 125. Llevar la fam <p>Ens trobem a casa i tenim fam. Qu\u00e8 fem?</p> <ol> <li>Preguntem si tenim fam.</li> <li>Si la resposta \u00e9s no s'acaba el procediment, ja estem satisfets.</li> <li>Si la resposta \u00e9s si busquem el menjar a la nevera.</li> <li>Si hi ha menjar a la nevera la calfem i mengem</li> <li>Si no hi ha res a la nevera, anem a comprar algo al super.</li> <li>Calfem el menjar comprat i mengem.</li> </ol> <p>Entrega: Document en pdf que continga el diagrama de flux que hages extret de l'algorisme anterior.</p> Activitat 126. Parell o senar <p>Algorisme que determina si el n\u00fameroJ que inserim \u00e9s parell o senar.</p> <ol> <li>Introduim un n\u00famero 'N'</li> <li>Si 'N' es divideix entre 2 i el residu \u00e9s 0 (N mod 2 = 0), aleshores 'N' \u00e9s parell.</li> <li>En cas contrari \u00e9s senar.</li> </ol> <p>Entrega: Document en pdf que continga el diagrama de flux que hages extret de l'algorisme anterior.</p> Activitat 127. Agafar el paraig\u00fces <p>Algorisme per determinar quan ixc de casa si necessite o no agafar un paraig\u00fces.</p> <ol> <li>Comprovem si est\u00e0 plovent.</li> <li>Si la resposta \u00e9s No, eixim al carrer sense paraig\u00fces.</li> <li>Si la resposta \u00e9s S\u00ed, busquem el paraig\u00fces</li> <li>Si el trobem eixim al carrer</li> <li>En cas contrari tornem al pas 1.</li> </ol> <p>Entrega: Document en pdf que continga el diagrama de flux que hages extret de l'algorisme anterior.</p> Activitat 128. Mitjana <p>Algorisme que calcula la mitjana d'un alumne amb tres notes i mostra per pantalla si est\u00e0 \"Aprovat\" o \"Susp\u00e8s\". La nota m\u00ednima per aprovar \u00e9s 11.</p> <ol> <li>Declarem les variables a utilitzar: Nota1, Nota2, Nota3, Mitjana.</li> <li>Inserim les notes per teclat.</li> <li>Calculem la mitjana</li> <li>Verifiquem si la mitjana \u00e9s major o igual a 5.</li> <li>Si \u00e9s major que 5, escrivim per pantalla \"Aprovat\"</li> <li>En cas contrari escrivim \"Susp\u00e8s\" </li> </ol> <p>Entrega: Document en pdf que continga el diagrama de flux que hages extret de l'algorisme anterior.</p> Activitat 129. Localitza les estructures <p>Si has ent\u00e8s b\u00e9 quines s\u00f3n les estructures del diagrama d'estructura que hem vist i les seues variants, aix\u00ed com tamb\u00e9 saps com es representen en diagrama de flux, revisa els exemples que hem mostrat al principi del tema i localitza les estructures amb les que s'han dissenyat els algorismes dels exemples.</p> <p>Entrega: Document en pdf que continga el diagrama de flux i les seues estructures ben assenyalades.</p>"},{"location":"Tema%2001.%20Introducci%C3%B3%20a%20la%20programaci%C3%B3/#projecte-final","title":"Projecte Final","text":"<p>Veiem que has apr\u00e9s en aquest tema. Al seg\u00fcent enlla\u00e7 podr\u00e0s veure com est\u00e0 dissenyat l'algorisme per solucionar el cub de R\u00fabik</p> <p>Punxa ac\u00ed per veure l'algorisme R\u00fabik</p> Activitat 130. Localitza les estructures a l'algorisme del cub de Rubik <p>A l'enlla\u00e7 anterior pots veure com es pot solucionar el cub de Rubik seguint uns senzills passos. Llig b\u00e9 l'article i dissenya un algorisme, utilitzant la t\u00e8cnica dels diagrames de flux, que seguisca els mateixos passos que explica l'article. </p> <p>Fixa't b\u00e9 perqu\u00e8 del text has de poder extreure les estructures iteratives i de selecci\u00f3 de l'algorisme. Pista: all\u00e0 on posa: caso1, caso2... segurament es tractar\u00e0 d'una condicional m\u00faltiple i a m\u00e9s a m\u00e9s cadascun dels passos (hi han 7 en total) s'haur\u00e0 de repetir fins que es solucione.</p> <p>Entrega: Document en pdf amb el disseny en diagrames de flux de l'algorisme del cub de Rubik i a m\u00e9s a m\u00e9s totes les estructures del teu disseny identificades (amb un cercle roig per exemple) i el tipus d'estructura del que es tracta.</p>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/","title":"Tema 2. El llenguatge Java","text":""},{"location":"Tema%2002.%20El%20llenguatge%20Java/#introduccio","title":"Introducci\u00f3","text":"<p>Una vegada estudiat el teorema del programa estructurat juntament amb els diagrames de flux i pseudocodi, passem a veure aquests conceptes te\u00f2rics en un llenguatge de programaci\u00f3 d'alt nivell concret com \u00e9s el llenguatge de programaci\u00f3 Java.</p> <p>El Java \u00e9s un llenguatge de programaci\u00f3 dissenyat el 1990 per James Gosling amb altres companys de Sun Microsystems a partir del llenguatge C. Des del seu naixement fou pensat com un llenguatge orientat a objectes. Entre el 13 de novembre de 2006 i el maig del 2007 Sun va alliberar parts de Java com a programari lliure de codi obert amb llic\u00e8ncia GPL. \u00c9s un dels llenguatges de programaci\u00f3 m\u00e9s utilitzats, i s'utilitza tant per aplicacions web com per aplicacions d'escriptori.</p> <p>El Java \u00e9s un llenguatge compilat amb una m\u00e0quina virtual d'intermediari i, per tant, pot semblar lent en comparaci\u00f3 amb altres llenguatges, per\u00f2 ofereix un \u00edndex de re-utilitzaci\u00f3 de codi molt elevat, sent possible trobar moltes llibreries lliures de Java. \u00c9s un llenguatge flexible i potent tot i la facilitat amb la qual es programa i dels resultats que ofereix. Un dels trets que el caracteritza i que el fa una eina molt valorada a l'hora de desenvolupar aplicacions distribu\u00efdes, \u00e9s el fet que \u00e9s un llenguatge multi-plataforma.</p> <p>Generalment els programes de Java es compilen en un bytecode (fitxer .class) que pot c\u00f3rrer en una M\u00e0quina Virtual Java. Sun Microsystems disposa de tres implementacions diferents de Java: J2SE per a aplicacions d'escriptori; J2EE per a aplicacions distribu\u00efdes i J2ME per a plataformes amb recursos m\u00e9s redu\u00efts com ara m\u00f2bils o PDAs. Per a cada una de les tres implementacions \u00e9s possible descarregar el JRE (entorn d'execuci\u00f3 Java) per a executar aplicacions o el SDK (Eines per al desenvolupament d'aplicacions) per a programar aplicacions en Java, aquest \u00faltim tamb\u00e9 inclou el JRE.</p>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#caracteristiques-de-java","title":"Caracter\u00edstiques de Java","text":"<ul> <li>Senzill: Java s'ha creat perqu\u00e8 sigui un llenguatge senzill amb una sintaxi elegant. \u00danicament consta de tres tipus de dades prim\u00e0ries, eliminant els punters i l'her\u00e8ncia m\u00faltiple</li> <li>Orientat a objectes: Java segueix els paradigmes de la programaci\u00f3 orientada a objectes, ja que la programaci\u00f3 amb Java se centralitza en la manipulaci\u00f3, creaci\u00f3 i construcci\u00f3 d'objectes.</li> <li>Distribu\u00eft: Java permet la construcci\u00f3 d'aplicacions distribu\u00efdes per mitj\u00e0 d'una col.lecci\u00f3 espec\u00edfica de classes.</li> <li>Interpretat: Es necessita un int\u00e8rpret per executar els programes de Java, aix\u00f2 alenteix als programes per\u00f2 els hi dona flexibilitat.</li> <li>Robust: Java \u00e9s un llenguatge robust i fiable, s'ha escrit pensant a poder verificar errors i est\u00e0 molt tipificat.</li> <li>Segur: Java t\u00e9 pocs problemes de seguretat, caracter\u00edstica molt important en les aplicacions distribu\u00efdes d'Internet.</li> <li>Arquitectura neutral: Java \u00e9s independent de la plataforma final on s'executar\u00e0 el programa.</li> <li>Portable: Java \u00e9s un llenguatge d'alt nivell i de plataforma independent, aix\u00f2 li dona portabilitat.</li> <li>Alt rendiment: Els compiladors Java han anat millorant les seves prestacions. Els nous compiladors coneguts com a JIT permeten un rendiment molt semblant als llenguatges convencionals compilats.</li> <li>Concurrent: Java permet l'execuci\u00f3 de m\u00faltiples fils d'execuci\u00f3, o diverses tasques de forma simult\u00e0nia.</li> <li>Din\u00e0mic: En temps d'execuci\u00f3, l'entorn Java es pot ampliar mitjan\u00e7ant enlla\u00e7os a classes que poden estar localitzades en servidors remots o en xarxa.</li> </ul> <p>Un programa desenvolupat amb Java no necessita compilar-se de nou per a poder executar-se en qualsevol de les plataformes que disposi d'una versi\u00f3 instal\u00b7lada de JRE prou actualitzada per al programa.</p> <p>En aquest tema veurem la sintaxis b\u00e0sica de Java: paraules reservades, dades, variables, constants, identificadors i com tamb\u00e9 es codifiquen les estructures de control vistes al tema anterior en llenguatge Java.</p>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#dades-variables-i-identificadors","title":"Dades, Variables i identificadors.","text":"<p>Eventualment la inform\u00e0tica el que tracta de fer \u00e9s interpretar i processar informaci\u00f3, per tant, el primer pas hauria de ser implementar el mecanisme que s'encarregue de representar la informaci\u00f3 tal i com la interpretem nosaltres al m\u00f3n real. </p> <p>La informaci\u00f3 en inform\u00e0tica \u00e9s el contingut d'una o m\u00e9s dades, fent abstracci\u00f3 de la representaci\u00f3 concreta que adopta.</p> <p>Dit d'una altra manera. Imagineu el caixer d'un supermercat. Al final del dia el treballador que est\u00e0 a c\u00e0rrec del caixer, traur\u00e0 tota la recaptaci\u00f3 del dia i la comptar\u00e0. En aquest cas la informaci\u00f3 seria la quantitat total de diners que s'han recaptat, i es representa en forma de dada num\u00e8rica utilitzant nombres i algun signe de puntuaci\u00f3, 1.200,45\u20ac seria la dada que representa la informaci\u00f3 que es vol saber al final del dia.</p> Qu\u00e8 s\u00f3n les Dades <p>Una dada \u00e9s \"la representaci\u00f3 convencional de la informaci\u00f3 en un format adequat perqu\u00e8 puga ser processada, comunicada o interpretada per mitjans manuals o autom\u00e0tics.\"</p> <p>Ara la q\u00fcesti\u00f3 \u00e9s com aquesta informaci\u00f3 que al m\u00f3n real es representa utilitzant n\u00fameros la podem representar en forma de dada per tal que una m\u00e0quina siga capa\u00e7 de processar.  En qualsevol llenguatge de programaci\u00f3, la informaci\u00f3 es pot representar de forma constant, amb literals per exemple, o de forma variable utilitzant identificadors.  Mirem a continuaci\u00f3 amb m\u00e9s detall aquests conceptes.</p> Qu\u00e8 s\u00f3n les Variables <p>Una variable en el camp de les matem\u00e0tiques \u00e9s una quantitat que pot cr\u00e9ixer o decr\u00e9ixer d'una manera cont\u00ednua o discont\u00ednua. Mentre que en inform\u00e0tica \u00e9s un s\u00edmbol emprat en programaci\u00f3 per a emmagatzemar en mem\u00f2ria valors canviants.</p> <p>En resum, la realitat cont\u00e9 una informaci\u00f3 en forma de dada que representarem en un programa inform\u00e0tic de diverses formes, b\u00e9 a trav\u00e9s de literals o de variables a les quals accedirem utilitzant identificadors.</p> <p>Per\u00f2 no ens avancem encara i estudiem b\u00e9 qu\u00e8 \u00e9s un identificador. En tot llenguatge de programaci\u00f3 existeixen una s\u00e8rie d'elements com variables, constants, funcions, llibreries. Aquests elements requereixen d'un nom per tal de distingir-lo de la resta. Aquests noms es diuen identificadors</p> Qu\u00e8 s\u00f3n els identificadors <p>Un identificador \u00e9s una cadena alfanum\u00e8rica que representa o dona un nom a un element dins del nostre programa. Els identificadors de les variables s\u00f3n noms que s'inventa el programador i s'hauria de tindre en consideraci\u00f3 al seg\u00fcent m\u00e0xima: han de ser significatius</p> <p>En altres paraules, un identificador \u00e9s una etiqueta que podem utilitzar per anomenar \"coses\" en un programa inform\u00e0tic. Pel que fa al concepte de significatiu, vol dir que el nom que escollim per a l'etiqueta hauria de ser suficientment esclaridor per saber qu\u00e8 \u00e9s el que representa. Per exemple, si volem posar una etiqueta (amb un adhesiu) a una botella d'aigua que tenim a la nevera, una bona elecci\u00f3 seria: AIGUA.</p> <p>Una \u00faltima cosa, com en tot llenguatge de programaci\u00f3, Java t\u00e9 una s\u00e8rie de normes que hem de seguir per construir identificadors v\u00e0lids. LLig i revisa les normes de construcci\u00f3 d'identificadors de Java, que d'altra banda, s\u00f3n molt semblants a la majoria de llenguatges de programaci\u00f3.</p> <p>Normes per construir identificadors en Java</p> <p>Quan triem el nom per identificar a una variable, ha de ser significatiu, \u00e9s a dir, que el mateix identificador ja done alguna pista de que \u00e9s el que representa.</p> <ul> <li>1. Estan formats per caracters i/o digits.</li> <li>2. No poden comen\u00e7ar per digit.</li> <li>3. No poden usar els seg\u00fcents caracters especials: <code>+ - * / = % &amp; # ! ? ^ \u201c \u2018 ~ \\ | &lt; &gt; ( ) [ ] { } : ; . ,</code></li> <li>4. No poden ser cap paraula reservada de Java.</li> <li>5. Els identificadors de Java distingeixen entre maj\u00fascules i min\u00fascules (case sensitive).</li> <li>6. No hi ha l\u00edmit a la llarg\u00e0ria de l'identificador, per\u00f2 \u00e9s aconsellable utilitzar una grand\u00e0ria \u00f2ptima entre 4 i 15 caracters.</li> </ul> <p>Vejam a continuaci\u00f3 alguns exemples d'identificadors inventats per un programador qualsevol:</p>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#exemples-didentificadors","title":"Exemples d'identificadors","text":"<p>Observa la llista d'identificadors seg\u00fcents:</p>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#identificadors-correctes","title":"Identificadors Correctes","text":"<ul> <li>H0la: malgrat tindre un n\u00famero comen\u00e7a per un caracter alfanum\u00e8ric.</li> <li>$vicent: v\u00e0lid ja que el s\u00edmbol de dollar \u00e9s un caracter alfanum\u00e8ric v\u00e0lid per inicia un identificador.</li> <li>_strNom: els identificadors poden comen\u00e7ar per '_' \u00e9s m\u00e9s de vegades \u00e9s un convencionalisme per algun tipus concret de variable.</li> <li>_3variable: seria incorrecta si no tingu\u00e9s '_' com a primer caracter de l'identificador.</li> <li>VarTest: totalment correcta.</li> <li>variabletest: cap incorrecci\u00f3</li> <li>aci_tens_una_variable_valida_que_representa_un_enter: identificador totalment v\u00e0lid, altra cosa \u00e9s que els noms tan llargs siguen \u00fatils.</li> <li>valor_max: el subratllat tamb\u00e9 sol ser una t\u00e8cnica que s'utilitza per a separar dues paraules que formen un identificador.</li> </ul>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#identificadors-incorrectes","title":"Identificadors Incorrectes","text":"<ul> <li>8exemple: comen\u00e7a per n\u00famero</li> <li>exa+mple: el signe + no est\u00e0 perm\u00e8s</li> <li>prova variable: espai en blanc</li> <li>esta_variable_no_es_valida_no_per_llarga_sino_per_este-guionet: a banda del gui\u00f3 del final tampoc \u00e9s massa aconsellable utilitzar noms tan llargs.</li> </ul> Activitat 201. Classifica els seg\u00fcents identificadors <p>Com ja hem explicat a l'apartat anterior, per formar un identificador s'han de seguir unes normes. Revisa els identificadors seg\u00fcents i digues-me quins s\u00f3n v\u00e0lids i quins no. Si no s\u00f3n v\u00e0lids explica el motiu.</p> Identificadors Identificador Es v\u00e0lid? Motiu Identificador Es v\u00e0lid? Motiu Registre1 S\u00ed 1registre No Els identificadors no poden comen\u00e7ar per n\u00famero while $impost a\u00f1o primer cognom primer_cognom primer-cognom primerCognom Tom's C3PO 123# PesM\u00e0xim %descompte Weight $$preuM\u00e0xim pes.maxim Preu_____ matricula? muchoVale high bar\u00e7a pirag\u00fcista B_011 X012AB 70Llibre nom&amp;cognom 0X1A else"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#algunes-idees-per-crear-identificadors","title":"Algunes idees per crear identificadors","text":"<p>Observa els identificadors seg\u00fcents i apren com crear identificadors significatius, alguns exemples:</p> <ul> <li>estatura: pot identificar l'estatura (al\u00e7ada) d'una persona per exemple.</li> <li>RAM: podria indicar la capacitat RAM d'un ordinador.</li> <li>oratge: ens podria servir per emmagatzemar informaci\u00f3 relativa a l'oratge: solejat, nuvol, plovent, vent...</li> <li>resolucio: indicaria la resoluci\u00f3 d'una pantalla</li> </ul> Activitat 202. Crea identificadors Identificadors <p>Inventa noms d'identificadors per als seg\u00fcents escenaris.</p> <ol> <li>Una etiqueta que identificar\u00e0 l'edat d'una persona: </li> <li>Un nom d'assignatura: </li> <li>Una mitjana aritm\u00e8tica de notes: </li> <li>La profunditat d'una piscina: </li> <li>Els litres d'aigua que hi han a la nevera: </li> <li>La dist\u00e0ncia al supermercat m\u00e9s pr\u00f2xim: </li> </ol>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#paraules-reservades","title":"Paraules reservades","text":"<p>Els llenguatges de programaci\u00f3 utilitzen una s\u00e8rie de paraules o s\u00edmbols que fan una funci\u00f3 espec\u00edfica dins d\u2019un programa.  A aquest conjunt de signes o combinaci\u00f3 d\u2019ells se les anomena paraules reservades. Aquestes paraules nom\u00e9s poden usar-se en un concepte determinat, mai lliurement per l\u2019usuari. Per exemple, el llenguatge C t\u00e9 com a paraules reservades if o while. Ambdues nom\u00e9s podran ser utilitzades en cas que es vullga iniciar una sent\u00e8ncia de control condicional o bucle.</p> <p>Paraules Reservades</p> <p>Les paraules reservades s\u00f3n identificadors o etiquetes reservades predefinides que tenen un significat especial i no es poden utilitzar com identificadors o etiquetes en els programes.</p> <p>Uns dels principals identificadors que ens trobarem a tot llenguatge de programaci\u00f3 s\u00f3n les paraules reservades. Per entendre-ho, el conjunt de paraules reservades d'un llenguatge de programaci\u00f3 s\u00f3n el diccionari de totes les paraules que t\u00e9 aquest llenguatge. </p> <p>Aquestes paraules reservades no poden utilitzar-se per cap altra cosa m\u00e9s, per exemple, si Java t\u00e9 la paraula reservada public, el programador no podr\u00e0 crear cap variable utilitzant l'identificador public.</p> Paraules reservades abstract continue for new switch assert default goto package synchronized boolean do if private this break double implements protected throw byte else import public throws case enum instanceof return transient catch extends int short try char final interface static void finally long strict volatile const float native super while class <p>Identificadors reservats de l'API de Processing IDE</p> <p>Com que Processing IDE no \u00e9s  m\u00e9s que una capa afegida a l'entorn de programaci\u00f3 en Java, t\u00e9 les mateixes paraules reservades que Java i a m\u00e9s a m\u00e9s, com que disposa d'una API (Application Programming Interface) amb moltes funcionalitats, ja hi han una s\u00e8rie d'identificadors d'aquestes funcions que s'hauran de tindre en compte i no les podrem utilitzar. A continuaci\u00f3 una breu llista d'aquests identificadors: </p> <ul> <li>setup, draw, mouseClicked, keyPressed, delay, background, size, clear, rect, ellipse, circle, triangle, pushMatrix, popMatrix, translate, PVector, PImage, etc..</li> </ul> <p>No existeix una taula on les podem consultar totes, \u00e9s q\u00fcesti\u00f3 d'anar treballant amb Processing i aprendre-les conforme les anem utilitzant.</p> Activitat 203. Localitza i classifica identificadors <p>Llig el seg\u00fcent codi amb atenci\u00f3, localitza tots els identificadors i digues-me quins s\u00f3n paraules reservades i quins no. D'aquells que no s\u00f3n paraules reservades, qu\u00e8 s\u00f3n? quina informaci\u00f3 penses que volen representar?</p> Codi en Java <pre><code>    void setup () {\n        size(640,480);\n    }\n\n    void draw () {\n        clear();\n        background(255);\n        float a = random(640);\n        float b = random(480);\n        dibuixaUnaBoleta(a,b);\n        delay(500);\n    }\n\n    void dibuixaUnaBoleta(float num1, float num2) {\n        fill(0);\n        ellipse(a,b,30,30);\n    }\n</code></pre>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#tipus-de-dades","title":"Tipus de dades","text":"<p>Fins ara tot ha girat al voltant d'informaci\u00f3, dades, identificadors, literals i variables, ja que s\u00f3n la base per poder representar la informaci\u00f3 i les dades d'un problema. Per\u00f2, quins tipus de dades es poden representar en Java?</p> <p>Tot llenguatge de programaci\u00f3 porta una s\u00e8rie de tipus de dades predefinits que es poden usar. Aquests tipus de dades tamb\u00e9 es coneixen com a tipus primitius o tipus simples.. Java defineix 8 tipus diferents de dades: byte, short, int, long, char, float, double i boolean. Aquests tipus es poden agrupar en quatre blocs:</p> <ul> <li>Nombres enters: on podem trobar el byte, short, long i int. Aquests tipus admeten valors no fraccionables en parts m\u00e9s xicotetes que la unitat. Per exemple: 1, 3, 5, 15, 20, 132... </li> <li>Punt flotant: aquest grup inclou el float i el double on es representen els nombres decimals, \u00e9s a dir, aquells que s\u00ed admeten fraccions. Per exemple: 1.3, 5.802039, etc..</li> <li>Caracters: char representa a tot el conjunt de caracters del nostre sistema alfab\u00e8tic inclosos els s\u00edmbols. Per exemple: a, b, c, $, ?...</li> <li>Boole\u00e0: boolean \u00e9s un tipus especial que nom\u00e9s pot tindre dos possibles valors: true o false. Qu\u00e8 s\u00f3n els dos valors l\u00f2gics de l'algebra de George Boole.</li> </ul>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#taula-de-tipus-de-dades-en-java","title":"Taula de tipus de dades en Java","text":"Tipus Bytes Representaci\u00f3 Categoria byte 1 de -128 a 127 enter short 2 de -32.768, 32.767 enter int 4 de -2^31 a 2^31-1 enter long 8 de -2^63 a 2^63-1 enter float 4 de 1.4x10^-45 a 3.4028235x10^38 decimal double 8 de 4.9x10^-324 a 1.7976931348623157x10^308 decimal char 2 caracters UTF-16 caracter bool 1 true o false boole\u00e0 <p>En resum del que hem vist fins ara, el primer que s'ha d'establir en tot llenguatge de programaci\u00f3 d'alt nivell, s\u00f3n els mecanismes necessaris per tal de poder representar en totes les seues variants possibles la informaci\u00f3 del m\u00f3n real que volem informatitzar i processar. Aquests mecanismes s\u00f3n: Tipus de dades, Identificadors, Paraules reservades i Variables</p>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#variables","title":"Variables","text":"<p>Al final tot programa s'encarrega de processar informaci\u00f3 i aquesta informaci\u00f3 ha d'estar disponible en algun lloc del nostre codi. Per exemple si volem fer un programa que sume dos n\u00fameros enters, haurem de tindre la informaci\u00f3 o el valor d'aquests dos n\u00fameros en algun lloc. </p> <p>Una variable \u00e9s com un contenidor (una caixeta) que t\u00e9 associat un tipus de dades (int, float, double, char) i cont\u00e9 un valor, si es tracta d'una variable de tipus enter contindr\u00e0 un valor enter, si per contra es tracta d'una variable de tipus caracter contindr\u00e0 una lletra o s\u00edmbol alfanum\u00e8ric.</p> <p> </p> <p>La variable \u00e9s l'unitat b\u00e0sica d'emmagatzemament en Java. Una variable en java es defineix amb la combinaci\u00f3 d'un identificador i el seu tipus de dades. Mira els exemples a continuaci\u00f3:</p> <pre><code>// Declaraci\u00f3 d'una variable en Java\n// type identifier;\n// On type \u00e9s algun dels tipus de dades que hem vist a l'apartat anterior\n// i identifier \u00e9s l'identificador que volem utilitzar.\n// Per exemple:\nint a;  // Declaraci\u00f3 d'una variable entera amb nom a\nfloat b; // Variable flotant de nom b\nchar c;  // Variable caracter amb nom c\nint i = 0; // En aquesta declaraci\u00f3 s'inclou tamb\u00e9 la inicialitzaci\u00f3 del seu valor.\nlong j; \n</code></pre> <p>Les variables com a contenidors d'informaci\u00f3, poden variar (d'ac\u00ed el nom de variable) el seu valor durant l'execuci\u00f3 del programa.</p> <p> </p> <p>Per\u00f2 millor vegem un exemple, imaginem una aplicaci\u00f3 en la que volem controlar la posici\u00f3 d'un element qualsevol, per exemple un cercle a una pantalla 2D (o una boleta). Per determinar la posici\u00f3 de qualsevol element en un escenari 2D necessitem dues coordenades: x i y. Les variables que podriem utilitzar serien dos variables de tipus enter on al seu nom s'indique clarament el que intenten representar. Si volguerem fer un sistema on les posicions tingueren m\u00e9s precisi\u00f3, podriem usar floats en lloc d'int.</p> <pre><code>int posX;           // Variables que representa la posici\u00f3 X de l'element.\nint posY;           // Variable que representa la posici\u00f3 Y de l'element.\n\nfloat posXPrecisa;  // Variable que representa la posici\u00f3 X de l'element amb precisi\u00f3 flotant.\nfloat posYPrecisa;  // Variable que representa la posici\u00f3 Y de l'element amb precisi\u00f3 flotant.\n</code></pre> <p>Observa el codi anterior i basant-se en la norma de creaci\u00f3 de variables type identifier; que hem vist abans, raona quins s\u00f3n els tipus de dades de les variables i quins els seus identificadors?</p> <p>Si hi han moltes variables que tenen el mateix tipus base, podem agrupar les declaracions per tipus separant els identificadors amb coma excepte a l'\u00faltim identificador, on a continuaci\u00f3 seguir\u00edem posat un punt i coma per indicar el final de la sent\u00e8ncia.</p> <pre><code>int a, b, c, d, e, f, g; // Declaracio de m\u00faltiples variables de tipus enter\nfloat m, n, o, p, q;     // Declaraci\u00f3 de m\u00faltiples variables de tipus flotant\n</code></pre> Activitat 204. Declaraci\u00f3 de variables Problema <p>Imagina que fem un programa en el que es pret\u00e9n portar el control de la informaci\u00f3 personal d'un equip de basquet. Per a cadascun dels jugadors necessitariem emmagatzemar la informaci\u00f3 relativa a: Nom, cognoms, pes, al\u00e7ada i tota aquella informaci\u00f3 que consideres que \u00e9s important saber sobre un jugador qualsevol.</p> <p>Declara com hem vist als apartats anteriors les variables necess\u00e0ries per poder gestionar eixa informaci\u00f3.</p>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#literals","title":"Literals","text":"<p>En programaci\u00f3 no nom\u00e9s es pot tractar la informaci\u00f3 mitjan\u00e7ant l'\u00fas de variables, tamb\u00e9 es poden emmagatzemar dades fent \u00fas dels literals. I qu\u00e8 s\u00f3n els literals?</p> <p>Un literal \u00e9s, segons el termCAT,  una expressi\u00f3 o part d'una instrucci\u00f3 que representa expl\u00edcitament un valor. En altres paraules, mentre que les variables s\u00f3n cadenes alfanum\u00e8riques que representen un valor canviant, un literal \u00e9s una cadena alfanum\u00e8rica que representa exactament el que posa.  Des del punt de vista m\u00e9s espec\u00edfic de la inform\u00e0tica, un literal \u00e9s un valor alfanum\u00e8ric que s'utilitza com una constant, \u00e9s a dir, que el seu valor no varia durant l'execuci\u00f3 del programa.</p> <p>Per\u00f2 com podem distingir el tipus dels literals o si s\u00f3n correctes o no? Mirem primer quins tipus de terminals ens podem trobar en Java.</p> <ul> <li>Literals enters: existeixen tres formes de el valor d'un n\u00famero enter. Si s'escriu solament el n\u00famero, aquest representa una xifra en base decimal. Si t\u00e9 un 0 davant estem escrivint n\u00fameros en sistema octal i si t\u00e9 el prefix \"0x\" aleshores est\u00e0 representat en base hexadecimal. Finalment si el que volem \u00e9s representar un literal de tipus long ho farem afegint un caracter 'L' al final de la cadena num\u00e8rica.</li> <li>Literals decimals: Per representar literals en coma flotant podem utilitzar el '.' per exemple: 10.3, o la notaci\u00f3 cient\u00edfica com 10.3e+5 que seria l'equivalent a 10.3 per 10 elevat a 5.</li> <li>Literals caracters i cadenes: Un literal de tipus caracter emmagatzema un caracter Unicode. Aquest sistema de codificaci\u00f3 amplia les opcions que t\u00e9 la codificaci\u00f3 ASCCII per incloure altres alfabets. Podem escriure en grec, hebreu o vietnamita sense que el compilador proteste. Un literal de tipus char s'expressa envoltant el caracter entre cometes simples. Una altra manera de representar un caracter \u00e9s indicant el codi Unicode en hexadecimal, posant com a prefix la cadena \\u, tot entre cometes simples. D'aquesta forma el s\u00edmbol '@' s'escriuria: '\\u0040.</li> </ul> <p>Literal</p> <p>Un literal \u00e9s un valor que poden assignar a les variables o que es pot usar com a terme constant. Depenent del tipus de variable, podrem assignar uns valors o uns altres. Els literals poden ser: enters, decimals, caracter o cadena.</p> <ol> <li>Literals enters: 12, 2, -3, 12L (long), 0b101010 (bin\u00e0ria), 0x1a (hexadecimal), 0754 (octal)</li> <li>Literals decimals: 12.2, 12.2F, 12.2D (double).</li> <li>Literals car\u00e0cter: 'a', 'b', '$'.</li> <li>Literals cadena: \"Bela\", \"Ciao\".</li> </ol> Activitat 205. Literals num\u00e8rics <p>Indica quins literals s\u00f3n v\u00e0lids. Per cadascun dels literals m\u2019has d\u2019indicar si es v\u00e0lid o no aix\u00ed com tamb\u00e9 el tipus de dades t\u00e9 associat.</p> Problema Literal Tipus V\u00e0lid Sistema Literal Tipus V\u00e0lid Sistema 0.5 .5 9.3e12 9.3e-12 12345678 12345_L 0.8E+0.8 0.8E 8 05_15 018CDF 0XBC5DA 0x87e3a 234567L 0_B11 010101 0_557 .00.8E2 .3e3f 0b111 12_234L 0Xabcd 0xabcEL _234 1010B 0x1010B 1_234.2E-2 1234.2EF 1234.2E3F 1_1.2e_2 0bABCDL 0X1A 0X12AL abcd 0125 .01011 3e12 3_e12 -3E-1_2 0.8E 0B1212 1_2_3 0xedad 0XBE2 101e2 B1101 1.34.5 12.3E4F 0X12AG Activitat 206. Literals caracter <p>Indica quins dels seg\u00fcents literals de tipus caracter s\u00f3n v\u00e0lids.</p> Problema Literal V\u00e0lid Motiu Literal V\u00e0lid Motiu 'a' '$' '\\n' '/n' '\\' '\\\u00f1' \"T\" '\u00f1' 'xyz' '\\u0066' \"XYZ\" '4' '\\t' '\\b' k + '+' '?' '\u00e0' ':' Activitat 207. Literals String <p>Indica quins dels seg\u00fcents literals s\u00f3n literals de tipus string v\u00e0lid.</p> Problema Literal V\u00e0lid Motiu Literal V\u00e0lid Motiu '8:15 PM' \"FP' \"Roig i blau\" \" programaci\u00f3 \" \"Nom: \"programaci\u00f3 \"Java\"\" \"Capitol\\'3\\'\" programaci\u00f3 \"1.e3-1-2\" 'W' \"\" \"\\n\" \" \" \"\\b\" \"A\" \"4 + 5 * 2\""},{"location":"Tema%2002.%20El%20llenguatge%20Java/#declaracio-inicialitzacio-de-variables","title":"Declaraci\u00f3, inicialitzaci\u00f3 de variables","text":"<p>Cal diferenciar entre la declaraci\u00f3 d'una variable, quan li donen nom i el tipus base com hem fet a l'activitat 304, i la inicialitzaci\u00f3 d'aquesta mateixa, quan li donem valor. Si recordeu l'exemple al qual necessitavem dues variables per representar la posici\u00f3 d'un element en un escenari 2D, haviem declarat les variables de tipus enter posX i posY per\u00f2 no els hauriem donat cap valor inicial.</p> <p>Si per declarar una variable \u00e9s necessari l'\u00fas d'un identificador que ens servir\u00e0 d'etiqueta per poder accedir a dita variable, per tal d'assignar-li un valor hem de fer \u00fas d'un literal.</p> <p>Per defecte Java inicialitzaria aquestes dues variables a zero, \u00e9s a dir, dins la caixa (contenidor) de cada variable, tindriem el valor zero si no s'indica el contrari.</p> Activitat 208. Inicialitzaci\u00f3 de variables Problema <p>Basant-nos en l'activitat del jugador de basquet, declara i inicialitza les variables que hages triat amb el tipus de dades que li corresponga i tamb\u00e9 les haur\u00e0s d'inicialitzar.</p> <p>Guarda aquesta activitat amb el nom de: CognomNomAct308.pde per poder lliurar-lo a aules.</p>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#constants","title":"Constants","text":"<p>Les constants en Java (les no literals) s\u00f3n semblants a les variables, \u00e9s a dir, s\u00f3n contenidors d'informaci\u00f3, tenen un identificador i un tipus b\u00e0sic associat per\u00f2 el seu valor no canvia durant l'execuci\u00f3 del programa. L'\u00fas de les constants sol ser per a definir valors immutables dins d'un programa com per exemple en un tauler d'escacs el n\u00famero de files i columnes \u00e9s 8 sempre.</p> <p>Declaraci\u00f3 i inicialitzaci\u00f3 de constats</p> <p>Una de les peculiaritats de les constants, a banda que el seu valor no varia mentre s'executa el programa, \u00e9s que el seu valor s'ha de fer a la mateixa l\u00ednia que la declaraci\u00f3.</p> <p>Les constants en java es defineixen de la seg\u00fcent forma:</p> <pre><code>// Constant en java\nstatic final int totalFiles = 8; // totalFiles valdr\u00e0 8 durant tot el programa. \n</code></pre> Activitat 209. Declara constants <p>Hem de fer un programa que ens servisca m\u00e9s endavant per a convertir temperatures de Celsius a Fahrenheit i Kelvin. Per comen\u00e7ar necessitem saber que el factor de conversi\u00f3 \u00e9s 1.8 que l'offset de Fahrenheit es 32 i que l'offset Kelvin \u00e9s 237.15.</p> <p>Declara les constants necess\u00e0ries per poder comen\u00e7ar a fer aquesta aplicaci\u00f3. Recorda que es valorar\u00e0 l'elecci\u00f3 correcta dels identificadors, el tipus de variable i que les constants es declaren de forma correcta en Java.</p>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#operadors-i-expressions","title":"Operadors i expressions","text":"<p>Ha arribat el moment de revisar el que hem vist. Fins ara hem vist les dades com a unitat d'emmagatzemament d'informaci\u00f3. Els diferents tipus de dades que ens proporciona Java, com les variables i les constants poden emmagatzemar dades que poden variar o no han de variar durant l'execuci\u00f3 del programa. I finalment tamb\u00e9 hem estudiat els literals i com construir identificadors per tal d'etiquetar distints elements dins del nostre programa.  En definitiva em vist en detall com es pot representar tota classe d'informaci\u00f3 en un llenguatge de programaci\u00f3 com Java per\u00f2, com varem dir al primer tema, un programa inform\u00e0tic s'encarrega (entre d'altres) de processar l'informaci\u00f3. B\u00e9 doncs, nosaltres de moment nom\u00e9s hem estudiat els diferents mecanismes que proporciona Java per gestionar eixa informaci\u00f3 per\u00f2 no hem vist encara com la podem processar.  Per tal de poder processar la informaci\u00f3 haurem primer d'estudiar que s\u00f3n esl operadors i les expressions.</p>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#expressions","title":"Expressions","text":"<p>Una expressi\u00f3 \u00e9s una equaci\u00f3 matem\u00e0tica que representa un c\u00e0lcul, per exemple:</p> <p>Exemple d'expressions</p> <ul> <li>3x + 7z. </li> <li>2ab + a*a + 7</li> </ul> <p>L'expressi\u00f3 anterior la formen els seg\u00fcents elements: dos literals enters: 3 i 7; dos identificadors de variables (no sabem el tipus) x i z; i els simbols * i +.</p> <p>Al final tota operaci\u00f3 t\u00e9 un valor, per exemple, si x val 3 i z val 2, el resultat (valor) de l'expressi\u00f3 seria 23. Que consistiria en multiplicar (*) el literal '3' per el contingut de la variable amb identificador x i despr\u00e9s sumar-li (+) el resultat de la multiplicaci\u00f3 del literal 7 per el contingut de la variable z.</p> <p>Els simbols + i * que hem vist a l'expressi\u00f3 anterior, s\u00f3n els operadors, concretament * \u00e9s l'operador aritm\u00e8tic de multiplicaci\u00f3 i el s\u00edmbol + representa l'operador de suma. Per\u00f2 abans de passar als operadors aritm\u00e8tics, vejam abans l'operador assignaci\u00f3.</p>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#operador-assignacio","title":"Operador assignaci\u00f3","text":"<p>L'operador assignaci\u00f3 (=), com el seu nom indica, s'encarrega d'assignar-li a una variable el resultat d'una expressi\u00f3 matem\u00e0tica o el valor de una altra variable o un literal. S'ha de tenir en compte que el tipus de dades que representa b\u00e9 l'expressi\u00f3 matem\u00e0tica, el literal o l'altra variable han de coincidir als dos costats de l'operaci\u00f3 d'assignaci\u00f3.</p> <p>Com ja hem dit abans, l'operador assignaci\u00f3 en Java \u00e9s el s\u00edmbol '=' i s'utilitza de la seg\u00fcent forma:</p> <pre><code>// variable = expressi\u00f3\n// Seguint l'exemple anterior\nint x=3, y, z=2;\ny = 3*x + 7*z;\n</code></pre> <p>On l'operador '=' assignaria el valor de l'expressi\u00f3 '3x+2z' a la variable y, \u00e9s a dir, executada aquesta acci\u00f3 dins de la variable y haur\u00edem depositat el valor 23.</p> <p>Observa el codi escrit a continuaci\u00f3 on podr\u00e0s veure altres exemples d'\u00fas de l'operador assignaci\u00f3:</p> <pre><code>int a, b, c;\na = b = c = 10;\n// Tant a com b com c tindrien valor 10\n\nint i = 3;\ni = i * 3;\n// i valdria 9\n\nint j = 2;\nj *= 2;    // Aquesta manera peculiar d'usar l'operador assignaci\u00f3 \u00e9s el mateix que j = j * 2;\n</code></pre> <ul> <li>A la l\u00ednia 2 s'est\u00e0 assignant simult\u00e0niament el valor enter del literal 10 a les variables a, b i c.</li> <li>A la l\u00ednia 5 assignem el valor enter 3 a la variable amb identificador 'i' acabada de crear.</li> <li>A la l\u00ednia 6 assignem a la variable 'i' el seu propi valor multiplicat per 3. En altres paraules, tripliquem el valor inicial de 'i'.</li> <li>A la l\u00ednia 9 creem una variable de tipus enter amb identificador 'j' i li assignem el valor 2.</li> <li>A la l\u00ednia 10 dupliquem el valor inicial de 'j'.</li> </ul> Exemples d'operacions aritm\u00e8tiques <p>Escriu i executa el seg\u00fcent codi en Processing IDE i digues que \u00e9s el que mostra. </p> <pre><code>// Codi per a Processing IDE\nvoid setup() {\n    int a = 20, b = 10, c, d, e = 10, f = 4, g = 9;\n\n        \n        c = b;\n        System.out.println(\"Valor de c = \" + c); \n        a = a + 1;\n        b = b - 1;\n        e = e * 2;\n        f = f / 2;\n        System.out.println(\"a,b,e,f = \" + a + \",\"\n                        + b + \",\" + e + \",\" + f);\n        a = a - 1;\n        b = b + 1;\n        e = e / 2;\n        f = f * 2;\n\n        a += 1;\n        b -= 1;\n        e *= 2;\n        f /= 2;\n        System.out.println(\"a,b,e,f (utilitzen operador curst)= \" + \n                            a + \",\" + b + \",\" + e + \",\" + f);\n}\n</code></pre>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#operadors-aritmetics","title":"Operadors aritm\u00e8tics","text":"<p>Els operador aritm\u00e8tics en Java serveixen per realitzar operacions b\u00e0siques algebraiques com: la suma, resta, multiplicaci\u00f3 o divisi\u00f3. Els resultats de tota expressi\u00f3 aritm\u00e8tica \u00e9s de tipus de dades num\u00e8ric, per tant, podr\u00e0 ser assignat a una variable num\u00e8rica o podra ser utilitzant en qualsevol altra operaci\u00f3 num\u00e8rica.  </p> <ul> <li>Suma: s\u00edmbol (+). Exemple: 4+5. Resultat 9.</li> <li>Resta: s\u00edmbol (-). Exemple: 5-2. Resultat 3.</li> <li>Multiplicaci\u00f3: s\u00edmbol (). Exemple: 37. Resultat 21.</li> <li>Divisi\u00f3 (Quocient): s\u00edmbol (/). Exemple: 8/4. Resultat 2.</li> <li>Divisi\u00f3 (Residu): s\u00edmbol (%). Exemple 10%2. Resultat 0.</li> </ul> Activitat 210. Executa el seg\u00fcent codi d'operadors aritm\u00e8tics <p>C\u00f2pia i compila el codi anterior i observa el que mostra pel terminal. Has de fer l'activitat amb Processing IDE. Explica amb les teues paraules qu\u00e8 est\u00e0 passant.</p> <pre><code>// OPERADORS ARITM\u00c8TICS\nvoid draw() \n{\n    int a = 20, b = 10, c = 0, d = 20, e = 40, f = 30;\n    String x = \"Thank\", y = \"You\";\n    \n    println(\"a + b = \"+(a + b));\n    println(\"a - b = \"+(a - b));\n    println(\"x + y = \"+x + y);\n    println(\"a * b = \"+(a * b));\n    println(\"a / b = \"+(a / b));\n    println(\"a % b = \"+(a % b));\n}\n</code></pre> <p>A l'exemple anterior has pogut observar com s'escriuen en java algunes expressions aritm\u00e8tiques. A l'activitat seg\u00fcent haur\u00e0s d'escriure tu aquestes expressions o operacions aritm\u00e8tiques en un programa de Processing IDE.</p> Activitat 211. Operacions i expressions aritm\u00e8tiques ProblemaSoluci\u00f3 <ol> <li> <p>A partir de les seg\u00fcents expressions matem\u00e0tiques, construeix les respectives expressions aritm\u00e8tiques escrites en java.</p> <p> </p> </li> <li> <p>A continuaci\u00f3 fes el proc\u00e9s contrari, \u00e9s a dir, a partir de l'expressi\u00f3 aritm\u00e8tica escrita en llenguatge java, escriu-la en format matem\u00e0tic correcte.</p> Expressi\u00f3 Formula Expressi\u00f3 Formula b/2-4ac 1/y+3*x/z+1 3xy-5x+12x-17 1/(y+3)+x/y+1 (b+d)/(c+4) </li> <li> <p>Resol les seg\u00fcents expressions aritm\u00e8tiques suposant que a val 8, b val 3 i c val 5.</p> Expressi\u00f3 Resultat Expressi\u00f3 Resultat a + b + c 2 * b + 3 * (a \u2013 c) a / b a % b a / c a % c a * b / c a * (b / c) (a * c) % b a * (c % b) (3 * a \u2013 2 * b) % (2 * a \u2013 c) 2 * ( a / 5 + (4 - b * 3)) % (a + c \u2013 2) (a - 3 * b) % (c + 2 * a) / (a \u2013 c) a - b - c * 2 </li> <li> <p>Si x, y i z s\u00f3n variables de tipus double amb valors 88, 3.5 i -5.2 respectivament, determina els valor de les seg\u00fcents expressions aritm\u00e8tiques (m\u00e0xim 4 decimals)</p> Expressi\u00f3 Resultat Expressi\u00f3 Resultat x + y + z 2 * y + 3 * (x \u2013 z) x / y x % y x / (y + z) (x / y) + z 2 * x / 3 * y 2 * x / (3 * y) x * y % z x * (y % z) 3 * x \u2013 z \u2013 2 * x 2 * x / 5 % y x - 100 % y % z x - y - z * 2 </li> <li> <p>Si c1, c2 y c3 son variables de tipus char amb valors c1=\u2019E\u2019, c2=\u20195\u2019, c3=\u2019?\u2019, determina el valor num\u00e8ric de les seg\u00fcents expressions aritm\u00e8tiques. Per resoldre\u2019l necessites saber el valor num\u00e8ric corresponent a aquests caracters en base a la taula ASCII: 'E' = 69, '5' = 53 i '?' = 63. Consulta a la taula ASCII els valors num\u00e8rics de la resta de caracters que apareixen a les operacions</p> Expressi\u00f3 Resultat Expressi\u00f3 Resultat c1 + 1 c1 \u2013 c2 + c3 c2 \u2013 2 c2 \u2013 '2' c3 + '#' c1 % c3 '2' + '2' (c1 / c2) * c3 3 * c2 '3' * c2 </li> </ol> <p>Encara no disponible</p>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#operadors-increment-i-decrement-unaris","title":"Operadors increment i decrement (unaris)","text":"<p>En programaci\u00f3 i com her\u00e8ncia de C i C++ existeixen els operadors increment (++) i decrement (--) que el que fan \u00e9s incrementar o decrementar en una unitat la variable a la qual s'apliquen. Aquests operadors es diuen unaris perqu\u00e8 nom\u00e9s treballen sobre un sol operand. Encara que aquest operador s'aplique nom\u00e9s sobre un element, tamb\u00e9 es tractaria d'una expressi\u00f3 aritm\u00e8tica, per tant, tamb\u00e9 hauria de retornar un resultat num\u00e8ric per ser utilitzat com a tal.</p> <pre><code>    int x = 10;\n    // Postincrement o postdecrement\n    x ++; // Aquest codi seria equivalent a x = x + 1;\n    x --; // Aquest codi seria equivalent a x = x -1 ;\n</code></pre> <p>Aquests operadors tamb\u00e9 es poden posar abans de la variable produint el mateix efecte</p> <pre><code>    int x = 10;\n    // Preincrement o predecrement\n    ++ x; // Aquest codi seria equivalent a x = x + 1;\n    -- x; // Aquest codi seria equivalent a x = x -1 ;\n</code></pre> <p>La difer\u00e8ncia essencial entre el postincrement i el preincrement \u00e9s que el contingut de la variable, el que tenim dins la caixeta, s'avalua abans (postincrement) o despr\u00e9s (preincrement) de sumar-li un al seu valor.</p> Activitat 212. Operadors postincrement i preincrement <p>Prova el codi seg\u00fcent i digues-me el que passa. En acabar fes algunes modificacions al codi i escriu un comentari al codi.</p> <pre><code>void draw() \n{\n    int a = 20, b = 10, c = 0, d = 20, e = 40, f = 30;\n    boolean condition = true;\n    \n    c = ++a;\n    println(\"Valor de c (++a) = \" + c);\n    \n    c = b++;\n    println(\"Valor de c (b++) = \" + c);\n    \n    c = --d;\n    println(\"Valor de c (--d) = \" + c);\n    \n    c = e--;\n    println(\"Valor de c (e--) = \" + c);\n    println(\"Valor de !condition = \" + !condition);\n}\n</code></pre> <p>Entrega: Fitxer .pde amb el codi modificat i un comentari per tal d'explicar-ho.</p>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#operadors-relacionals","title":"Operadors relacionals","text":"<p>Com hem explicat en l'apartat sobre Tipus de dades, existeix en Java el tipus boolean que nom\u00e9s pot tenir valors true o false. Aquest tipus de dades est\u00e0 relacionat amb els operadors relacionals, ja que tota expressi\u00f3 relacional ha de donar com a resultat b\u00e9 true o false.</p> <p>Tant els operadors relacionals com els tipus de dades boolean, estan directament relacionats amb l'algebra de boole. A continuaci\u00f3 hi pots veure un resum de les operacions b\u00e0siques en l'algebra de boole:</p>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#negacio-operador-unari","title":"Negaci\u00f3. Operador unari","text":"A NOT 0 1 1 0"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#or-i-and-operadors-binaris","title":"OR i AND. Operadors binaris","text":"A B OR AND 0 0 0 0 1 0 1 0 0 1 1 0 1 1 1 1 <p>Els operadors relacionals a Java s\u00f3n:</p> <ul> <li>Igual que: == o igual a. Exemple d'\u00fas: a == b, compara si a i b s\u00f3n iguals o no.</li> <li>Distint de: != o distint de. Exemple d'\u00fas: a != b, comprova si a i b s\u00f3n distints.</li> <li>Major que: &gt; o major que. Exemple d'\u00fas: 'a&gt;b' comprova si a \u00e9s major que b.</li> <li>Menor que: &lt; o menor que. Exemple d'\u00fas: 'a&lt;b' comprova si a \u00e9s menor que b.</li> <li>Major o igual que: &gt;= o major igual que. Exemple d'\u00fas: 'a&gt;=b' comprova si a \u00e9s major o igual que b.</li> <li>Menor o igual que: &lt;= o menor igual que. Exemple d'\u00fas: 'a&lt;=b' comprova si a \u00e9s menor o igual que b.</li> </ul> <p>Aix\u00ed tenim que una expressi\u00f3 relacional, que com hem explicat ha de donar un resultat boole\u00e0, es podr\u00e0 utilitzar b\u00e9 en altres expressions relacionals o en avaluacions de condicions per a les estructures de control que veurem en pr\u00f2xims apartats.</p> Activitat 213. Expressions relacionals <p>C\u00f2pia i executa el codi anterior en Processing i observa el que passa. Despr\u00e9s fes algunes modificacions al codi i escriu un comentari al codi.</p> <pre><code>// Programa Java per mostrar operadors relacionals\nvoid draw() \n{\n    int a = 20, b = 10;\n    String x = \"Thank\", y = \"Thank\";\n    int ar[] = { 1, 2, 3 };\n    int br[] = { 1, 2, 3 };\n    boolean condicion = true;\n\n    // Diversos operadors relacionals\n    println(\"a == b :\" + (a == b));\n    println(\"a &lt; b :\" + (a &lt; b));\n    println(\"a &lt;= b :\" + (a &lt;= b));\n    println(\"a &gt; b :\" + (a &gt; b));\n    println(\"a &gt;= b :\" + (a &gt;= b));\n    println(\"a != b :\" + (a != b));\n\n    // Els arrays no es poden comparar cma operadors relacionals perqu\u00e8 els objectes emmagatzemen refer\u00e8ncies i no el valor\n    println(\"x == y : \" + Arrays.equals(ar, br));\n\n    println(\"condicion==true :\" + (condicion == true));\n}\n</code></pre> <p>Entrega: Fitxer .pde amb el codi modificat i un comentari per tal d'explicar-ho.</p>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#operadors-logics","title":"Operadors l\u00f2gics","text":"<p>Aquests operadors s'utilitzen per realitzar operacions l\u00f2giques AND i l\u00f2giques OR, \u00e9s a dir, la funci\u00f3 semblant a la port AND i la porta OR e l'electr\u00f2nica digital. Una cosa a tindre en compte \u00e9s que la segona condici\u00f3 no s'avalua si la primera \u00e9s falsa, \u00e9s a dir, t\u00e9 un efecte de curtcircuit. S'utilitza molt per provar varies condicions per prendre una decisi\u00f3.</p> <ul> <li>not (!): negaci\u00f3 l\u00f2gica.</li> <li>and (&amp;&amp;): and l\u00f2gic.</li> <li>or (||): or l\u00f2gic.</li> <li>or exclusiu (^): or exclusiu.</li> </ul> Activitat 214. Operadors l\u00f2gics <p>Prova i executa el codi anterior. Has de fer l'activitat en Processing IDE.</p> <pre><code>void setup() {\n    println(\"TAULA DE BOOLE\");\n    println(\"--------------\");\n    println(\" OPERADOR &amp;&amp;\");\n    println(\"--------------\");\n    println(\" V  &amp;&amp;  V  = \" + (true&amp;&amp;true));\n    println(\" V  &amp;&amp;  F  = \" + (true&amp;&amp;false));\n    println(\" F  &amp;&amp;  V  = \" + (false&amp;&amp;true));\n    println(\" F  &amp;&amp;  F  = \" + (false&amp;&amp;false));\n    println(\"--------------\");\n    println(\" OPERADOR ||\");\n    println(\"--------------\");\n    println(\" V  ||  V  = \" + (true||true));\n    println(\" V  ||  F  = \" + (true||false));\n    println(\" F  ||  V  = \" + (false||true));\n    println(\" F  ||  F  = \" + (false||false));\n    println(\"--------------\");\n    println(\" OPERADOR !\");\n    println(\"--------------\");\n    println(\" !V  = \" + !true);\n    println(\" !F  = \" + !false);\n    println(\"--------------\");\n}\n</code></pre>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#operador-condicional-o-ternari","title":"Operador condicional o ternari","text":"<p>Java inclou un operador especial de tipus ternari que de vegades s'utilitza per substituir algunes estructures if then else. Aquest \u00e9s l'operador ? i la seua forma general \u00e9s:</p> <pre><code>expressio1 ? expressio2 : expressio 3;\n</code></pre> <p>Expressi\u00f3 1: \u00e9s l'expressi\u00f3 que avalua un valor boole\u00e0, d'aquesta forma, si l'expressi\u00f3 1 s'avalua com a true, s'executaria l'expressi\u00f3 2 mentre que si l'expressi\u00f3 1 s'avalua a false, s'executaria l'expressi\u00f3 3. Mira l'exemple seg\u00fcent:</p> <pre><code>// B\u00e0sicament el que faria aquesta expressi\u00f3 seria engegar l'aire condicionat si la temperatura \u00e9s superior a 25 graus.\n\ndouble temperatura;     // Variable que ens indica la temperatura ambient\nboolean AC_ON = false;  // Variable booleana que ens indica si l'aire condicionat est\u00e0 en marxa\ntemperatura &gt; 25 ? AC_ON = true : AC_ON = false;\n</code></pre> Activitat 215. Estudia i resol les seg\u00fcents expressions relacionals i l\u00f2giques ProblemaSoluci\u00f3 <ol> <li>Si x, y i z s\u00f3n variables de tipus boole\u00e0 amb valors \u2018x\u2019 veritable, \u2018y\u2019 fals i \u2018z\u2019 veritable, determina el valors de les seg\u00fcents expressions l\u00f2giques:</li> </ol> Expressi\u00f3 Resultat Expressi\u00f3 Resultat (X &amp;&amp;  Y) || (X &amp;&amp; Z) (X || !Y)&amp;&amp; (!X || Z) !(X || Y) &amp;&amp; Z X || Y || X &amp;&amp; !Z &amp;&amp; !Y !X || !Y || Z &amp;&amp; X &amp;&amp; !Y <ol> <li>Si w, x, y i z s\u00f3n variables de tipus boole\u00e0 amb valors w falsa, x veritable, y veritable i z falsa, determina el valor de les seg\u00fcents expressions l\u00f2giques:</li> </ol> Expressi\u00f3 Resultat Expressi\u00f3 Resultat W || Y &amp;&amp; X &amp;&amp; W || Z X &amp;&amp; !Y &amp;&amp; !X || !W &amp;&amp; Y !(W || !Y) &amp;&amp; X || Z X &amp;&amp; Y &amp;&amp; W || Z || X Y || !(Y || Z &amp;&amp; W) !X &amp;&amp; Y &amp;&amp; (!Z || !X) <ol> <li> <p>A partir de les seg\u00fcents declaracions de variables:</p> <p>int i = 8, j = 5;</p> <p>float x = 0.005F, y = -0.01F;</p> <p>char c = \u2018c\u2019, d = \u2018d\u2019;</p> </li> </ol> <p>Determina el valor de les seg\u00fcents expressions.</p> Expressi\u00f3 Resultat Expressi\u00f3 Resultat i &lt;= j c &gt; d x &gt;= 0 x &lt; y-- j != 6 c == 99 !(i &lt;= j) !(c == 99) !(x &gt; 0) \u2013j == i - 13 ++x &gt; 0 y-- &lt; 1 c &gt; d || c &gt; 0 5 * (i + j) &gt; \u2018c\u2019 2 * x + y == 0 2 * x + (y == 0) x + y &gt;= 0 x &lt; ++y \u2013 (i + j) != -i + j i &lt;= j &amp;&amp; i &gt;= c i &gt; 0 &amp;&amp; j &lt; 5 i &gt; 0 x &gt; y &amp;&amp; i &gt; 0 || j &lt; 5 (3 * i \u2013 2 * j) % (2 * d \u2013 c) &gt; 3 * d 2 * ((i / 5) + (4 * (j \u2013 3)) % (i + j \u2013 2)) &gt;= 10 (i \u2013 3 * j) % (c + 2 * d) / (x \u2013 y) &gt;= 0 <p>No disponible encara</p>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#conversio-de-tipus","title":"Conversi\u00f3 de tipus","text":"<p>Hem dit que en una expressi\u00f3 d'assignaci\u00f3 de valors, els tipus de dades han de ser el mateix als dos costats de l'operaci\u00f3, per\u00f2, qu\u00e8 passa si aquests no coincideixen? \u00c9s a dir, que passa si a una variable de tipus enter li assignem un nombre decimal? o un caracter? Amb Java \u00e9s possible transformar el tipus d'una variable o objecte en un altre diferent a l'original amb el que inicialment va ser declarat. Aquest procediment s'anomena \"Conversi\u00f3 de tipus\", encara que tamb\u00e9 podreu trobar aquest terme com a tipat o modelat o casting i \u00e9s un mecanisme que hem de utilitzar amb cura ja que un mal \u00fas d'aquest \u00e9s una  font d'errors.</p> <p>En Java ens podem trobar dos escenaris diferents: un en el que els tipus que es volen convertir s\u00f3n compatibles, en aquest cas Java fa una conversi\u00f3 autom\u00e0tica o l'escenari al qual els dos tipus de dades de l'assignaci\u00f3 no s\u00f3n compatibles per la qual cosa haurem de for\u00e7ar aquesta conversi\u00f3 amb un casting.</p>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#conversio-automatica-de-tipus-o-ampliacio","title":"Conversi\u00f3 autom\u00e0tica de tipus o ampliaci\u00f3","text":"<p>La conversi\u00f3 autom\u00e0tica de tipus ampliaci\u00f3 es produeix quan dos tipus de dades es converteixen autom\u00e0ticament. A\u00e7\u00f2 passa quan:</p> <ul> <li>Els dos tipus de dades s\u00f3n compatibles</li> <li>Quan assignem el valor de un tipus de dades m\u00e9s menut a un tipus de dades m\u00e9s gran.</li> <li>Tipus de dades ordenats per grand\u00e0ria: byte &lt; short &lt; int &lt; long &lt; float &lt; double</li> </ul> <p>Per exemple, en Java, els tipus de dades num\u00e8rics s\u00f3n compatibles entre s\u00ed, per\u00f2 no s'admet la conversi\u00f3 autom\u00e0tica de tipus num\u00e8ric a char o boolean. A m\u00e9s a m\u00e9s, char i boolean no s\u00f3n compatibles entre ells. Mira el codi a continuaci\u00f3 on es produeix una conversi\u00f3 autom\u00e0tica en Java.</p> <pre><code>    \n    void draw()\n    {\n        int i = 100; \n        \n        // Conversi\u00f3 autom\u00e0tica de tipus\n        long l = i; \n        \n        // Conversi\u00f3 autom\u00e0tica de tipus\n        float f = l; \n        println(\"Valor Int \" + i);\n        println(\"Valor Long \" + l);\n        println(\"Valor Float \" + f);\n    }\n    \n</code></pre>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#conversio-explicita-de-tipus-o-casting","title":"Conversi\u00f3 explicita de tipus o casting","text":"<p>Si volem assignar un valor de tipus de dades m\u00e9s gran a un tipus de dades m\u00e9s xicotet, farem un casting o el que tamb\u00e9 es coneix com conversio de tipus explicit.</p> <ul> <li>Util per als tipus de dades incompatibles on la conversi\u00f3 autom\u00e0tica no es pot realitzar.</li> <li>char i int no s\u00f3n compatibles entre ells i donar\u00e0 un error de compilaci\u00f3.</li> <li>On necessitarem la conversi\u00f3 explicita: double &gt; float &gt; long &gt; int &gt; short &gt; byte</li> </ul> <p>Mira el seg\u00fcent codi on hi ha un cas de tipus incompatibles.</p> <pre><code>    void draw()\n    {\n        char ch = 'c';\n        int num = 88;\n        ch = num;\n    }\n</code></pre> <p>L'exemple anterior donaria un error a la l\u00ednia 7 dient que no es pot convertir d'int a char. Per tant com podriem fer aquesta conversi\u00f3 explicita?. Una possible forma d'evitar aquests casos de tipus incompatibles \u00e9s la conversi\u00f3 explicita, on hem d'indicar al compilador especificament a quin tipus volem convertir.</p> <pre><code>    void draw()\n    {\n        double d = 100.04; \n        \n        //casting de tipus\n        long l = (long)d;\n        \n        //casting de tipus\n        int i = (int)l; \n        println(\"Valor Double \" + d);\n        \n        //part fraccion\u00e0ria perduda\n        println(\"Valor Long \" + l); \n        \n        //part fraccion\u00e0ria perduda\n        println(\"Valor Int \" + i); \n    } \n</code></pre> <p>La eixida de l'execuci\u00f3 d'aquest codi seria: </p> <ul> <li>Valor Double 100.04</li> <li>Valor Long 100</li> <li>Valor Int 100</li> </ul> Activitat 216. Conversi\u00f3 de tipus <p>Estudia el seg\u00fcent codi i identifica quins tipus de conversi\u00f3 hi veus. Quines s\u00f3n implicites i quines explicites?  \u00c9s possible que el seg\u00fcent codi tinga algun error. En tal cas corregeix-ho. Finalment afegeix codi que genere aleat\u00f2riament un nombre decimal i el passe a enter i mostra el resultat pel terminal.</p> <pre><code>    void setup() \n    { \n        byte b = 100;\n        int i = b;\n\n        double d = 9.99;\n        int n = (int) d;\n\n        char c = 'A';\n        int ascii = c;\n\n        long bigNum = 1_000_000L;\n        short smallNum = (short) bigNum;\n\n        double valor = 5.75;\n        int enter = valor; \n        \n        long gran = 1000000;\n        short petit = gran;  \n\n        float decimal = 4.5;\n        double mesGran = decimal; \n    }\n</code></pre> Activitat 217. Juga amb tipus de dades i conversions <p>Escriu un programa en Processing IDE que faja el seg\u00fcent:     1. Declara una variable int amb un valor qualsevol.     2. Assigna aquest valor a una variable double (sense cast explicit)     3. Declara una variable double amb decimals, i assigna aquest valor a una variable int fent servir conversi\u00f3 explicita (cast)     4. Mostra el resultat per pantalla: tant el valor inicial de les variables com els resultats de les conversions. Afig comentaris adequats en el codi explicant qu\u00e8 passa en cada conversi\u00f3.</p>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#comentaris","title":"Comentaris","text":"<p>Els comentaris a qualsevol llenguatge de programaci\u00f3, s'utilitzen per fer que el codi siga m\u00e9s f\u00e0cil de llegir millorant aix\u00ed el manteniment. Els comentaris s\u00f3n totalment ignorats pel compilador. D'altre banda, els comentaris s\u00f3n part de la documentaci\u00f3 de tot programa. \u00c9s molt important escriure comentaris breus per\u00f2 significatius. Massa text als comentaris produir\u00e0 l'efecte contrari i deixar\u00e0 encara m\u00e9s illegible el codi.</p> <p>Principi en programaci\u00f3</p> <p>\"Un programa s'escriu una vegada per\u00f2 es llig moltes vegades\"</p> <p>En java tenim tres tipus de comentaris:</p> <ul> <li>Comentaris en l\u00ednia: S'utilitzen per comentar parts concretes del codi</li> <li>Comentaris de v\u00e0ries l\u00ednies: Si un programador vol descriure m\u00e9s detalladament un codi m\u00e9s complex i no es pot utilitzar el comentari d'una l\u00ednia perqu\u00e8 requereix m\u00e9s text</li> <li>Comentaris de documentaci\u00f3: Aquest tipus de comentaris ajuda a l'hora de generar documentaci\u00f3 de forma automatitzada per alguns dels IDEs que s'utilitzen a l'actualitat o les eines que porten amb ells. Un exemple d'eina de generar documentaci\u00f3 de refer\u00e8ncia \u00e9s javadoc</li> </ul> <pre><code>// Comentari d'una sola l\u00ednia en Java\n\n/* Comentari de m\u00e9s d'una l\u00ednia\nlinia 1\nlinia 2\n...\nlinia final */\n\n/**\n* Troba la mitjana de tres n\u00fameros!\n* El programa FindAvg implementa una aplicacio que\n* simplement calcula la mitjana de tres enters i els mostra\n* a la eixida per pantalla.\n*\n* @author  Aleix Caminou\n* @version 1.0\n* @since   2020-2-2\n*/\n</code></pre> Activitat 218. Escriu comentaris al codi Problema <p>Visita el seg\u00fcent lloc web sobre comentaris de java i despr\u00e9s amb el codi de l'\u00faltima activitat, posa els seg\u00fcents comentaris: </p> <ul> <li>Un comentari de documentaci\u00f3 a nivell de fitxer explicant que fa l'aplicaci\u00f3.</li> <li>Un comentari de documentaci\u00f3 per m\u00e8tode explicant que fa cada m\u00e8tode.</li> <li>Comentaris de l\u00ednia (tant simple com m\u00faltiple) als llocs que consideres que siga necessari.</li> </ul> <p>Recorda que has de guardar aquest fitxer com a CognomNomAct309.pde per lliurar-lo.</p> <p>Utilitza l'estructura anterior</p> <p>Pots utilitzar el codi de l'activitat anterior com a base de les pr\u00f2ximes activitats o programes que fages en Processing IDE. Tin en compte que els comentaris dels m\u00e8todes draw i setup sempre seran els mateixos o molt similar. B\u00e0sicament el que hauries de fer \u00e9s canviar el comentari de l'aplicaci\u00f3 que ser\u00e0 diferent abans de comen\u00e7ar a picar codi.</p> <p>Recorda que primer has d'esborrar tota la part de la declaraci\u00f3 i inicialitzaci\u00f3 de variables del jugador de b\u00e0squet.  Fes-ho i guarda el fitxer resultant com a estructuraBasica.pde per poder-lo utilitzar quan ho necessites.</p>"},{"location":"Tema%2002.%20El%20llenguatge%20Java/#javadoc","title":"Javadoc","text":"<p>Javadoc \u00e9s una eina que ens facilita la creaci\u00f3 de documentaci\u00f3 de classes java basant-se en all\u00f2 que hem escrit als comentaris. Per poder utilitzar aquesta eina en Processing IDE, primer hem d'anar al men\u00fa Eines --&gt; Gestionar eines i assegurar-nos que tenim instal\u00b7lada l'utilitat com mostra la imatge seg\u00fcent:</p> <p> </p> <p>Si ja tenim l'eina de generaci\u00f3 de documentaci\u00f3 de java instal\u00b7lada, obrim algun projecte que tinga els comentaris de documentaci\u00f3 ben escrits i anem al men\u00fa Eines --&gt; genera JavaDoc i passats uns segons, tindriem ja disponible la documentaci\u00f3 a la carpeta reference que l'eina hauria creat dins de la pr\u00f2pia carpeta del projecte. </p> <p>Com pots observar, la documentaci\u00f3 que genera l'eina javadoc \u00e9s una documentaci\u00f3 en format html en la qual podem navegar i passar d'un fitxer a un altre si el projecte t\u00e9 m\u00e8s d'un fitxer.</p> <p>Aquesta eina ser\u00e0 de molta import\u00e0ncia quan comencem a implementar classes i objectes reutilitzables.</p> Activitat 219. Documentaci\u00f3 javadoc <p>Agafa alguna practica que hages fet durant el curs, comprova que tens els comentaris de documentaci\u00f3 ben escrits i genera amb javadoc la documentaci\u00f3.</p>"},{"location":"Tema%2003.%20Programaci%C3%B3%20Orientada%20a%20Objectes/","title":"Tema 3. Programaci\u00f3 Orientada a Objectes.","text":""},{"location":"Tema%2003.%20Programaci%C3%B3%20Orientada%20a%20Objectes/#introduccio","title":"Introducci\u00f3","text":"<p>La programaci\u00f3 orientada a objectes tamb\u00e9 coneguda com POO \u00e9s el paradigma de programaci\u00f3 que m\u00e9s s\u2019utilitza hui en dia i que permet modelar de manera m\u00e9s eficient la realitat des del punt de vista del programari.</p> <p>La programaci\u00f3 orientada a objectes intenta proporcionar un model de programaci\u00f3 basat en objectes que contenen dades i procediments associats coneguts com a m\u00e8todes a difer\u00e8ncia del disseny procedimental que s'utilitzava en la programaci\u00f3 estructurada. Aquests objectes, que s\u00f3n inst\u00e0ncies de les classes, s\u00f3n tipus abstractes de dades que encapsulen (amaguen) tant les dades com les funcions per accedir-hi.</p> <p>Un dels objectius de la programaci\u00f3 orientada a objectes \u00e9s reflectir la realitat, de forma que els elements d\u2019un programa s\u2019ajusten a elements de la vida quotidiana. </p> <p>Al contrari de la programaci\u00f3 estructurada procedimental cl\u00e0ssica, en POO es dona prioritat a la modelaci\u00f3 de les dades i no als procediments. En un escenari de programaci\u00f3 orientada a objectes, a la fase d'an\u00e0lisi es determinen els diferents actors del programa (objectes) i a partir d'ac\u00ed se li assignen els diferents atributs i accions que pot realitzar.</p> <p>Doncs b\u00e9, a difer\u00e8ncia del paradigma de programaci\u00f3 estructurada, ac\u00ed primer programem els objectes (definirem les classes) amb totes les seues caracter\u00edstiques derivades de la fase d'an\u00e0lisi atributs i tamb\u00e9 el seu comportament (m\u00e8todes) i finalment utilitzariem aquestes classes en forma d'objectes al programa principal.</p> <p> </p> <p>En conclusi\u00f3, en programaci\u00f3 orientada a objectes el que veurem ser\u00e0 com crear classes d'objectes diversos per despr\u00e9s poder utilitzar-los en altres programes per\u00f2... pas a pas.</p> <p>Veiem primer un poc de teoria...</p>"},{"location":"Tema%2003.%20Programaci%C3%B3%20Orientada%20a%20Objectes/#caracteristiques-principals","title":"Caracter\u00edstiques principals","text":"<p>La programaci\u00f3 orientada a objectes permet la creaci\u00f3 de programari cada vegada m\u00e9s complexe a partir d\u2019unitats o blocs de codi reutilitzables. Les propietats principals o caracter\u00edstiques fonamentals del paradigma de programaci\u00f3 orientada a objectes s\u00f3n:</p>"},{"location":"Tema%2003.%20Programaci%C3%B3%20Orientada%20a%20Objectes/#abstraccio","title":"Abstracci\u00f3","text":"<p>Abstraure's \u00e9s a\u00efllar mentalment, considerar separadament (un o diversos atributs o qualitats) d'una cosa. Per exemple abstraure els conceptes m\u00e9s importants d'un discurs, \u00e9s a dir, quedar-se amb el important.</p> <p>En programaci\u00f3 orientada a objectes abstraure\u2019s, l\u2019abstracci\u00f3, seria mostrar \u00fanicament les caracter\u00edstiques essencials, que fa l\u2019objecte i per a que es crea, deixant de banda elements com la implementaci\u00f3.</p> <p>L\u2019abstracci\u00f3 permet representar les caracter\u00edstiques essencials d\u2019un objecte, deixant enrere aquelles que no tenen tanta import\u00e0ncia. A m\u00e9s a m\u00e9s, es centra en l\u2019objecte tal i com el coneixem en la vida real, de forma que ens centrem en all\u00f2 que es capa\u00e7 de fer per\u00f2 no en com ho fa. B\u00e0sicament, definir\u00edem l\u2019abstracci\u00f3 com la forma de descriure una entitat del m\u00f3n real sense importar la complexitat que est\u00e0 present i el poder utilitzar aquesta en qualsevol aplicaci\u00f3.</p> <p> </p>"},{"location":"Tema%2003.%20Programaci%C3%B3%20Orientada%20a%20Objectes/#encapsulament","title":"Encapsulament","text":"<p>L\u2019encapsulament \u00e9s, en altres paraules, l\u2019ocultaci\u00f3 d\u2019informaci\u00f3, de forma que les dades internes d\u2019un objecte estan ocultes al m\u00f3n exterior, nom\u00e9s es coneix d\u2019ell la seua ess\u00e8ncia, \u00e9s a dir, qu\u00e8 podem fer amb ell.</p> <p>Per exemple, amb freq\u00fc\u00e8ncia es desenvolupa codi font o projectes en els que utilitzem la classe out, m\u00e9s concretament el m\u00e8tode println. Out es troba dins de l\u2019espai de noms (namespace) System i no \u00e9s m\u00e9s que una classe d\u2019aquest paquet. Dit en altres paraules. Out \u00e9s una classe i println() \u00e9s un m\u00e8tode de la classe Out.</p> <p> </p>"},{"location":"Tema%2003.%20Programaci%C3%B3%20Orientada%20a%20Objectes/#modularitat","title":"Modularitat","text":"<p>Aquesta propietat fa refer\u00e8ncia a la forma en la que els elements en programaci\u00f3 orientada a objectes es troben organitzats en m\u00f2duls, facilitant aix\u00ed l\u2019encapsulament i abstracci\u00f3 de la informaci\u00f3.</p> <p>La modularitat permet dividir una aplicaci\u00f3 en parts. Aquestes parts han de ser tan independents com puguen de la resta de m\u00f2duls aix\u00ed com tamb\u00e9 de l\u2019aplicaci\u00f3 principal. El motiu pel qual els m\u00f2duls han de ser el m\u00e9s independents possibles de l\u2019aplicaci\u00f3 \u00e9s perqu\u00e8 aix\u00ed es podran reutilitzar en altres aplicacions m\u00e9s endavant.</p> <p>Tots i cadascun d'aquestos elements seran definits en fitxers diferents.</p>"},{"location":"Tema%2003.%20Programaci%C3%B3%20Orientada%20a%20Objectes/#jerarquia-i-herencia","title":"Jerarquia i her\u00e8ncia","text":"<p>La jerarquia \u00e9s la propietat de la programaci\u00f3 orientada a objectes respecte de la relaci\u00f3 o ordre existent entre les distintes classes i objectes. El mecanisme principal per tal d\u2019ordenar les classes als nostres projectes \u00e9s l\u2019her\u00e8ncia. Podem parlar d\u2019her\u00e8ncia entre classes quan elements d\u2019una classe (superclasse) son heretats per una altra o incl\u00f2s els seus m\u00e8todes poden ser sobrecarregats.</p> <p> </p>"},{"location":"Tema%2003.%20Programaci%C3%B3%20Orientada%20a%20Objectes/#polimorfisme","title":"Polimorfisme","text":"<p>Polimorfisme \u00e9s una paraula grega que significa \u00abmoltes formes\u00bb. Aquesta paraula \u00e9s ideal per definir aquesta caracter\u00edstica de la programaci\u00f3 orientada a objectes ja que en POO podem tindre objectes amb el mateix nom que realitzen funcions distintes o implementen codi diferent.</p> <p>El polimorfisme \u00e9s un mecanisme que s\u2019utilitza molt en POO juntament amb l\u2019her\u00e8ncia tal que quan una classe deriva d\u2019una altra hereta les seues caracter\u00edstiques i operacions. A la classe que hereta es pot redefinir qualsevol m\u00e8tode heretat, de forma que en funci\u00f3 de la refer\u00e8ncia a objectes que usem a cada moment s\u2019estar\u00e0 executant un m\u00e8tode o un altre.</p> <p>Un mateix missatge enviat a objectes diferents donar\u00e0 com a resposta eixides diferents, \u00e9s a dir, si tenim diversos objectes amb m\u00e8todes similars, segons es referencie l\u2019un o l\u2019altre objecte el resultat final ser\u00e0 diferent. </p>"},{"location":"Tema%2003.%20Programaci%C3%B3%20Orientada%20a%20Objectes/#classes-i-objectes","title":"Classes i Objectes","text":"<p>Una classe \u00e9s la definici\u00f3 d\u2019un objecte, \u00e9s l\u2019element que descriu els components d\u2019un objecte de forma general. Diem que hem creat un objecte quan donem valors i utilitzem els components definits a la classe.  Per fer una analogia m\u00e9s \"biologia\", una classe \u00e9s l'ADN d'una esp\u00e8cie concreta d'objectes, \u00e9s a dir, si creem diversos objectes d'una mateixa classe podriem dir que eixos objectes comparteixen el mateix ADN.</p> <p>Per exemple, a Processing IDE existeix la classe PVector que \u00e9s una classe per descriure vectors de 2 o 3 dimensions. Un vector \u00e9s una entitat que t\u00e9 magnitud i direcci\u00f3. mentre que la posici\u00f3 es guarda en forma d'atributs x, y en dues dimensions i x,y i z per als vectors tridimensionals.</p> <p>Aquesta classe \u00e9s molt \u00fatil a Processing IDe per representar posici\u00f3, velocitat, direcci\u00f3 o acceleraci\u00f3 entre d'altres.</p> <p>En definitiva, un PVector es caracteritza per:</p> <ul> <li>Tindre una x: Coordenada x de la posici\u00f3 de l'objecte PVector.</li> <li>Tindre una y: Coordenada y de la posici\u00f3 de l'objecte PVector.</li> <li>Tindre una z (3D): Coordenada z de la posici\u00f3 de l'objecte PVector.</li> </ul> <p>Ara b\u00e9, si al nostre programa mostrem informaci\u00f3 d'un objecte PVector concret, les caracter\u00edstiques abans esmentades adopten certs valors. </p> <p>Per exemple: v1 ( - x: 320 - y: 240 - z: 0 )</p> <p>Un altre PVector podria ser el seguent: v2 ( - x: 50 - y: 50 - z: 10 )</p> <p>Aix\u00ed per un costat tenim la classe PVector i per l'altre els dos objectes v1 i v2.</p>"},{"location":"Tema%2003.%20Programaci%C3%B3%20Orientada%20a%20Objectes/#els-constructors-creacio-dobjectes","title":"Els constructors: creaci\u00f3 d'objectes","text":"<p>Arribats a aquest punt ja sabem qu\u00e9 \u00e9s una classe i les seues caracter\u00edstiques principals i tamb\u00e9 sabem que d'una mateixa classe es poden crear tants objectes com necessitem, per\u00f2 com es creen els objectes en POO?. Per tal de crear objectes o instanciar objectes, utilitzem un m\u00e8tode especial que tenen les classes ne POO que es diu constructor.</p> <p>Un constructor \u00e9s un m\u00e8tode especial d'una classe que s'executa automaticament quan es  crea un objecte. S'utilitza per inicialitzar les propietats de l'objecte i establir el seu estat inicial.  Les seues caracter\u00edstiques principals s\u00f3n:</p> <ul> <li>T\u00e9 el mateix nom que la classe.</li> <li>No retorna cap valor, ni tan sols un void.</li> <li>Pot tenir par\u00e0metres per proporcionar valors inicials a les propietats.</li> <li>Pot haver-hi m\u00e9s d'un constructor per classe (constructors sobrecarregats)</li> <li>Si no es defineix cap constructor, el compilador pot generar-ne un per defecte.</li> </ul> <p>Per\u00f2 vejam un exemple amb els nostres PVectors</p> <pre><code>// Instanciaci\u00f3 d'un objecte de la classe PVector\n// PVector idPVector = new PVector();\n\nPVector v1 = new PVector ();         // Creem un objecte PVector v1 amb coordenades (0, 0)\nPVector v2 = new PVector (100, 20);  // Creem un objecte PVector v2 amb coordenades (100, 20)\n</code></pre> <p>Al crear un objecte d'una classe qualsevol tindrem acc\u00e9s al que denominem propietats o atributs i m\u00e8todes de classe.</p>"},{"location":"Tema%2003.%20Programaci%C3%B3%20Orientada%20a%20Objectes/#atributs","title":"Atributs","text":"<p>Els atributs s\u00f3n les caracter\u00edstiques individuals que diferencien un objecte d\u2019un altre i determinen la seua aparen\u00e7a, estat o altres qualitats. Els atributs es desen en variables anomenades variables d\u2019inst\u00e0ncia (un objecte \u00e9s l'inst\u00e0ncia d'una classe) i cada objecte particular pot tindre valors distints per a aquestes variables.  </p> <p>En definitiva, un atribut \u00e9s una caracter\u00edstica concreta d\u2019un objecte de la vida quotidiana. Quan s\u2019estableix un atribut a una classe, es defineix com quan cre\u00e0vem variables als nostres programes estructurats, indicant tipus de dades i nom amb el que el reconeixem. </p> <p>Les variables d\u2019inst\u00e0ncia o atributs tamb\u00e9 anomenades membres s\u00f3n declarades a la classe per\u00f2 els seus valors son canviats i fixats a l\u2019objectes ja que una classe no \u00e9s m\u00e9s que un esquema que defineix com seran les persones al nostre programa.</p> <p>A m\u00e9s de les variables d\u2019inst\u00e0ncia hi ha variables de classe, les quals s\u2019apliquen a la classe i a totes les inst\u00e0ncies. </p> <p>En resum, un atribut en programaci\u00f3 orientada a objectes ve a ser el mateix que una variable en programaci\u00f3 estructurada. Per tal de poder accedir a una propietat d'un objecte concret d'una classe, primer hem d'assegurar-nos que la propietat \u00e9s p\u00fablica (ho deuria posar a la documentaci\u00f3 de la classe) i despr\u00e9s nom\u00e9s hem de escriure l'identificador de l'objecte seguit d'un punt i finalment l'identificador de l'atribut.</p> <pre><code>// Acc\u00e9s a un atribut d'un objecte\n// idObjecte.idAtribut [= valor];\n\nv2.x = 20;   // Canviem el valor de la coordenada x de l'objecte v2\nv1.y = 30;   // Canviem el valor de la coordenada y de l'objecte v1\nprintln(\"V2.X: \" + v2.x);  // Mostre el valor de la coordenada x de l'objecte v2\n</code></pre>"},{"location":"Tema%2003.%20Programaci%C3%B3%20Orientada%20a%20Objectes/#metodes","title":"M\u00e8todes","text":"<p>Els m\u00e8tode s\u00f3n aquelles accions que pot realitzar la classe que estem definint. B\u00e0sicament el que fa un m\u00e8tode \u00e9s modificar l\u2019estat de l\u2019objecte mitjan\u00e7ant el canvi del valor dels seus atributs. De fet la definici\u00f3 dels m\u00e8todes dins d'una classe \u00e9s identica a la creaci\u00f3 de funcions en programaci\u00f3 estructurada.  </p> <p>En gran part del bibliografia al respecte de la crida a m\u00e8todes d'objectes de qualsevol classe tamb\u00e9 se li diu enviament de missatges, \u00e9s a dir, quan cridem a un m\u00e8tode associat a un objecte concret, el que s'est\u00e0 fent realment \u00e9s enviar un missatge a l'objecte en q\u00fcesti\u00f3.</p> <p>Els M\u00e8todes de la classe donen funcionalitat a la classe, \u00e9s a dir, reflecteixen les operacions que aquesta pot fer sobre els atributs. Els m\u00e8todes s\u00f3n similars a les funcions o procediments de la programaci\u00f3 estructurada per\u00f2 orientats a modificar i actuar sobre les propietats d\u2019una classe o millor dit, sobre l'estat d'un objecte concret. </p> <p>Un objecte dona valors concrets als atributs que defineix la classe i utilitza els seus m\u00e8todes. Quan un objecte utilitza un m\u00e8tode concret es diu que est\u00e0 enviant un missatge a l'objecte. D\u2019alguna manera a\u00e7\u00f2 t\u00e9 l\u00f2gica ja que estem donant una ordre a un component que reflecteix la realitat. </p> <p>La classe PVector t\u00e9 m\u00e8todes com: </p> <ul> <li>mag(): que calcula la magnitud del vector. </li> <li>add(PVector): que ens permet sumar objectes de la classe PVector. </li> <li>dist(PVector): que ens dona la dist\u00e0ncia entre dos vectors</li> <li>rotate(int): que gira el vector l'angle que es passa per par\u00e0metre.</li> <li>etc..</li> </ul> <p>Igual que passava amb els atributs, per tal de cridar a un m\u00e8tode d'un objecte (enviar-li un missatge), primer ens hem d'assegurar que el m\u00e8tode \u00e9s p\u00fablic </p> <p><pre><code>// Acc\u00e9s a un m\u00e8tode. Enviament de missatges\n// idObjecte.metode([parametres]);\n\nfloat d = v2.dist(v1);     // Calcula la dist\u00e0ncia entre v2 i v1\nv1.add(v2);                // Suma al vector v1 el vector v2\n</code></pre> Per\u00f2 millor vegem tot a\u00e7\u00f2 amb un exemple concret i repassem tots els conceptes.</p> <p>Primer agafem l'estructura d'un projecte de Processing IDE vist al Tema 01. Introducci\u00f3 a la programaci\u00f3 i deixem nom\u00e9s el codi que necessitarem.</p> <p>El seg\u00fcent pas ja seria comen\u00e7ar a utilitzar objectes de la classe PVector al nostre projecte:</p> <ol> <li>Declarem dos objectes de tipus PVector al bloc de variables globals.</li> <li>Instanciem els dos objectes de la classe PVector al m\u00e8tode setup()</li> <li>Utilitzem els objectes al m\u00e8tode draw</li> </ol> <p>Observa el codi a continuaci\u00f3:</p> <p>\u00das d'objectes de la classe PVector</p> <pre><code>// Variables globals\nPVector v1, v2;       // Declaraci\u00f3 de dos objectes (v1, v2) de la classe PVector\n\n// Funci\u00f3 setup: nom\u00e9s s'executa una vegada a l'inici de l'execuci\u00f3.\nvoid setup () {  \n\tsize(640,480);       // Configura les dimensions de l'aplicaci\u00f3\n\tv1 = new PVector();  // Instanciaci\u00f3 de l'objecte v1\n\tv1.x = 320;          // Acc\u00e9s a l'atribut x de l'objecte v1\n\tv1.y = 240;          // Acc\u00e9s a l'atribut y de l'objectes v2\n\n\tv2 = new PVector(140, 140); // Instanciaci\u00f3 de l'objecte v2\n}\n\n// Funci\u00f3 draw: s'executa 60 vegades per segon (60Hz freq\u00fc\u00e8ncia del monitor)\nvoid draw () { \n\tbackground(255);  // Pinta el fons de blanc\n\t// Per mostrar el que passa amb els PVectors dibuixarem un punt a cada vector\n\tstroke(255,0,0);\n\tstrokeWeight(10);\n\t// Dibuixem els punts al seu lloc\n\tpoint(v1.x, v1.y);\n\tpoint(v2.x, v2.y);\n\n\t// Dibuixem una l\u00ednia que els uneixca\n\tstroke(0);\n\tstrokeWeight(2);\n\tline(v1.x, v2.y, v2.x, v2.y);\n}\n\n// Declaraci\u00f3 d'altres funcions. Opcional\n\n// Esedeveniments\nvoid mousePressed () {}\nvoid keyPressed   () {}\nvoid keyReleased  () {}\nvoid mouseDragged () {}\nvoid mouseMoved   () {}\n</code></pre> Activitat 301. La classe PVector <p>Copia el codi anterior a un projecte nou de Processing (act301) i executa'l. Modifica els valors x i y dels objectes PVector per tal que es dibuixen un al mig de la meitat esquerra de la pantalla i l'altre al mig de la meitat dreta. Els dos han d'estar a la mateixa altura. Fixa't que les dimensions de l'esb\u00f3s s\u00f3n 640 per 480. Crea una variable distancia i utilitza la funci\u00f3 dist de la classe PVector per saber quina dist\u00e0ncia hi ha entre els dos punts. Afegeix el codi seg\u00fcent al teu esb\u00f3s:</p> <pre><code>textWidth(25);\ntext(distancia, 50, 50);\n</code></pre> <p>Investiga el manual de refer\u00e8ncia de Processing IDE i posa la informaci\u00f3 de la dist\u00e0ncia que has afegit abans, al mig de la l\u00ednia i dins d'un requadre amb la vora de color negra.</p> <p>Com pots observar el que passa quan executem el codi \u00e9s que al nostre esb\u00f3s es dibuixen dos punts de color roig i una l\u00ednia que els uneix i el codi que has afegit mostra la dist\u00e0ncia en p\u00edxels entre els dos punts.</p> Activitat 302. Afegeix m\u00e9s vectors <p>Modifica els valors dels vectors com has fet a l'activitat anterior i canvia les posicions. Fes que la l\u00ednia nom\u00e9s es vega quan fem clic al ratoli escrivint el codi necessari al m\u00e8tode mouseClicked. Afegeix un tercer PVector amb identificador v3 i dibuixa les l\u00ednies entre tots els punts. Ara posa un quart PVector i uneix tamb\u00e9 les l\u00ednies.</p> <p>Mostra per a cada l\u00ednia entre els punts mostra la informaci\u00f3 relativa a la dist\u00e0ncia que existeix entre ells.</p> <p>Tamb\u00e9 es valoraran q\u00fcestions est\u00e8tiques del resultat final aix\u00ed com tamb\u00e9 l'\u00fas d'altres funcions o objectes que estiguen disponibles en Processing IDE.</p>"},{"location":"Tema%2003.%20Programaci%C3%B3%20Orientada%20a%20Objectes/#projecte-figures-geometriques","title":"Projecte figures geom\u00e8triques","text":"<p>Per tal de veure les aplicacions pr\u00e0ctiques del que hem explicat en els punts anteriors, desenvoluparem un xicotet projecte en Processing IDE basant-nos en el paradigma de la programaci\u00f3 orientada a objectes. El nostre projecte va a tindre  nom\u00e9s tres figures geom\u00e8triques: el cercle, el triangle i el quadrat, que podrem dibuixar en qualsevol lloc de l'aplicaci\u00f3 que desenvoluparem. Al crear els objectes els indicarem la posici\u00f3 i grandaria entre altres i mentre l'aplicaci\u00f3 estiga executant-se, podrem moure-los per la pantalla, canviar el color i convertir en 3D.</p> <p>1. Quins elements de la nostra aplicaci\u00f3 han de ser desats o s'han de tenir en compte?</p> <ul> <li>El cercle</li> <li>El quadrat</li> <li>El triangle</li> </ul> <p>2. De cada element, quines dades ens interessen?</p> <ul> <li>Cercle: color, posici\u00f3 (x,y), diametre, vora, color de la vora.</li> <li>Quadrat: color, posici\u00f3 (x,y), ample i alt, vora, color de la vora.</li> <li>Triangle: color, posici\u00f3 (x,y), costat, vora, color de la vora.</li> </ul> <p>3. A cada element, quines operacions associarem?</p> <ul> <li>Cercle: canviar de color, convertir en esfera i moure de lloc, mostar opcions</li> <li>Quadrat: canviar de color, convertir en cub i moure de lloc, mostrar opcions</li> <li>Triangle: canviar de color, convertir en pir\u00e0mide i moure de lloc, mostrar opcions</li> </ul> <p>Diagrama de classes</p> <p>En el m\u00f3n de l'enginyeria de programari un diagrama de classes en UML (Unified Modeling Language) \u00e9s un tipus de diagrama est\u00e0tic que descriu l'estructura d'un sistema mostrant les seves classes, atributs i les relacions entre ells.</p> <p>El diagrama de classes que deduir\u00edem de les especificacions anteriors podria ser el seg\u00fcent:</p> <pre>\n            \tclassDiagram\n\tdirection TB\n\tFigura &lt;|-- Triangle\n\tFigura &lt;|-- Quadrat\n\tFigura &lt;|-- Cercle\n\tFigura: PApplet parent\n\tFigura: float x\n\tFigura: float y\n\tFigura: int ample\n\tFigura: int color\n\tFigura: vora\n\tFigura: colorVora\n\tFigura: triDim\n\tFigura: opcions\n\tFigura: mostraOp\n\tFigura: nom\n\tFigura: Figura(PApplet, float, float, String)\n\tFigura: display ()\n\tFigura: canviaColor ()\n\tFigura: setPosicio (float, float)\n\tFigura: getX ()\n\tFigura: getY ()\n\tFigura: getAmpleVora ()\n\tFigura: canvia2D ()\n\tFigura: canvia3D ()\n\tFigura: mostraOpcions ()\n\tFigura: ocultaOpcions ()\n\tFigura: activaOpcions () \n\tFigura: getWidth ()\n\tFigura: setColor (int)\n\tFigura: setAmpleVora (int)\n\tFigura: setWidth (float)\n\tCercle: Cercle (PApplet, float, float, float)\n\tCercle: clicSobre (float, float)\n\tQuadrat: front\n\tQuadrat: back\n\tQuadrat: right\n\tQuadrat: left\n\tQuadrat: top\n\tQuadrat: bottom\n\tQuadrat: Quadrat (PApplet, float, float, float)\n\tQuadrat: clicSobre (float, float)\n\tQuadrat: setPosicio()\n\tQuadrat: setAmpleVora()\n\tQuadrat: canvia2D()\n\tQuadrat: canvia3D()\n\tQuadrat: activaOpcions()\n\tQuadrat: clicSobre()\n\tQuadrat: incialitzaColors()\n\tQuadrat: dibuixaCub3D ()\n\tTriangle: left\n\tTriangle: right\n\tTriangle: Triangle (PApplet, float, float, float)\n\tTriangle: drawTriangle (PVector, PVector, PVector)\n\tTriangle: clicSobre ()\n\tTriangle: puntsDinsTriangle(PVector, PVector, PVector, PVector)\n\t\n\n        </pre> <p>Primer hem de preparar el nostre Processing per tal que es puga u sar aquesta llibreria. Obre Processing IDE i ves a File --&gt; Preferences</p> <p> </p> <p>Com pots observar al di\u00e0leg que s'obre, a la seua part superior es pot saber quina \u00e9s la carpeta dels sketch. Normalment /home/usuari/sketchbook. Seguidament has d'anar a aquesta carpeta i obrir la carpeta libraries que hi trobar\u00e0s com mostra la seg\u00fcent imatge:</p> <p> </p> <p>Finalment descarrega la llibreria Dibuixem i desempaqueta-la a la carpeta abans indicada. Si tot ha anat b\u00e9 a la carpeta libraries trobar\u00e0s una estructura molt semblant a la seg\u00fcent. Les carpetes controlP5, sound i m\u00ednim s\u00f3n llibreries i utilitats instal\u00b7lades des del Processing IDE. No et preocupes si no t'apareixen.</p> <p> \tgraph TD \t\tA[\ud83d\udcc1libraries] --&gt; B[\ud83d\udcc1Dibuixem] \t\tB --&gt; C[\ud83d\udcc1library] \t\tC --&gt; D[\ud83d\udce6controlP5.jar] \t\tC --&gt; E[\ud83d\udce6Dibuixem.jar] \t\tA --&gt; F[\ud83d\udcc1minim] \t\tF --&gt; G[...] \t\tA --&gt; I[\ud83d\udcc1controlP5] \t\tI --&gt; J[...] \t\tA --&gt; K[\ud83d\udcc1sound] \t\tK --&gt; L[...]  </p> <p>Manual de refer\u00e8ncia package Dibuixem</p> <p>Abans de comen\u00e7ar amb les activitats associades al Projecte Figures Geom\u00e8triques, revisa la documentaci\u00f3 de la llibreria:</p> <p>&gt;&gt;&gt; Manual de Refer\u00e8ncia Dibuixem &lt;&lt;&lt;</p> Activitat 303. Crea el projecte Figures Geometriques <p>Copia el codi base d'un projecte en Processing IDE i desa'l com a act303.pde. Afegeix la llibreria dibuixem al projecte a la secci\u00f3 de llibreries amb la l\u00ednia de codi: </p> <pre><code>import Dibuixem.*;\n</code></pre> <p>A la secci\u00f3 de variables globals declara un objecte amb identificador c1 de la classe Cercle. </p> <pre><code>Cercle c1;\n</code></pre> <p>Al m\u00e8tode setup() has de crear l'objecte c1 de la classe Cercle utilitzant el seu constructor.</p> <pre><code>c1 = new Cercle (this, 320, 240, 40); // Creem un cercle a la posici\u00f3 320, 240,\n</code></pre> <p>Al m\u00e8tode draw() fes que es mostre el cercle.</p> <pre><code>c1.display();\n</code></pre> <p>Utilitza el m\u00e8tode setPosicio de l'objecte de la classe Cercle per tal que el cercle es puga moure per la pantalla</p> <pre><code>c1.setPosicio(mouseX, mouseY);\n</code></pre> <p>Com pots observar la part m\u00e9s complicada de l'activitat anterior has sigut configurar el sistema per poder utilitzar la llibreria Dibuixem. Una vegada tens aquesta llibreria instal\u00b7lada ja \u00e9s relativament senzill la seua utilitzaci\u00f3. I el resultat final \u00e9s prou tangible.</p> Activitat 304. Afegeix la resta de figures <p>Crea un projecte que utilitze les tres figures de les quals disposa la nostra llibreria dibuixem.</p> <p> </p> <p>Revisa la documentaci\u00f3 de refer\u00e8ncia de la llibreria Dibuixem i escriu el codi necessari al lloc adequat per tal que les figures tinguen inicialment els colors: roig, groc i verd respectivament.  Has de tindre en compte la funci\u00f3 color() de Processing IDE per cridar al m\u00e8tode que canvia el color de la figura.</p> <p> </p> <p>Ara ha arribat el moment de combinar diferents classes d'objectes en un mateix projecte i comprovar tot el que hem apr\u00e9s fins ara. Preparats?</p> Activitat 305. Combina Dibuixem amb PVectors <p>Com has pogut observar a l'activitat anterior, quan cridavem al constructor de les figures geom\u00e8triques els passavem dos valors num\u00e8rics. Com que ja saps utilitzar la classe PVector. Crea un objecte PVector per a cada figura geom\u00e8trica i utilitza'ls com a par\u00e0metres per establir la posici\u00f3 de les figures al seus constructors.</p> <p>Si has realitzat de forma correcta les activitats anteriors i has interactuat amb el resultat, haur\u00e0s pogut observar com al fer clic sobre una de les figures apareix un xicotet control en el que es pot canviar el color, la grand\u00e0ria i el format (3D o 2D) de la figura etc... Revisa la documentaci\u00f3 de la llibreria Dibuixem i fes la seg\u00fcent activitat.</p> Activitat 306. Maximitza la llibreria Dibuixem <p>En aquesta activitat haur\u00e0s de fer \u00fas de les tres figures que proporciona la llibreria Dibuixem (Cercle, Quadrat i Triangle) i fer que mostren tot el seu potencial.</p> <p>Has d'utilitzar **com a m\u00ednim dues inst\u00e0ncies de cada tipus de figura, i has de fer-les diferents entre elles. Pots variar:</p> <ul> <li>\"La seua posici\u00f3 en pantalla\"</li> <li>\"El seu tamany (mitjan\u00e7ant el constructor o el tauler de controls)\"</li> <li>\"El color\"</li> <li>\"Si es mostren en 2D o en 3D\"</li> <li>Si tenen o no el tauler de control activat\"</li> </ul> <p>Pots inspirar-te en aquest esquema: Pots crear la composici\u00f3 que m\u00e9s t'agrade, sempre que:</p> <ul> <li>Tinga almenys 6 figures.</li> <li>Totes siguen objectes diferents entre si.</li> <li>Mostres l'\u00fas de constructors, m\u00e8todes i atributs p\u00fablics</li> <li>No cal modificar cap classe de la llibreria.</li> </ul> Activitat 307. Reseteja les figures <p>Si has copiat b\u00e9 el codi base en Processing IDE per als teus projectes, haur\u00e0s observat que existeix un m\u00e8tode que es diu KeyPressed i si has revisat la documentaci\u00f3 de la llibreria Dibuixem haur\u00e0s vist que hi ha un m\u00e8tode per restablir l'estat inicial de les figures. </p> <p>Has de vincular al m\u00e8tode keyPressed que quan es premi la tecla 'R' les figures (totes) tornen a l'estat inicial.</p>"},{"location":"Tema%2003.%20Programaci%C3%B3%20Orientada%20a%20Objectes/#propietats-i-metodes-estatics","title":"Propietats i m\u00e8todes est\u00e0tics","text":"<p>La paraula reservada \u00abstatic\u00bb en Java \u00e9s un modificador que en Java es pot aplicar a variables, m\u00e8todes, classes i blocs de codi</p>"},{"location":"Tema%2003.%20Programaci%C3%B3%20Orientada%20a%20Objectes/#variables-estatiques","title":"Variables est\u00e0tiques","text":"<p>Una variable est\u00e0tica (static) \u00e9s una variable que pertany a la classe en la que va ser declarada i s\u2019inicialitza nom\u00e9s una vegada a l\u2019inici de l\u2019execuci\u00f3 del programa, la caracter\u00edstica principal d\u2019aquest tipus de variables \u00e9s que es pot accedir directament amb el nom de la classe sense necessitat d\u2019instanciar un objecte. A banda tamb\u00e9:</p> <ul> <li>\u00c9s una variable que pertany a la classe (variable de classe) i no a l\u2019objecte.</li> <li>Les variables static s\u2019inicialitzen nom\u00e9s una vegada, a l\u2019inici de l\u2019execuci\u00f3. Aquestes variables s\u2019inicialitzaran primer abans de la inicialitzaci\u00f3 de qualsevol variable d\u2019inst\u00e0ncia.</li> </ul>"},{"location":"Tema%2003.%20Programaci%C3%B3%20Orientada%20a%20Objectes/#metodes-estatics","title":"M\u00e8todes est\u00e0tics","text":"<p>Un m\u00e8tode est\u00e0tic nom\u00e9s pot accedir a les variables o tipus de dades est\u00e0tiques i no pot accedir a les dades no est\u00e0tiques.</p> <ul> <li>Un m\u00e8tode est\u00e0tic nom\u00e9s pot accedir a dades est\u00e0tiques. No pot accedir a dades no est\u00e0tiques (variables d\u2019inst\u00e0ncia)</li> <li>Un m\u00e8tode est\u00e0tic pot cridar nom\u00e9s a m\u00e8todes est\u00e0tics i no pot invocar un m\u00e8tode no est\u00e0tic a partir d\u2019ell.</li> <li>Un m\u00e8tode est\u00e0tic es pot accedir directament pel nom de la classe i no es necessita crear un objecte per accedir al m\u00e8tode.</li> <li>Un m\u00e8tode est\u00e0tic no pot fer refer\u00e8ncia a \u00abthis\u00bb o \u00absuper\u00bb</li> </ul>"},{"location":"Tema%2003.%20Programaci%C3%B3%20Orientada%20a%20Objectes/#blocs-estatics","title":"Blocs est\u00e0tics","text":"<p>El bloc est\u00e0tic \u00e9s un bloc d\u2019instruccions dins de la classe (static { ... }) que s\u2019executa quan una classe es carrega per primera vegada en la m\u00e0quina virtual de Java (JVM). B\u00e0sicament un bloc est\u00e0tic inicialitza variables de tipus est\u00e0tic dins d\u2019una classe, de la mateixa forma que un constructor de classe ajuden a inicialitzar les variables d\u2019inst\u00e0ncia, un bloc est\u00e0tic inicialitza les variables tipus static de la classe.</p>"},{"location":"Tema%2003.%20Programaci%C3%B3%20Orientada%20a%20Objectes/#us","title":"\u00das","text":"<p>Aquest tipus de classe est\u00e0tica \u00e9s \u00fatil quan tens funcions que no necessiten informaci\u00f3 espec\u00edfica d'inst\u00e0ncies de la classe. Un exemple com\u00fa s\u00f3n les funcions utilit\u00e0ries (com en el cas de la calculadora), les quals s'utilitzen de manera global i no depenen d'objectes particulars.</p> <p>Aquesta estructura tamb\u00e9 s'utilitza per a altres casos com:</p> <ul> <li>Classes amb constants (per exemple, una classe amb constants com PI o altres valors fixos).</li> <li>Patrons de disseny com el Singleton, on una classe t\u00e9 nom\u00e9s una inst\u00e0ncia.</li> <li>Accions globals, com el registre de logs, que es volin mantenir a tot el sistema sense crear m\u00faltiples inst\u00e0ncies.</li> </ul> Activitat 308. \u00das de m\u00e8todes i atributs est\u00e0tics <p>La classe Figura de la llibreria Dibuixem disposa d'una s\u00e8rie de m\u00e8todes est\u00e0tics: un que ens diu el total de figures creades i un altre que crea una figura de forma aleat\u00f2ria. </p> <p>En aquesta activitat has d'aconseguir que es creen 10 figures aleat\u00f2ries i que aquestes figures fagen \u00fas de tote les seues funcionalitats igual que a les activitats anteriors, en altres paraules, que quan es faja clic sobre alguna de les figures creades aleat\u00f2riament, aparega el tauler d'opcions i siguen  manipulables.</p> <p>D'una altra banda cada vegada que es cree una figura aleat\u00f2ria, s'ha de mostrar per terminal que s'ha creat una figura, quin tipus de figura \u00e9s i el nombre total de figures creades de moment.</p> Activitat 309. Combinaci\u00f3 amb altres llibreries <p>Instal\u00b7la la llibreria Ani que t\u00e9 disponible Processing IDE i combina-la amb la llibreria Dibuixem.</p> <p>Per exemple pots fer que un cercle de la llibreria dibuixem, canvie gradualment el seu ample durant l'execuci\u00f3 de l'aplicaci\u00f3.</p> <pre><code>import de.looksgood.ani.*;\n\nCercle c;\n\nvoid setup () {\n\tc = new Cercle (this, width/2, height/2, 80);\n\tAni.to (c, 1, \"ample\", 220); \n\t// On c \u00e9s el cercle, \n\t// 1 \u00e9s el temps que ha de tardar en fer la transici\u00f3, \n\t// ample \u00e9s l'atribut a modificar \n\t// 220 l'ample final de la figura en acabar la transici\u00f3\n}\n\nvoid draw () {\n\tc.display();\n}\n</code></pre> <p>Tamb\u00e9 pots combinar el m\u00e8tode keyPressed amb la llibreria per tal que a diferents tecles diferents accions.</p>"},{"location":"Tema%2004.%20Estructures%20de%20Control/","title":"Tema 4. Estructures de control","text":""},{"location":"Tema%2004.%20Estructures%20de%20Control/#introduccio","title":"Introducci\u00f3","text":"<p>Com ja es va explicar al tema 1, a la decada dels anys 60, B\u00f6hm i Jacopini escriuen el teorema de la programaci\u00f3 estructurada, basant-se per suposat en part en aquells llenguatges de programaci\u00f3 que ja existien, i arriben a la conclusi\u00f3 qu\u00e8: la sent\u00e8ncia GOTO era una sent\u00e8ncia considerada perjudicial per a la programaci\u00f3 i per entendre els programes escrits en qualsevol llenguatge i tamb\u00e9 que amb nom\u00e9s les estructures seq\u00fcencial, iterativa i condicional era suficient per escriure qualsevol programa.</p>"},{"location":"Tema%2004.%20Estructures%20de%20Control/#estructures","title":"Estructures","text":"<p>El teorema de el programa estructurat \u00e9s un resultat en la teoria de llenguatges de programaci\u00f3. Estableix que tota funci\u00f3 computable pot ser implementada en un llenguatge de programaci\u00f3 que combine nom\u00e9s tres estructures l\u00f2giques. Aquestes tres formes tamb\u00e9 anomenades estructures de control espec\u00edficament s\u00f3n:</p> <ul> <li>Seq\u00fc\u00e8nciaL: execuci\u00f3 d'una instrucci\u00f3 despr\u00e9s d'una altra.</li> <li>Selecci\u00f3 o condicional: execuci\u00f3 d'una de dues instruccions (o conjunts), segons el valor d'una variable booleana.</li> <li>Iterativa, repetitiva o bucles: execuci\u00f3 d'una instrucci\u00f3 (o conjunt) mentre una variable booleana siga 'veritable'. Aquesta estructura l\u00f2gica tamb\u00e9 es coneix com a cicle o bucle.</li> </ul> <p>Aquest teorema demostra que la instrucci\u00f3 GOTO no \u00e9s estrictament necess\u00e0ria i que per a tot programa que l'utilitze existeix un altre equivalent que no fa \u00fas d'aquesta instrucci\u00f3.</p> graph TD     A(Estructures de Control)--&gt;B(Seq\u00fcencial)     A(Estructures de Control)--&gt;C(condicional)     A(Estructures de Control)--&gt;D(Repetitiva)     A(Estructures de Control)--&gt;E(Salt)     C--&gt;F(if)     C--&gt;G(if else)     C--&gt;H(if niat)     C--&gt;I(switch)     D--&gt;J(while)     D--&gt;K(do while)     D--&gt;L(for)     E--&gt;M(break)     E--&gt;N(continue)"},{"location":"Tema%2004.%20Estructures%20de%20Control/#estructura-sequencial","title":"Estructura Seq\u00fcencial","text":"<p>Les ordres d'un programa s'executen per defecte en ordre seq\u00fcencial. El que significa que les instruccions s'executen, com hem comentat abans, una darrere de l'altra en el mateix ordre que apareixen escrites al programa.</p> graph LR     id1((Inici))--&gt;Instrucci\u00f31;     style id1 fill:#0F0     Instrucci\u00f31--&gt;Instrucci\u00f32;     Instrucci\u00f32--&gt;Instrucci\u00f33;     Instrucci\u00f33--&gt;id2([Fi]);     style id2 fill:#F00   <p>L'estructura seq\u00fcencial \u00e9s l'ordre natura d'execuci\u00f3. Les instruccions que formen part d'aquesta estructura s'executen en ordre una a continuaci\u00f3 de l'altra. Al final de cada instrucci\u00f3 hi ha un punt i coma per indicar-li al compilador el final de la sent\u00e8ncia individual.</p> <p>Les instruccions dintre d'una estructura seq\u00fcencial es solen agrupar en blocs ( {...} ) i es codifica de la seg\u00fcent manera:</p> <p>Estructura seq\u00fcencial</p> <pre><code>// Exemple de bloc - estructura seq\u00fcencial\n{\n    Instrucci\u00f31;\n    Instrucci\u00f32;\n    ...\n    Instrucci\u00f3N;\n}\n</code></pre> <p>Abans de passar a l'activitat 401 en la que treballarem l'estructura seq\u00fcencial, caldria recordar que Processing IDE, l'entorn de desenvolupament que estem utilitzant, \u00e9s un entorn de programaci\u00f3 orientat a la programaci\u00f3 d'imatges, animacions, s\u00f2 i dibuix des d'un punt de vista experimental. Per tant les llibreries de les que disposa aquesta eina, tenen un munt de funcions relacionades amb el camp art\u00edstic i matem\u00e0tic. Veiem-ne un breu resum de les m\u00e9s utilitzades:</p> Funcions de dibuix de Processing IDE Prototip Descripci\u00f3 Exemple d'\u00fas <code>point(x, y)</code> Dibuixa un punt en la posici\u00f3 <code>(x, y)</code> <code>point(100, 100);</code> <code>line(x1, y1, x2, y2)</code> Dibuixa una l\u00ednia des de <code>(x1, y1)</code> fins a <code>(x2, y2)</code> <code>line(50, 50, 150, 150);</code> <code>rect(x, y, w, h)</code> Dibuixa un rectangle amb cantonada superior esquerra <code>(x, y)</code> <code>rect(100, 100, 80, 60);</code> <code>square(x, y, s)</code> Dibuixa un quadrat de costat <code>s</code> en la posici\u00f3 <code>(x, y)</code> <code>square(50, 50, 40);</code> <code>ellipse(x, y, w, h)</code> Dibuixa una el\u00b7lipse centrada en <code>(x, y)</code> <code>ellipse(120, 120, 60, 80);</code> <code>circle(x, y, d)</code> Dibuixa un cercle centrat en <code>(x, y)</code> amb di\u00e0metre <code>d</code> <code>circle(200, 200, 50);</code> <code>arc(x, y, w, h, start, stop)</code> Dibuixa un arc dins d\u2019una el\u00b7lipse <code>arc(100, 100, 80, 80, 0, PI);</code> <code>triangle(x1, y1, x2, y2, x3, y3)</code> Dibuixa un triangle amb els tres punts especificats <code>triangle(30, 75, 58, 20, 86, 75);</code> <code>quad(x1, y1, x2, y2, x3, y3, x4, y4)</code> Dibuixa un quadril\u00e0ter amb quatre punts <code>quad(38, 31, 86, 20, 69, 63, 30, 76);</code> <code>beginShape()</code> / <code>endShape()</code> Defineix una forma complexa personalitzada amb v\u00e8rtexs <code>beginShape(); vertex(30, 20); ... endShape();</code> <code>vertex(x, y)</code> Defineix un punt en una forma personalitzada <code>vertex(60, 40);</code> (dins de <code>beginShape</code>) <code>fill(r, g, b)</code> Defineix el color de farciment per a les formes <code>fill(255, 0, 0);</code> <code>stroke(r, g, b)</code> Defineix el color del contorn de les formes <code>stroke(0, 0, 255);</code> <code>noFill()</code> Elimina el color de farciment <code>noFill();</code> <code>noStroke()</code> Elimina el contorn de les figures <code>noStroke();</code> <code>background(r, g, b)</code> Estableix el color de fons del canvas <code>background(240, 240, 240);</code> <code>text(str, x, y)</code> Mostra text en la posici\u00f3 especificada <code>text(\"Hola m\u00f3n\", 100, 200);</code> <code>textSize(size)</code> Defineix la mida del text <code>textSize(32);</code> <code>textAlign(alignX, alignY)</code> Alineaci\u00f3 horitzontal i vertical del text <code>textAlign(CENTER, CENTER);</code> <code>image(img, x, y)</code> Mostra una imatge a la posici\u00f3 <code>(x, y)</code> <code>image(myImage, 0, 0);</code> <p>Veiem a continuaci\u00f3 un exemple codificat en Java amb l'IDE de Processing en el que s'usen algunes de les funcions vistes a la taula anterior.</p> <pre><code>void setup () {\n        size(320,320);   // Estableix les dimensions de la nostra pantalla principal\n        background(255); // Estableix el fons de la pantalla\n        fill(0);         // Color amb el que es dibuixaran les figures.\n    }\n\n    void draw () {\n        point(10,10);            // Dibuixa un punt\n        line(20,20,40,40);       // Dibuixa una l\u00ednia\n        ellipse(100,100,80,80);  // Dibuixa una el\u00b7lipse\n        square(200,200,50);      // Dibuixa un quadrat\n    }\n</code></pre> <p>Per finalitzar veure'm tamb\u00e9 un exemple de l'\u00fas de beginShape, endShape i vertex</p> <pre><code>\n</code></pre> Activitat 401. Dibuixa amb Processing IDE <p>Dibuixa amb processing IDE un punt, una l\u00ednia, un cercle i un quadrat copiant el codi que pots veure a continuaci\u00f3. Despr\u00e9s modifica alguns dels par\u00e0metres de les funcions point, line, ellipse i square i observa el que passa.</p> <pre><code>void setup () {\n    size(320,320);   // Estableix les dimensions de la nostra pantalla principal\n    background(255); // Estableix el fons de la pantalla\n    fill(0);         // Color amb el que es dibuixaran les figures.\n}\n\nvoid draw () {\n    point(10,10);            // Dibuixa un punt\n    line(20,20,40,40);       // Dibuixa una l\u00ednia\n    ellipse(100,100,80,80);  // Dibuixa una el\u00b7lipse\n    square(200,200,50);      // Dibuixa un quadrat\n}\n</code></pre> <p>Ara que ja has vist algunes de les funcions que ens ofereix l'API de Processing per tal de dibuixar, investiga quines altres funcions permet i aplica-les a la seg\u00fcent activitat.</p> Activitat 402. Dibuix lliure amb Processing IDE. ProblemaSoluci\u00f3 <p>Utilitzant altres primitives de dibuix que ens proporciona l'API de Processing IDE, dibuixa alguna cosa concreta. Has de tindre en compte que la majoria de primitives (funcions) s\u00f3n geom\u00e8triques, per tant, et podries inspirar en algun dibuix geom\u00e8tric. Pots buscar per Internet.</p> <p>Descarrega la soluci\u00f3 per al Dibuix lliure amb Processing</p>"},{"location":"Tema%2004.%20Estructures%20de%20Control/#estructures-de-seleccio","title":"Estructures de selecci\u00f3","text":"<p>\u00c9s una de les estructures que permeten modificar l'ordre d'execuci\u00f3 de les instruccions del programa. Una estructura condicional determina si s'executen unes accions o altres segons es compleixi o no una determinada condici\u00f3. La condici\u00f3 que es comprova per decidir si unes instruccions s'executen o no deu ser una expressi\u00f3 booleana, \u00e9s a dir, ha de donar com a resultat un valor boole\u00e0 true o false. </p> <p>Com varem explicar al tema anterior, ens podem trobar les seg\u00fcents variants d'estructura de selecci\u00f3:</p> <ul> <li>Selecci\u00f3 simple</li> <li>Selecci\u00f3 doble</li> <li>Selecci\u00f3 multiple</li> <li>Operador condicional ?</li> </ul>"},{"location":"Tema%2004.%20Estructures%20de%20Control/#seleccio-simple-if","title":"Selecci\u00f3 Simple - if","text":"<p>\u00c9s l'estructura condicional m\u00e9s simple en programaci\u00f3 estructurada. S'utilitza per determinar si una instrucci\u00f3 o bloc d'instruccions s'executa basat en una condici\u00f3. S'avalua la condici\u00f3 i si es true, s'executa la instrucci\u00f3 o bloc d'instruccions associat a la condici\u00f3.</p>     graph LR     id1((Inici))--&gt;Instrucci\u00f31;     style id1 fill:#0F0     Instrucci\u00f31--&gt;Instrucci\u00f32;     Instrucci\u00f32--&gt;Cond1{Condici\u00f3};     Cond1--&gt;|SI|Instrucci\u00f33;     Instrucci\u00f33--&gt;Instrucci\u00f34;     Instrucci\u00f34--&gt;Instrucci\u00f35;     Cond1--&gt;|NO|Instrucci\u00f35;     Instrucci\u00f35--&gt;id2([Fi]);     style id2 fill:#F00  <p>El seu codi en Java seria:</p> <pre><code>Instrucci\u00f31();\nInstrucci\u00f32();\n\nif (condicio) {\n    instrucci\u00f33;\n    Instrucci\u00f34;\n}\nInstrucci\u00f35;\n</code></pre> <p>Al codi anterior s'executarien sempre les instruccions 1 i 2 abans d'avaluar-se la condici\u00f3, en cas que la condici\u00f3 fora avaluada com a true, s'executaria l'estructura seq\u00fcencial que cont\u00e9 les instruccions 3 i 4 i finalment s'executaria la instrucci\u00f3 5 en tot cas. </p> <p>Pel contrari si la condici\u00f3 s'avalua a false no s'executarien les instruccions que cont\u00e9, \u00e9s a dir, 3 i 4 i passaria directament a l'instrucci\u00f3 5.</p> <p>Aplicaci\u00f3 que detecte n\u00fameros senars</p> <pre><code>int num = (int) random(100);\n\nif (num % 2 == 0)\n    println(num + \" \u00e9s parell\");\n\nprintln(\"S'ha acabat l'aplicaci\u00f3\");\n</code></pre>"},{"location":"Tema%2004.%20Estructures%20de%20Control/#seleccio-doble-if-else","title":"Selecci\u00f3 doble - if .. else","text":"<p>Amb aquesta estructura condicional de la programaci\u00f3 estructurada es poden seguir camins distints depenent de si l'avaluaci\u00f3 de la condici\u00f3 \u00e9s true o false. En altres paraules, si la condici\u00f3 \u00e9s true, executaria una instrucci\u00f3 o bloc d'instruccions mentre que si s'avalua a false executaria una altra instrucci\u00f3 o bloc d'instruccions.</p> <p>Observa el diagrama de flux seg\u00fcent:</p> graph LR     id1((Inici))--&gt;Instrucci\u00f31;     style id1 fill:#0F0;     Instrucci\u00f31--&gt;Instrucci\u00f32     Instrucci\u00f32--&gt;C1{Condici\u00f3}     C1--&gt;|SI|Instrucci\u00f33;     Instrucci\u00f33--&gt;Instrucci\u00f34;     C1--&gt;|NO|Instrucci\u00f35;     Instrucci\u00f35--&gt;Instrucci\u00f36;     Instrucci\u00f34--&gt;Instrucci\u00f37;     Instrucci\u00f36--&gt;Instrucci\u00f37;     Instrucci\u00f37--&gt;Instrucci\u00f38;     Instrucci\u00f38--&gt;id2((FI));     style id2 fill:#F00  <p>El seu codi en Java seria</p> <pre><code>instruccio1;\ninstruccio2;\nif (condicio) {\n    instruccio3;\n    instruccio4;\n}\nelse {\n    instruccio5;\n    instruccio6;\n}\ninstruccio7;\ninstruccio8;\n</code></pre> <p>Si ens fixem en el codi anterior, podem trobar dues seq\u00fc\u00e8ncies d'execucio d'instruccions depenent si la condici\u00f3 del 'if' s'avalua 'true' o 'false'. En el primer cas, amb la condici\u00f3 a 'true', s'executarien: instrucci\u00f31, instrucci\u00f32, instrucci\u00f33, instrucci\u00f34, instrucci\u00f37 i instrucci\u00f38. Mentre que si la condici\u00f3 del 'if' s'avaluara a 'false', les instruccions a executar serien: instrucci\u00f31, instrucci\u00f32, instrucci\u00f35, instrucci\u00f36, instrucci\u00f37 i instrucci\u00f38.</p> <pre><code>    int hora;\n\n    void setup () {\n        size (640,480);\n    }\n\n    void draw () {\n        hora = (int)random(0,24);\n\n        if ( hora &gt;= 12)\n            println(\"Encara \u00e9s de mat\u00ed\");\n\n        else\n            println(\"Ja \u00e9s de vesprada\");\n    }\n</code></pre> Activitat 403. Nombres parells i senars amb la funci\u00f3 random() ProblemaSoluci\u00f3 <p>Seguint l'exemple de l'aplicaci\u00f3 que detecta n\u00fameros senars, fes que tamb\u00e9 ens indique en cas contrari, si no \u00e9s parell, que es tracta d'un n\u00famero senar.</p> <pre><code>    int num = (int)random(100);\n\n    if (num % 2 == 0)\n        println(num + \" \u00e9s un n\u00famero parell\");\n\n    else\n        println(num + \" \u00e9s un n\u00famero senar\");\n\n    println(\"Ja s'ha acabat l'aplicaci\u00f3\");\n</code></pre>"},{"location":"Tema%2004.%20Estructures%20de%20Control/#seleccio-niada-if-else-if-else","title":"Selecci\u00f3 niada - if else if else","text":"<p>Si volem avaluar m\u00e9s d'una condici\u00f3 al nostre codi, estariem parlant d'una estructura condicional m\u00faltiple que b\u00e0sicament consisteix en encadenar diversos if..else. A continuaci\u00f3 es pot veure com seria un exemple de condicional m\u00faltiple en diagrama de flux.</p> graph LR     id1((Inici))--&gt;Instrucci\u00f31;     style id1 fill:#0F0;     Instrucci\u00f31--&gt;|NO|C1{Condici\u00f3 1};     C1--&gt;|NO|C2{Condici\u00f3 2};     C2--&gt;|NO|C3{Condici\u00f3 3};     C1--&gt;|SI|Instrucci\u00f32;     Instrucci\u00f32--&gt;Instrucci\u00f33;     C2--&gt;|SI|Instrucci\u00f34;     C3--&gt;|SI|Instrucci\u00f35;     Instrucci\u00f35--&gt;Instrucci\u00f36;     Instrucci\u00f36--&gt;Instrucci\u00f37;     Instrucci\u00f33--&gt;Instrucci\u00f310;     Instrucci\u00f34--&gt;Instrucci\u00f310;     Instrucci\u00f37--&gt;Instrucci\u00f310;     Instrucci\u00f310--&gt;Id2((FI));     style Id2 fill:#F00;  <p>El mateix exemple en Java que teniu a la imatge anterior seria:</p> <pre><code>instruccio1;\n\nif (condicio1) {\n    instruccio2;\n    instruccio3;\n}\nelse if (condicio2) {\n    instruccio4;\n}\nelse if (condicio3) {\n    instruccio5;\n    instruccio6;\n    instruccio7;\n}\nelse {\n    instruccio8;\n    instruccio9;\n}\ninstruccio10;\n</code></pre> <p>Al codi anterior l'\u00fanic que s\u00ed sabem cert \u00e9s que s'executaran les instruccions 1 i 2 i depenent de quina condici\u00f3 s'avalua a true s'executar\u00e0 algun bloc d'instruccions que estan dins de l'estructura condicional. Seguint amb l'exemple de l'hora que hem utilitzat als apartats anteriors veiem com es podria usar una condici\u00f3 m\u00faltiple amb if else:</p> Activitat 404. Condicional niada. Copia i executa a Processing IDE. <pre><code>void setup () {\n    size(640,480);\n}\n\nvoid draw() {\n    int hora = (int)random(0,24);\n\n    if (hora &gt;= 7 &amp;&amp; hora &lt;= 9)\n        println(\"Eres matiner\");\n\n    else if (hora &gt; 9 &amp;&amp; hora &lt;= 12)\n        println(\"Deuries haver esmorzat ja\");\n\n    else if (hora &gt; 12 &amp;&amp; hora &lt;= 15)\n        println(\"Es hora de dinar si no has dinat\");\n\n    else if (hora &gt; 15 &amp;&amp; hora &lt;= 18)\n        println(\"Si no has fet una migdiada oblidat\");\n\n    else\n        println(\"Hora de la cervesa\");\n}\n</code></pre> <p>Copia i executa el codi a Processing IDE. Al final de cada cicle de la funci\u00f3 draw posa un delay de 1 segon per tal que ens done temps a veure el resultat. Recorda tamb\u00e9 de fer un clear() al principi de cada cicle de draw.</p> <p>Modifica el codi per tal d'afegir-li m\u00e9s opcions. Per exemple podries afegir-li que passa entre les 18:00 i les 20:00 o tamb\u00e9 entre les 20:00 i les 22:00...</p> <p> </p>"},{"location":"Tema%2004.%20Estructures%20de%20Control/#activitats-sobre-estructures-de-seleccio","title":"Activitats sobre estructures de selecci\u00f3","text":"<p>Mira i fes les seg\u00fcents activitats per tal de refor\u00e7ar els conceptes vistos sobre les diferents estructures de selecci\u00f3 de la programaci\u00f3 estructurada.</p> Activitat 405. Divisi\u00f3 ProblemaSoluci\u00f3 <p>Escriu un programa en Processing IDE que genere aleat\u00f2riament dos nombres enters i que calcule la seua divisi\u00f3. El programa ens haur\u00e0 d'indicar si la divisi\u00f3 \u00e9s exacta qui \u00e9s el resultat i si no \u00e9s exacta quin \u00e9s el resultat i el residu.</p> <p>Fes que el resultat es mostre el m\u00e9s amigable possible. \u00c9s a dir, intenta no utilitzar el println i utilitza la funci\u00f3 text de l'API de Processing per mostrar el resultat per pantalla enlloc de pel terminal.</p> <p></p> <p>Com a apartat d'ampliaci\u00f3, podries fer que el grandaria de la font fos un poc m\u00e9s gran. A banda si veus algun detall que no t'agrada com funciona, ho pots modificar.</p> <p>Descarrega la soluci\u00f3 al problema de la divisi\u00f3</p> Activitat 406. Divisi\u00f3 per zero i altres problemes ProblemaSoluci\u00f3 <p>L'activitat anterior si t'has fixat, si el divisor \u00e9s menor que el dividend el resultat sempre \u00e9s zero. Seria interessant que es controlara que sempre es dividira el n\u00famero major pel menor.</p> <p>Tamb\u00e9 si s'ha dona el cas, haur\u00e0s pogut comprovar que si el divisor \u00e9s 0 el programa dona error.</p> <p>Millora el programa anterior controlant el que passa quan es vol dividir per zero, mostrant un missatge en el cas que el n\u00famero pel qual s'intenta dividir siga zero. I assegurat tamb\u00e9 que el divisor \u00e9s sempre el n\u00famero major.</p> <p>Compte perqu\u00e8 segurament haur\u00e0s d'usar estructures de selecci\u00f3 niades.</p> <p></p> <p></p> <p>Descarrega la soluci\u00f3 al problema de la divisi\u00f3 per zero</p> Activitat 407. Major, menor o igual ProblemaSoluci\u00f3 <p>Escriu un programa en Processing que genere aleat\u00f2riament dos n\u00fameros i que diga quin \u00e9s el major, quin \u00e9s el menor o si s\u00f3n iguals. \u00c9s a dir, l'aplicaci\u00f3 ha de generar dos n\u00fameros aleatoris, des del 0 fins al 100 per exemple i comprovar la seg\u00fcent casu\u00edstica:</p> <pre><code>- S\u00f3n els dos n\u00fameros iguals?\n- \u00c9s el primer n\u00famero major que el segon?\n- \u00c9s el segon n\u00famero major que el segon?\n</code></pre> <p>Descarrega la soluci\u00f3 al problema dels n\u00fameros majors iguals o menors</p> <p></p> Activitat 408. Difer\u00e8ncia d'anys ProblemaSoluci\u00f3 <p>Escriu un programa en Processing que donat l'any actual(2023) i un any qualsevol que es genere de forma aleat\u00f2ria amb la funci\u00f3 random entre l'any 0 i l'any 2500 i escriga quants anys han passat des d'eixe any o quants anys falten per arribar a eixe any. Per exemple, imagina que l'any aleatori que genera la teua aplicaci\u00f3 \u00e9s l'any 2123, en aquest cas hauria de mostrar el seg\u00fcent missatge: \"Falten 100 anys per arribar a l'any 2123\", si per exemple l'any aleatori fos 2001, el missatge que hauria de mostrar \u00e9s: \"Han passat 22 anys des de l'any 2001\". Si finalment l'any aleatori \u00e9s igual a l'any actual, el missatge podria ser: \"L'any aleatori i l'actual s\u00f3n el mateix any\".</p> <p>Es podrien utilitzar constants en aquesta activitat. Quina?</p> <p></p> <p>Descarrega la soluci\u00f3 al problema de la difer\u00e8ncia d'anys </p> Activitat 409. Millora la difer\u00e8ncia d'anys ProblemaSoluci\u00f3 <p>Igual en les proves que has fet no t'ha passat per\u00f2, t'has preguntat que passa si l'any aleatori \u00e9s exactament un any menys o un any m\u00e9s que l'actual? Si has fet b\u00e9 l'activitat anterior i si l'any aleatori fora per exemple 2022, el teu programa deuria mostrar: \"Han passat un anys des del 2022\", que \u00e9s incorrecte ja que deuria posar: \"Ha passat un any des del 2022\".</p> <p>Millora el programa anterior fent que quan la difer\u00e8ncia siga exactament un any, mostre una frase concreta: \"Nom\u00e9s queda un any per al 2023\" o \"Ha passat un any des del 2002\". En la resta de casos ha de funcionar igual que abans.</p> <p></p> <p>Descarrega la soluci\u00f3 al problema de la millora de la difer\u00e8ncia d'anys </p> Activitat 410. Nombres m\u00faltiples ProblemaSoluci\u00f3 <p>Escriu un programa que genere dos n\u00fameros aleatoris entre el 0 i el 100 i escriga si el n\u00famero major \u00e9s multiple del menor. Per exemple, imagina que el nostre genera els n\u00fameros 6 i 60. Com que 60 \u00e9s major que 6, hem de comprovar si hi ha algun n\u00famero que al multiplicar-lo per 6 done 60. Dit d'una altra manera, si dividim 60 entre 6 el residu \u00e9s zero? En tal cas, si existeix un n\u00famero natural que al multiplicar-lo per 6 dona 60, aleshores podem dir que 60 \u00e9s m\u00faltiple de 6.</p> <p></p> <p>Descarrega la soluci\u00f3 al problema dels nombres m\u00faltiples </p> Activitat 411. Nombre m\u00faltiples amb negatius i zeros ProblemaSoluci\u00f3 <p>A l'activitat anterior, quan generem els nombres de forma aleat\u00f2ria, els resultats podien estar entre 0 i 100, per\u00f2 que passaria si quan generem nombres de forma aleat\u00f2ria el resultat pogu\u00e9s ser negatiu? Com funcionen els m\u00faltiples tenint en compte els n\u00fameros negatius?  </p> <p>Veiem un exemple: numero1 (-30), num2 (-6). \u00c9s -30 m\u00faltiple de -6? Qu\u00e8 dona el residu de l'operaci\u00f3 de dividir -30 entre -6? -30 % -6 = 0. Per tant podem concloure que -6 i -30 s\u00f3n m\u00faltiples.</p> <p>Millora el programa anterior fent que el programa avise quan s'escriguen valors negatius encara que realitze el c\u00e0lcul de la mateixa forma que ho feia abans.</p> <p>Qu\u00e8 passa si algun dels n\u00fameros generats aleat\u00f2riament s\u00f3n zero? I si els dos n\u00fameros aleatoris s\u00f3n zero?</p> <p>Descarrega la soluci\u00f3 al problema dels nombres m\u00faltiples amb negatius i zeros </p> Activitat 412. Comparador de tres n\u00fameros ProblemaSoluci\u00f3 <p>Escriu un programa que donats 3 n\u00fameros (creats aleat\u00f2riament) ens diga si s\u00f3n els tres iguals, dos s\u00f3n iguals o cap \u00e9s igual. Analitzem amb m\u00e9s profunditat el problema. Quants s\u00f3n els escenaris que ens podem trobar amb tres n\u00fameros aleatoris?</p> <pre><code>- Els tres n\u00fameros s\u00f3n iguals.\n- El primer n\u00famero i el segon s\u00f3n iguals.\n- El primer n\u00famero i el tercer s\u00f3n iguals.\n- El segon n\u00famero i el tercer s\u00f3n iguals.\n- Cap nombre \u00e9s igual.\n</code></pre> <p></p> <p>Descarrega la soluci\u00f3 al problema del comparador </p> Activitat 413. Any bixest ProblemaSoluci\u00f3 <p>Escriu un programa que genere un any aleatori de 0 a 2021 i ens diga si aquest \u00e9s bixest o no. Cal recordar que els anys bixests s\u00f3n m\u00faltiples de 4, per\u00f2 no s\u00f3n m\u00faltiples de 100 i s\u00ed s\u00f3n m\u00faltiples de 400. Per exemple: 2012 \u00e9s bixest, 2010 no ho \u00e9s, 2000 s\u00ed que ho es per\u00f2 1900 no ho \u00e9s. Pots basar-te en el seg\u00fcent codi.</p> <p> </p> <p></p> <p>Descarrega la soluci\u00f3 al problema de l'any bixest </p>"},{"location":"Tema%2004.%20Estructures%20de%20Control/#seleccio-multiple-switch-case","title":"Selecci\u00f3 m\u00faltiple - switch case","text":"<p>La sent\u00e8ncia de control 'switch' \u00e9s una altra forma de codificar la condici\u00f3 m\u00faltiple que hem vist a l'apartat anterior per\u00f2 m\u00e9s senzilla de visualitzar a primer cop d'ull. Fixa't en la imatge seg\u00fcent:</p> graph LR     id1((Inici))--&gt;Instrucci\u00f31;     style id1 fill:#F00;     Instrucci\u00f31--&gt;C1{Condici\u00f3 1};     C1--&gt;|A|Instrucci\u00f32;     C1--&gt;|B|Instrucci\u00f33;     C1--&gt;|C|Instrucci\u00f34;     Instrucci\u00f32--&gt;D(fa:fa-spinner);     Instrucci\u00f33--&gt;D;     Instrucci\u00f34--&gt;D;     D--&gt;Instrucci\u00f35;     Instrucci\u00f35--&gt;id3((FI));      style id3 fill:#0F0;       <p>I el codi en Java seria:</p> <pre><code>switch (condicio) {\n    case 1:\n        // Instruccions\n    break;\n\n    case 2:\n        // INstruccions 2\n    break;\n    \n    default:\n        // Instruccions per defecte\n    break;\n}\n</code></pre> <p>Un altre exemple m\u00e9s clar que diu el nom del mes a partir d'un n\u00famero entre 1 i 12</p> <pre><code>    //Programa que demana un numero i diu quin mes \u00e9s\n\n    \n    int mes;\n    void setup () {\n        size(640,480);\n    }\n    \n    void draw () {\n        mes = (int)random(1,13);\n\n        switch (mes) {  //inicio del switch\n            case 1:  println (\"GENER\"    ); break;\n            case 2:  println (\"FEBRER\"   ); break;\n            case 3:  println (\"MAR\u00c7\"     ); break;\n            case 4:  println (\"ABRIL\"    ); break;\n            case 5:  println (\"MAIG\"     ); break;\n            case 6:  println (\"JUNY\"     ); break;\n            case 7:  println (\"JULIOL\"   ); break;\n            case 8:  println (\"AGOST\"    ); break;\n            case 9:  println (\"SETEMBRE\" ); break;\n            case 10: println (\"OCTUBRE\"  ); break;\n            case 11: println (\"NOVEMBRE\" ); break;\n            case 12: println (\"DESEMBRE\" ); break;\n            default: println (\"No v\u00e0lid\" );                      \n        }\n    }\n</code></pre> Activitat 414. Copia i adapta el codi anterior ProblemaSoluci\u00f3 <p>Escriu el programa anterior per a Processing i comprova que funciona. Afegeix el codi necessari per tal que a banda de dir-te quin mes \u00e9s, et diga tamb\u00e9 a quina estaci\u00f3 de l'any estem.</p> <p></p> <p>En l'exemple anterior el que s'ha fet ha sigut generar aleat\u00f2riament un n\u00famero enter entre 1 i 12 i despr\u00e9s mostrar per pantalla: primer el n\u00famero del mes i despr\u00e9s el nom.</p> <p>Descarrega la soluci\u00f3 al problema dels mesos i les estacions</p> Activitat 415. Dies de la setmana ProblemaSoluci\u00f3 <p>Escriu un programa que donat un n\u00famero entre 1 i 7 generat de forma aleat\u00f2ria, et diga quin dia de la setmana \u00e9s. 1 Dilluns, 2 Dimarts etc..</p> <p></p> <p>Descarrega la soluci\u00f3 al problema dels dies de la setmana</p> Activitat 416. Passar d'if a switch ProblemaSoluci\u00f3 <p>Observa el codi a continuaci\u00f3 que explica com es passa de if - else a switch - case i passa l'activitat 323 de l'apartat if..else a switch..case</p> <pre><code>// Exemple de switch convertit a if\nswitch(variable) {\n    case valor1:\n        // Accions 1\n        break;\n    case valor2:\n        // Accions 2\n        break;\n    case valor3:\n        // Accions 3\n        break;\n    default:\n        // Accions default\n}\n\n// El codi anterior utilitzant if\nif (variable == valor1 )\n    // Accions 1\nelse if (variable == valor2)\n    // Accions 2\nelse if (variable == valor3)\n    // Accions 3\nelse\n    //Accions default\n</code></pre> <p>Descarrega la soluci\u00f3 al problema de passar d'if a switch .. else</p> Activitat 417. Quants dies t\u00e9 el mes ProblemaSoluci\u00f3 <p>Escriu un programa que genere de forma aleat\u00f2ria el mes i ens mostre per pantalla el total de dies que t\u00e9 eixe mes.</p> <p></p> <p>Descarrega la soluci\u00f3 al problema dels dies del mes</p> Activitat 418. Figures geom\u00e8triques ProblemaSoluci\u00f3 <p>Escriure un programa que demane primer de quina figura geom\u00e8trica es vol calcular el perimetre. Triangle (t), Quadrat (q), Cercle (c) o rectangle (r) i despr\u00e9s mostre el c\u00e0lcul corresponent. Totes aquelles dades necess\u00e0ries per poder realitzar els diferents c\u00e0lculs es generaran de forma aleat\u00f2ria quan s'haja escollit de quina figura es vol calcular el perimetre. </p> <p>Per exemple, imagina que l'usuari tria el triangle, per saber el perimetre del triangle necessitem saber quant mesura el seu costat i multiplicar-lo per 3, per tant, ser\u00e0 la mesura del costat el que es generar\u00e0 de forma aleat\u00f2ria.</p> <p>Descarrega la soluci\u00f3 al problema de les figures geom\u00e8triques</p>"},{"location":"Tema%2004.%20Estructures%20de%20Control/#estructures-de-repeticio","title":"Estructures de repetici\u00f3","text":"<p>Imaginem que tenim un vector d'enters de 100 elements i volem trobar un nombre concret. Usant les estructures condicionals ho podr\u00edem fer.</p> <pre><code>int [] arrayNumeros;               // Declarem un array d'enters\narrayNumeros = new int [100];      // Reservem espai en mem\u00f2ria per 100 elements\ninicialitzaNumeros(arrayNumeros);  // Emplenem de forma aleat\u00f2ria l'array\n\n// Comencem la recerca del n\u00famero 10 per exemple\nif ( array[0] == 10 )\n    println(\"N\u00famero trobat a la posici\u00f3 0\");\n\nelse if (array[1] == 10)\n    println(\"N\u00famero trobat a la posici\u00f3 1\");\n\nelse if (array[2] == 10)\n    println(\"N\u00famero trobat a la posici\u00f3 2\");\n\nelse if (array[3] == 10)\n    println(\"N\u00famero trobat a la posici\u00f3 3\");\n\nelse if (array[4] == 10)\n    println(\"N\u00famero trobat a la posici\u00f3 4\");\n\nelse if (array[5] == 10)\n    println(\"N\u00famero trobat a la posici\u00f3 5\");    \n\n// I aix\u00ed fins 100 ... \n</code></pre> <p>Com podeu observar, nom\u00e9s he necessitat escriure codi per als 5 primers elements del nostre array per adondar-me que aquest codi \u00e9s totalment ineficient i t\u00e9 un manteniment molt complicat. Imagineu un array amb 1000 elements i que ho haurem de codificar com hem fet abans.</p> <p>Les estructures repetitives permetrien rec\u00f3rrer l'array de principi a final sense necessitat d'escriure tant de codi.</p> <p>Veiem els seg\u00fcents exemples.</p>"},{"location":"Tema%2004.%20Estructures%20de%20Control/#while","title":"while","text":"<p>Mentre la condici\u00f3 (tamb\u00e9 anomenada condici\u00f3 d'eixida) siga avaluada com a true, s'executarien les instruccions que hi ha dins del bucle while. </p> graph LR     Id1((Inici))--&gt;Instrucci\u00f31;     style Id1 fill:#0F0;     Instrucci\u00f31--&gt;D(fa:fa-spinner);      D--&gt;C1{Condici\u00f3};     C1--&gt;|V|Instrucci\u00f32;     Instrucci\u00f32--&gt;P2((Fi));     style P2 fill:#F00;     C1--&gt;|F|D;  <p>En aquest tipus de bucle, el bloc d'instruccions del bucle while, es poden executar zero o m\u00e9s vegades.</p> <p>Els passos que representen el diagrama anterior s\u00f3n: 1. S'executa la instrucci\u00f3 1 2. S'avalua la condici\u00f3  3. Si la condici\u00f3 \u00e9s true, s'executa el bloc d'instruccions del bucle i es torna a avaluar la condici\u00f3. 4. En cas que la condici\u00f3 s'avalue com a false, passar\u00edem a executar la instrucci\u00f3 2.</p> <p>Com far\u00edem el codi necessari per rec\u00f3rrer el nostre array de 100 elements fins trobar el n\u00famero que busquem?. Mira el codi seg\u00fcent:</p> <pre><code>int i = 0;   // Inicialitzem una variable que ens servir\u00e0 de comptador.\nwhile (i &lt; 100) {\n    if (arrayNumeros[i] == 10)\n        println(\"N\u00famero trobat a la posici\u00f3 \" + i);\n    i ++; // Important incrementar el comptador o entrar\u00edem en un bucle infinit.\n}\n</code></pre>"},{"location":"Tema%2004.%20Estructures%20de%20Control/#do-while","title":"do .. while","text":"<p>Molt semblant al bucle while per\u00f2 amb la difer\u00e8ncia que el bloc s'instruccions que cont\u00e9 l'estructura s'executaria almenys una vegada ja que la condici\u00f3 d'eixida s'avalua despr\u00e9s d'executar les instruccions.</p> graph LR     Id1((Inici))--&gt;Instrucci\u00f31;     style Id1 fill:#F00;     Instrucci\u00f31--&gt;P1(fa:fa-spinner);     P1--&gt;Instrucci\u00f32;     Instrucci\u00f32--&gt;C1{Condici\u00f3};     C1--&gt;|V|Instrucci\u00f33;     C1--&gt;|F|P1;     Instrucci\u00f33--&gt;Id2((Fi));     style Id2 fill:#0F0;       <p>Els passos que representen el diagrama anterior s\u00f3n:</p> <ol> <li>S'executa la instrucci\u00f3 1</li> <li>S'executen les instruccions que cont\u00e9 el bloc </li> <li>S'avalua la condici\u00f3 </li> <li>Si la condici\u00f3 \u00e9s true, s'executa el bloc d'instruccions del bucle i es torna a avaluar la condici\u00f3.</li> <li>En cas que la condici\u00f3 s'avalue com a false, passar\u00edem a executar la instrucci\u00f3 2.</li> </ol> <p>A l'exemple seg\u00fcent podem veure el codi necessari per buscar un n\u00famero dins d'un array d'enters (Ja veurem m\u00e9s endavant que \u00e9s un array).</p> <pre><code>int i = 0;   // Inicialitzem una variable que ens servir\u00e0 de comptador.\ndo {\n    if (arrayNumeros[i] == 10)\n        println(\"N\u00famero trobat a la posici\u00f3 \" + i);\n    i ++; // Important incrementar el comptador o entrar\u00edem en un bucle infinit.\n}\nwhile (i &lt; 100);\n</code></pre>"},{"location":"Tema%2004.%20Estructures%20de%20Control/#bucle-for","title":"bucle for","text":"<p>La m\u00e9s complicada de comprendre per\u00f2 tamb\u00e9 possiblement la m\u00e9s utilitzada. Mirem un exemple.</p> graph LR     Id1((Inici))--&gt;Instrucci\u00f31;     style Id1 fill:#0F0;     Instrucci\u00f31--&gt;Inicialitzaci\u00f3;     Inicialitzaci\u00f3--&gt;D(fa:fa-spinner);      D--&gt;C1{Condici\u00f3}     C1--&gt;|NO|Instrucci\u00f32;     C1--&gt;|SI|Instruccions;     Instruccions--&gt;Actualitzaci\u00f3;     Actualitzaci\u00f3--&gt;D;     Instrucci\u00f32--&gt;Id3([Fi])     style Id3 fill:#F00;  <p>I els passos serien:</p> <ol> <li>Executem instrucci\u00f3 1 (aliena al bucle for)</li> <li>Inicialitzaci\u00f3</li> <li>Avaluaci\u00f3 de la condici\u00f3</li> <li>Si la condici\u00f3 \u00e9s true</li> <li>Executem les instruccions del bucle for</li> <li>Actualitzem \u00edndex</li> <li>Si la condici\u00f3 es false eixim del bucle i executem instrucci\u00f3 2</li> </ol> <pre><code>for (int i = 0; i &lt; 100; i ++ ) { \n    if (arrayNumeros[i] == 10)\n        println(\"N\u00famero trobat a la posici\u00f3 \" + i);\n}\n</code></pre> <p>Al codi anterior:</p> <ol> <li>Inicialitzaci\u00f3: int i = 0;</li> <li>Avaluaci\u00f3 de la condici\u00f3: \u00e9s i &lt; 100 ?</li> <li>Actualitzaci\u00f3: i ++</li> </ol> Dibuixar amb bucles <p>Observa el seg\u00fcent codi i raona'l</p> <pre><code>void setup() {\n    size(320,240);\n}\n\nvoid draw () {\n    for (int i = 0; i &lt; 10; i ++) {\n        for (int j = 0; j &lt; i; j++ )\n            circle (10+j*20, 10+i*20, 20);\n    }\n}\n</code></pre> <p>El resultat d'aquest codi seria: </p> Activitat 419. Dibuixa la pir\u00e0mide i la pir\u00e0mide invertida ProblemaSolucio <p>Fes un programa semblant al de l'activitat anterior per\u00f2 a la inversa, \u00e9s a dir, cinc cercles a la primera l\u00ednia, quatre a la segona, tres a la tercera, dos a la quarta i, finalment, un a la cinquena l\u00ednia.</p> <p></p> <p>Descarrega la soluci\u00f3 al problema de dibuixar la pir\u00e0mide invertida</p> Activitat 420. Dibuixa les dues diagonals (500x500) ProblemaSoluci\u00f3 <p>Fes un programa en Processing IDE que dibuixe les dues diagonals sobre una pantalla de 500 pixels per 500 pixels. Des del punt (0,0) fins al (500,500) i l'altra que va des del punt (500,0) fins al (0,500). Si a una diagonal li dibuixes quadrats, a l'altra dibuixa-li cercles.</p> <p></p> <p>Descarrega la soluci\u00f3 al problema de les dues diagonals</p> Activitat 421. Dues diagonals 640x480 ProblemaSoluci\u00f3 <p>Millora l'activitat anterior i dibuixa les dues diagonals per\u00f2 a una pantalla de 640 pixels per 480 pixels.</p> <p>Descarrega la soluci\u00f3 al problema de les dues diagonals 640x480</p> Activitat 422. whiles i for ProblemaSoluci\u00f3 <p>Fes l'activitat anterior canviant els bucles while per for i a l'inrev\u00e9s.</p> <p>Descarrega la soluci\u00f3 al problema del canvi de while per for</p> Activitat 423. Optimitzaci\u00f3 del codi ProblemaSoluci\u00f3 <p>Seria possible fer l'activitat 336 per\u00f2 nom\u00e9s utilitzant un bucle?</p> <p>Encara no disponible.</p>"},{"location":"Tema%2004.%20Estructures%20de%20Control/#estructures-de-salt","title":"Estructures de salt","text":"<p>En java finalment ens podem trobar amb les instruccions break i continue que s\u00f3n sent\u00e8ncies que modifiquen el flux normal d'execuci\u00f3 en bucles i estructures de control. Poden ser \u00fatils per a eixir d'un bucle prematurament en casos particulars o per ometre una iteraci\u00f3 en particular.</p>"},{"location":"Tema%2004.%20Estructures%20de%20Control/#break","title":"break","text":"<p>La sent\u00e8ncia break s'utilitza per sortir immediatament d'un bucle (for, while o do-while). Quan s'executa una sent\u00e8ncia break, el control del programa surt del bucle i continua amb l'execuci\u00f3 del codi que hi ha despr\u00e9s del bucle.</p> <p>Quan utilitzar break: - Quan es compleix una condici\u00f3 espec\u00edfica i ja no \u00e9s necessari seguir iterant. - Per evitar iteracions innecess\u00e0ries quan ja s'ha trobat el que es busca.</p> <pre><code>int [] numeros = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\nfor (int i=0; i &lt; 9; i ++) {\n    if (numeros[i] == 7) {\n        print(\"S'ha trobat el n\u00famero 7!\")\n        break  // Eixim del bucle perqu\u00e8 ja hem trobat el n\u00famero 7\n    }\n    println(numero)\n}\n</code></pre> <p>En aquest exemple, el bucle s'atura quan es troba el n\u00famero 7, evitant iteracions innecess\u00e0ries sobre la resta dels n\u00fameros.</p>"},{"location":"Tema%2004.%20Estructures%20de%20Control/#continue","title":"continue","text":"<p>La sent\u00e8ncia continue s'utilitza per saltar l'iteraci\u00f3 actual d'un bucle i continuar amb la seg\u00fcent iteraci\u00f3. Quan s'executa una sent\u00e8ncia continue, el control del programa torna al comen\u00e7ament del bucle per a la seg\u00fcent iteraci\u00f3, sense executar les l\u00ednies de codi restants de l'iteraci\u00f3 actual.</p> <p>Quan utilitzar continue: - Quan es compleix una condici\u00f3 espec\u00edfica i es vol saltar a la seg\u00fcent iteraci\u00f3 del bucle. - Per ometre certes iteracions basades en una condici\u00f3.</p> <p><pre><code>// Suposem que tenim una llista de n\u00fameros i volem imprimir tots els n\u00fameros excepte el 7\nint [] numeros = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\nfor (int i=0; i &lt; 9; i++) {\n    if (numeros[i] == 7)\n        continue;  // Saltem aquesta iteraci\u00f3 perqu\u00e8 no volem imprimir el n\u00famero 7\n    println(numero);\n}\n</code></pre> En aquest exemple, quan el n\u00famero \u00e9s 7, la sent\u00e8ncia continue fa que el bucle salti directament a la seg\u00fcent iteraci\u00f3, evitant que es mostre el n\u00famero 7. Conclusi\u00f3</p> <p>En resum</p> <ul> <li><code>break</code> s'utilitza per sortir completament d'un bucle quan es compleix una condici\u00f3 espec\u00edfica.</li> <li><code>continue</code> s'utilitza per saltar l'iteraci\u00f3 actual i passar a la seg\u00fcent quan es compleix una condici\u00f3 espec\u00edfica.</li> </ul> Activitat 424. Analitzar una llista de nombres <p>Crear un programa en Java que itere sobre una llista de nombres sencers i fa\u00e7a diferents operacions utilitzant les sent\u00e8ncies break i continue.  </p> <p>Al codi seg\u00fcent tens un programa en Processing IDE que cont\u00e9 una llista de 20 nombres que s'han generat de forma aleat\u00f2ria.  - Part 1 (break): Escriu el codi que busque el n\u00famero 15 a la llista, si el troba mostra per pantalla un missatge i ix del bucle. - Part 2 (continue): Escriu el codi necessari per tal que es mostren tots els n\u00fameros menys els parells. - Part 3. Escriure un codi que busqui el primer nombre parell major que 10. Utilitzar continue per saltar els n\u00fameros senars. Utilitzar break per sortir del bucle quan es trobi el primer nombre parell major que 10 i imprimir-lo.</p> <pre><code>    int [] arrayNumeros;\n\n    void setup () {\n        arrayNumeros = new int [20];\n        for (int i=0; i &lt; 20; i ++) \n            arrayNumeros[i] = (int)random(1,100);\n    }\n\n    void draw () {\n    \n    }\n</code></pre> Activitat 425. Combinaci\u00f3 d'estructures <p>Crear un programa en Processing que dibuixi un patr\u00f3 de cercles en una graella, per\u00f2 que ometi certs cercles segons unes condicions espec\u00edfiques utilitzant les sent\u00e8ncies break i continue.</p> <p>Configuraci\u00f3 Inicial:     - Configurar la mida de la finestra.     - Definir el di\u00e0metre dels cercles i la separaci\u00f3 entre ells.</p> <p>Dibuix de la Graella de Cercles:     - Utilitzar dos bucles for imbricats per dibuixar una graella de cercles.     - Utilitzar una estructura de selecci\u00f3 per decidir si es dibuixa o no un cercle segons la seva posici\u00f3.</p> <p>Condicions per Ometre Cercles:     - Si la suma dels \u00edndexs dels bucles (x, y) \u00e9s un m\u00faltiple de 5, ometre el cercle (utilitzar continue).     - Si s'arriba al cercle de la posici\u00f3 (7, 7), aturar el dibuix completament (utilitzar break).</p>"},{"location":"Tema%2004.%20Estructures%20de%20Control/#control-dexcepcions","title":"Control d'excepcions","text":"<p>Un dels grans reptes en el desenvolupament del programari \u00e9s la gesti\u00f3 de les errades. No importa com de ben planificat estiga un projecte ni com d\u2019eficient siga l\u2019equip de desenvolupament: sempre poden apareixer errors, especialment en temps d\u2019execuci\u00f3. Alguns exemples t\u00edpics s\u00f3n:</p> <ul> <li>Divisions per zero</li> <li>Acc\u00e9s fora dels l\u00edmits d'un array</li> <li>Fitxers inexistents o bloquejats</li> <li>Esgotament de mem\u00f2ria</li> <li>Errors l\u00f2gics en condicions o bucles</li> </ul> <p>Java proporciona un mecanisme robust anomenat gesti\u00f3 d\u2019excepcions, que permet capturar i controlar aquests errors de forma segura i estructurada, evitant que el programa es tanque sobtadament.</p>"},{"location":"Tema%2004.%20Estructures%20de%20Control/#que-son-les-excepcions","title":"Qu\u00e8 s\u00f3n les excepcions?","text":"<p>En Java, les excepcions s\u00f3n errors que poden apareixer durant l'execuci\u00f3 del programa. Quan ocorre una situaci\u00f3 inesperada (com dividir per zero, accedir a una posici\u00f3 inexistent d'un array, o llegir un fitxer que no existeix), Java genera una excepci\u00f3.</p> <p>Una excepci\u00f3 \u00e9s un objecte que representa una situaci\u00f3 an\u00f2mala que ocorre durant l\u2019execuci\u00f3 d\u2019un programa. Quan es produeix un error, Java pot llen\u00e7ar (throw) una excepci\u00f3 i, si est\u00e0 previst, el codi pot capturar-la (catch) i actuar en conseq\u00fc\u00e8ncia.</p> <p>Aquest mecanisme ens permet:</p> <ul> <li>Interrompre l'execuci\u00f3 normal</li> <li>Tractar l\u2019error amb codi espec\u00edfic</li> <li>Recuperar-se del problema sense que el programa falle completament</li> </ul> <p>Per evitar que el programa es tanque sobtadament, podem capturar i gestionar aquests errors amb les estructures <code>try</code>, <code>catch</code> i opcionalment <code>finally</code>.</p> <p>Sintaxi b\u00e0sica</p> <pre><code>try {\n    // Codi que pot provocar un error\n} \ncatch (Exception e) {\n    // Codi per gestionar l'error\n} \nfinally {\n    // (Opcional) Codi que sempre s'executa\n}\n</code></pre> <p>Resum</p> <ul> <li><code>try</code>: cont\u00e9 el codi que es susceptible de provocar una excepci\u00f3.</li> <li><code>catch</code>: captura i gestiona l'excepci\u00f3 en cas que es produisca.</li> <li><code>finally</code>: s'executa sempre, hi haja o no excepci\u00f3 (tancar fitxers, alliberar mem\u00f2ria)</li> <li><code>throw</code>: llen\u00e7a una excepci\u00f3 de forma manual</li> <li><code>throws</code>: declara que un m\u00e8tode pot llen\u00e7ar una excepci\u00f3.</li> <li>Les excepcions permeten capturar i gestiona errors de forma controlada.</li> <li>Utilitzem try-catch-finally per evitar que un programa falle sobtadament.</li> <li>Podem crear excepcions pr\u00f2pies per controlar situacions espec\u00edfiques.</li> <li>\u00c9s fonamental en programes robustos i fiables.</li> </ul> <p>Exemple</p> <pre><code>int [] numeros = {1, 2, 3};\n\ntry {\n    println(numeros[3]);  // Acc\u00e9s incorrecte: \u00edndex fora de l\u00edmits\n}\ncatch (ArrayIndexOutOfException e) {\n    println(\"Error: has intentat accedir a una posici\u00f3 inexistent de l'array\");\n}\n</code></pre>"},{"location":"Tema%2004.%20Estructures%20de%20Control/#cicle-de-funcionament-duna-excepcio","title":"Cicle de funcionament d'una excepci\u00f3","text":"<ol> <li>El bloc <code>try</code>s'executa</li> <li>Si hi ha un error, es genera (throw) una excepci\u00f3.</li> <li>El control passa al bloc <code>catch</code>que la pot capturar</li> <li>Finalment, si existeix, s'executa el bloc <code>finally</code></li> </ol> <p>!!!example \"Exemple avan\u00e7at amb <code>throws</code> i <code>throw</code> <pre><code>public void escolta() throws Exception {\n    // Simula una situaci\u00f3 que genera una excepci\u00f3\n    throw new Exception(\"Error detectat en escolta()\");\n}\n\nvoid setup() {\n    try {\n        escolta();\n    } catch (Exception e) {\n        println(\"Excepci\u00f3 capturada: \" + e.getMessage());\n    }\n}\n</code></pre></p>"},{"location":"Tema%2004.%20Estructures%20de%20Control/#excepcions-niades","title":"Excepcions niades","text":"<p>\u00c9s possible tindre blocs <code>try</code>dins d'altres blocs <code>try</code>, \u00fatil per a controlar errors en diferents nivells.</p> <p>Exemple</p> <pre><code>void setup() {\n    try {\n        escolta();\n\n        try {\n            tornaAEscoltar();\n        } catch (Exception e) {\n            println(\"Excepci\u00f3 interna\");\n        }\n    } catch (Exception e) {\n        println(\"Excepci\u00f3 externa\");\n    }\n}\n</code></pre>"},{"location":"Tema%2004.%20Estructures%20de%20Control/#classes-dexcepcions-en-java","title":"Classes d'excepcions en Java","text":"<p>Totes les excepcions hereten de la classe Throwable. Les que s\u00f3n derivades de Exception poden ser gestionades; les de Error (com OutOfMemoryError) no solen ser tractades pel programador.</p> <p></p>"},{"location":"Tema%2004.%20Estructures%20de%20Control/#creacio-dexcepcions","title":"Creaci\u00f3 d'excepcions","text":"<p>Java permet la creaci\u00f3 d\u2019excepcions noves que deriven de la classe base Exception per controlar errors espec\u00edfics:</p> <p>Excepci\u00f3 personalitzada</p> <pre><code>class NumeroNegatiuException extends Exception {\n    public NumeroNegatiuException(String missatge) {\n        super(missatge);\n    }\n}\n\nvoid verificarNumero(int n) throws NumeroNegatiuException {\n    if (n &lt; 0) {\n        throw new NumeroNegatiuException(\"No s'admeten nombres negatius.\");\n    }\n}\n\n// \u00das de l'excepci\u00f3\ntry {\n    verificarNumero(-5);\n} \ncatch (NumeroNegatiuException e) {\n    println(\"Error personalitzat: \" + e.getMessage());\n}\n</code></pre> Activitat 426. \u00das d'excepcions a Java <p>Tens la seg\u00fcent excepci\u00f3 personalitzada ja creada:</p> <pre><code>// Excepci\u00f3 personalitzada\nclass NumeroNegatiuException extends Exception {\n    NumeroNegatiuException(String missatge) {\n        super(missatge);\n    }   \n}\n</code></pre> <p>El que has de fer \u00e9s copiar el codi de l'excepci\u00f3 a un programa per a Processing IDE (al final despr\u00e9s del keyPressed) i programar les seg\u00fcents accions:</p> <ul> <li>Declara una variable int valor = -5;</li> <li>Intenta mostrar el seu quadrat arrel (Math.sqrt(valor)), per\u00f2:</li> <li>Si valor \u00e9s negatiu, llan\u00e7a un throw new NumeroNegatiuException(\"Missatge d'error...\").</li> <li>Captura l\u2019error amb try\u2013catch i mostra el missatge amb println() i text().</li> </ul>"},{"location":"Tema%2004.%20Estructures%20de%20Control/#proces-de-compilacio","title":"Proc\u00e9s de compilaci\u00f3","text":"<p>\u00c9s el proc\u00e9s pel qual es tradueixen les instruccions escrites en un determinat llenguatge de programaci\u00f3 a llenguatge m\u00e0quina. A m\u00e9s d'un  traductor, es poden necessitar altres programes per crear un programa  objecte executable. Un programa font es pot dividir en m\u00f2duls emmagatzemats en arxius diferents. La tasca de reunir el programa font sovint es confia a un programa diferent, anomenat preprocessador. El preprocessador tamb\u00e9 pot expandir abreviatures, crides a macros, a proposicions del llenguatge font.</p> <p>Normalment la creaci\u00f3 d'un programa executable (un t\u00edpic.exe per a Microsoft Windows o DOS) comporta dos passos. El primer pas es diu compilaci\u00f3 ( pr\u00f2piament dit) i tradueix el codi font escrit en un llenguatge de programaci\u00f3 emmagatzemat en un arxiu a codi de baix nivell (normalment en codi objecte, no directament a llenguatge m\u00e0quina). El segon pas es diu enlla\u00e7at en el qual s'enlla\u00e7a el codi de baix nivell generat de tots els fitxers i subprogrames que s'han enviat compilar i s'afegeix el codi de les funcions que hi ha a les biblioteques del compilador perqu\u00e8 l'executable pugui comunicar-se directament amb el sistema operatiu, traduint aix\u00ed finalment el codi objecte a codi m\u00e0quina, i generant un m\u00f2dul executable.</p> <p>Aquests dos passos es poden fer per separat, emmagatzemant el resultat de la fase de compilaci\u00f3 en arxius objectes (un t\u00edpic .obj per a Microsoft Windows, DOS o per a Unix ), per a enlla\u00e7ar-los en fases posteriors, o crear directament l'executable, amb la qual cosa la fase de compilaci\u00f3 s'emmagatzema nom\u00e9s temporalment. Un programa podria tenir parts escrites en diversos llenguatges (per exemple C, C + + i Asm), que es podrien compilar de forma independent i despr\u00e9s enlla\u00e7ar juntes per formar un \u00fanic m\u00f2dul executable. </p> <p> </p>"},{"location":"Tema%2004.%20Estructures%20de%20Control/#el-depurador-de-processing-ide","title":"El depurador de Processing IDE","text":"<p>Ha arribat el moment que aprengues com funciona el depurador que \u00e9s una eina molt important per a desenvolupar codi. El depurador o debugger \u00e9s una eina molt important i necess\u00e0ria que porten tots els entorns de desenvolupament integrat com Processing. Aquesta eina ens permet executar el codi pas a pas al mateix temps que podem monitoritzar el valor de les variables, l'estat dels diferent objectes que formen part de la nostra aplicaci\u00f3. </p> <p> </p> <p>Per poder activar el depurador hem de fer clic al bot\u00f3 red\u00f3 que es troba dalt a la dreta de l'editor com es mostra a la imatge anterior. Una vegada tenim el depurador activat, se'ns obre el monitor de variables que ens permetr\u00e0 controlar com canvien les variables de valor. </p> <p>A la part esquerra ens apareixeran els controls que ens habilitaran per poder navegar pas a pas o entrar en funcions i m\u00e8todes del codi.</p> <p>Finalment \u00e9s molt important tamb\u00e9 per a la depuraci\u00f3 de codi el terme breakpoint per fer que el depurador pare en un lloc espec\u00edfic del nostre codi, li ho hem d'indicar amb punts de ruptura o breakpoints. Per poder posar un breakpoint nom\u00e9s hem de fer clic sobre el n\u00famero de la l\u00ednia sobre la que volem que s'apare l'execuci\u00f3 del programa.  Per tal de llevar-lo tornem a punxar sobre la mateixa l\u00ednia.</p> <p>Una vegada hages provat el depurador de Processing IDE i tingues m\u00e9s o menys clar com funciona, fes l'activitat seg\u00fcent.</p> Activitat 427. Depurar el codi <p>L'objectiu d'aquesta activitat \u00e9s que utilitzeu el depurador (debugger) de Processing IDE.</p> <p>Copia el seg\u00fcent codi a un projecte nou de Processing IDE i segueix les isntruccions.</p> <pre><code>   int a = 5;\n   int b = 10;\n   int c;\n\n   void setup() {\n       size(400, 400);\n       \n       c = a + b;\n       println(\"C despr\u00e9s de sumar: \" + c);\n       \n       a = a * 2;\n       println(\"A despr\u00e9s de multiplicar: \" + a);\n       \n       b = b - 3;\n       println(\"B despr\u00e9s de restar: \" + b);\n       \n       c = a + b;\n       println(\"C despr\u00e9s de sumar de nou: \" + c);\n   }\n</code></pre> <ol> <li>Posar un breakpoint a la l\u00ednia c = a + b; (la primera vegada que es fa la suma).</li> <li>Executar el programa en mode depuraci\u00f3. Quan s\u2019aturi:<ul> <li>Mirar els valors de a, b i c.</li> <li>Provar a avan\u00e7ar pas a pas (step over) i veure com canvien els valors.</li> </ul> </li> <li>Posar un breakpoint a b = b - 3; i observar novament les variables.</li> <li>Provar a modificar el valor de a o b mentre el programa est\u00e0 aturat i continuar l\u2019execuci\u00f3. Com canvia la suma final?</li> </ol> <p>Preguntes per a la reflexi\u00f3:</p> <ol> <li>Quin valor tenen les variables en cada breakpoint?</li> <li>Qu\u00e8 passa quan canvies el valor d\u2019una variable des del depurador?</li> <li>Quin avantatge t\u00e9 usar el depurador en lloc de nom\u00e9s println()?</li> </ol>"},{"location":"Tema%2005.%20Desenvolupament%20de%20Classes/","title":"Tema 5. Desenvolupament de classes","text":""},{"location":"Tema%2005.%20Desenvolupament%20de%20Classes/#introduccio","title":"Introducci\u00f3","text":"<p>Abans de comen\u00e7ar a parlar de classes i de com les podem desenvolupar en un llenguatge de programaci\u00f3 com \u00e9s Java, caldria primer explicar un dels or\u00edgens del paradigma de programaci\u00f3 orientada a objectes: la programaci\u00f3 modular.</p> <p>Anem a entrar en un m\u00f3n que es basa en la m\u00e0xima: \"Divideix i vencer\u00e0s\". Si fem una analogia amb l'estrat\u00e8gia b\u00e8l\u00b7lica, podriem dir que en aquells casos que l'enemic \u00e9s molt gran per a les nostres possibilitats, seria interessant poder, d'alguna forma, dividir-lo en trossos m\u00e9s xicotets de tal forma que el podem afrontar.</p> <p>Qu\u00e8 \u00e9s?</p> <p>La programaci\u00f3 modular \u00e9s un paradigma de programaci\u00f3 que consisteix a dividir un programa en m\u00f2duls o subprogrames per tal de fer-lo m\u00e9s llegible i manejable</p> <p>Tamb\u00e9 podriem dir que \u00e9s una evoluci\u00f3 de la programaci\u00f3 estructurada per solucionar problemes de programaci\u00f3 m\u00e9s grans i complexos del que aquesta pot resoldre.</p> <p>En l'aplicar la programaci\u00f3 modular, un problema complex ha de ser dividit en diversos subproblemes m\u00e9s simples, i aquests al seu torn en altres subproblemes m\u00e9s simples encara. Aix\u00f2 s'ha de fer fins a obtenir subproblemes prou simples com per poder ser resolts f\u00e0cilment amb algun llenguatge de programaci\u00f3. Aquesta t\u00e8cnica es diu refinament successiu, divideix i vencer\u00e0s o an\u00e0lisi descendent (Top-Down).</p> <p>Un m\u00f2dul \u00e9s cadascuna de les parts d'un programa que resol un dels subproblemes en qu\u00e8 es divideix el problema complex original. Cadascun d'aquests m\u00f2duls t\u00e9 una tasca ben definida i alguns necessiten d'altres per poder operar. En cas que un m\u00f2dul necessiti d'un altre, pot comunicar-se amb aquest mitjan\u00e7ant una interf\u00edcie de comunicaci\u00f3 que tamb\u00e9 ha d'estar ben definida.</p> <p>Si b\u00e9 un m\u00f2dul es pot entendre com una part d'un programa en qualsevol de les seves formes i variats contextos, en la pr\u00e0ctica se'ls sol prendre com a sin\u00f2nims de procediments i funcions. Per\u00f2 no necess\u00e0ria ni estrictament un m\u00f2dul \u00e9s una funci\u00f3 o un procediment, ja que el mateix pot contenir molts d'ells. No s'ha de confondre el terme \"m\u00f2dul\" (en el sentit de programaci\u00f3 modular) amb termes com \"funci\u00f3\" o \"procediment\", propis de l'llenguatge que ho suporte.</p> White Stripes - Little Acorn (lletra) - Intro <p>When problems overwhelm us And sadness smothers us Where do we find the will and the courage to continue? Well, the answer may come in the carrying voice of a friend A chance encounter with a book Or from a personal faith For janette help came from her faith But it also came from a squirrel Shortly after her divorce Janette lost her father Then she lost her job She had mounthing money problems But Janette not only survived She worked her way out of despondency and now she says \"Life is good again\" How could this happen? She told me that late one autumn day when she was at her lowest She watched a squirrel storing up nuts for the winter One at a time he would take them to the nest And she thought, \"If that squirrel can take care of himself with the harsh winter coming on So can I Once I broke my problems into small pieces I was able to carry them Just like those acorns One at a time</p>"},{"location":"Tema%2005.%20Desenvolupament%20de%20Classes/#caracteristiques","title":"Caracter\u00edstiques","text":"<p>La modularitat en programaci\u00f3 es considera la capacitat que t\u00e9 un llenguatge concret en dividir-se en parts o subprogrames (m\u00f2duls). Cadascun dels m\u00f2duls o parts que formaran part d'aquest programa, tenen una funci\u00f3 particular, s\u00f3n semi-independents i incl\u00fas es poden trobar en fitxers f\u00edsics distints.</p> <p>No hem de pensar mai en un programa com un tot sino com un conjunt de m\u00f2duls relacionats entre si on cada m\u00f2dul desenvolupa una tasca molt concreta independentment de la resta i que tots junts formen el programa o aplicaci\u00f3.</p>"},{"location":"Tema%2005.%20Desenvolupament%20de%20Classes/#avantatges","title":"Avantatges","text":"<ul> <li>El codi resultant \u00e9s m\u00e9s net i f\u00e0cil d'entendre.</li> <li>Permet la divisi\u00f3 del treball.</li> <li>Es pot provar de forma independent, millorant aix\u00ed la recerca i correcci\u00f3 d'errades.</li> <li>Facilita la definici\u00f3 de variables al crear diversos \u00e0mbits.</li> </ul>"},{"location":"Tema%2005.%20Desenvolupament%20de%20Classes/#tipus-de-modularitat","title":"Tipus de modularitat","text":"<p>Depenent del nivell de detall amb el que es tracten els m\u00f2duls, podem distingir tres tipus:</p> <ul> <li>Llibreries: conjunt de funcions o de m\u00f2duls que comparteixen una finalitat.</li> <li>Classes: les classes s\u00f3n definicions de possibles objectes. Ja ho veurem amb m\u00e9s detall al tema de programaci\u00f3 orientada a objectes.</li> <li>Funcions o m\u00e8todes: codi que realitza un funci\u00f3 concreta. Una funci\u00f3 o m\u00e8tode pot estar associat tant a una llibreria com a un classe.</li> </ul>"},{"location":"Tema%2005.%20Desenvolupament%20de%20Classes/#radiografia-duna-classe-java","title":"Radiografia d'una classe Java","text":"<ul> <li>(RA4.1: S'ha reconegut la sintaxi, estructura i components t\u00edpics d'una classe)</li> </ul> <p>Una classe \u00e9s la definici\u00f3 d\u2019un objecte, \u00e9s l\u2019element que descriu els components d\u2019un objecte de forma general. Diem que hem creat un objecte quan donem valors i utilitzem els components definits a la classe. Dit d'una altra forma, una classe \u00e9s el model o plantilla que defineix com seran els objectes que en derivem. \u00c9s a dir, estableix qu\u00e8 saben (atributs) i qu\u00e8 poden fer (m\u00e8todes). Els objectes s\u00f3n, doncs, inst\u00e0ncies concretes d\u2019una classe.</p> <p>Per entendre la sintaxi i estructura d\u2019una classe en Java (i tamb\u00e9 a Processing), conv\u00e9 distingir les seues parts principals:</p> <ul> <li>Nom de la classe: s'escriu amb maj\u00fascula inicial per convenci\u00f3.</li> <li>Atributs: variables que defineixen l'estat de la classe.</li> <li>Constructor (s): m\u00e8tode especial que permet crear (instanciar) objectes inicialitzant atributs.</li> <li>M\u00e8todes: accions que poden fer els objectes de la classe.</li> <li>Comentaris i documentaci\u00f3: \u00e9s bona pr\u00e0ctica descriure qu\u00e8 fa cada part de la classe.</li> </ul> <p>Veien un exemple gen\u00e8ric de com seria una classe en notaci\u00f3 UML</p> <p>     classDiagram     direction TB      class ClassGen {         tipus atribut1         tipus atribut2         tipus atribut3         ClassGen()         m\u00e8tode1()         m\u00e8tode2()     }           </p> <p>A l'esquema anterior hem definit una classe amb nom ClassGen (de classe gen\u00e8rica) que t\u00e9 tres atributs: atribut1, atribut2, atribut3; un constructor: ClassGen i dos m\u00e8todes: m\u00e8tode1 i m\u00e8tode2.</p> <p>Per\u00f2 vegem un exemple m\u00e9s concret. Per tal de veure com \u00e9s el desenvolupament de classes en programaci\u00f3 orientada a objectes, quina \u00e9s la seua sintaxi, estructura i components t\u00edpics, el que farem ser\u00e0 un xicotet projecte amb un sistema de part\u00edcules en forma de volc\u00e0 com mostra la imatge:</p> <p> </p> <p>Un sistema de part\u00edcules \u00e9s una t\u00e8cnica de programaci\u00f3 gr\u00e0fica utilitzada per simular fen\u00f2mens formats per molts  elements petits i independents (anomenats part\u00edcules) que, en conjunt, generen un efecte visual complex.</p> <p>Cada part\u00edcula \u00e9s un objecte amb propietats pr\u00f2pies (posici\u00f3, velocitat, color, vida, etc.) i regles de comportament (com es mou, com es dissipa, com canvia al llarg del temps).</p> <p>Un sistema de part\u00edcules gestiona un conjunt d\u2019aquestes part\u00edcules:</p> <ul> <li>Creaci\u00f3: genera noves part\u00edcules segons unes condicions (per exemple, cada frame).</li> <li>Actualitzaci\u00f3: calcula l\u2019estat de cada part\u00edcula (moure\u2019s, canviar d\u2019opacitat, reduir vida...).</li> <li>Dibuix: mostra totes les part\u00edcules a la pantalla.</li> <li>Eliminaci\u00f3: descarta les part\u00edcules que ja han \u201cmort\u201d o superat la seua vida \u00fatil.</li> </ul> <p>Per\u00f2 abans unes quantes pinzellades breus de com es desenvolupa un projecte de programaci\u00f3 orientada a objectes.</p>"},{"location":"Tema%2005.%20Desenvolupament%20de%20Classes/#realitzacio-de-programes-orientats-a-objectes","title":"Realitzaci\u00f3 de programes orientats a objectes","text":"<p>A partir d\u2019ara, quan hajam de resoldre un problema hem de comen\u00e7ar a pensar d\u2019una forma diferent a la que est\u00e0vem fent fins ara. En programaci\u00f3 orientada a objectes seguirem usant els mecanismes de programaci\u00f3 estructurada com ara sent\u00e8ncies repetitives, alternatives, etc.. tanmateix hem de plantejar un sistema on les dades presenten una major import\u00e0ncia.</p> <p>L\u2019objectiu de l\u2019orientaci\u00f3 a objectes \u00e9s plasmar la realitat de manera que programem els elements el m\u00e9s pr\u00f2xim possible a com els veiem al seu entorn natural. Aix\u00ed, quan hajam d\u2019encarar un problema d\u2019aquest tipus:</p> <ul> <li>Ens preguntarem sobre aquells elements dels que realment es interessant emmagatzemar informaci\u00f3, \u00e9s a dir, localitzarem els possibles objectes del nostre programa.</li> <li>De cada element hem de con\u00e8ixer quines s\u00f3n les seues caracter\u00edstiques o quines s\u00f3n les caracter\u00edstiques que el representen.</li> <li>De cada element hem de con\u00e8ixer les operacions a realitzar, accions que hi poden fer,  ja que cada conjunt de dades permetr\u00e0 la realitzaci\u00f3 d\u2019un conjunt d\u2019operacions.</li> <li>Finalment, desenvoluparem un entorn on utilitzarem els elements configurats.</li> </ul>"},{"location":"Tema%2005.%20Desenvolupament%20de%20Classes/#shan-definit-classes","title":"S'han definit classes","text":""},{"location":"Tema%2005.%20Desenvolupament%20de%20Classes/#shan-definit-propietats-i-metodes","title":"S'han definit propietats i m\u00e8todes","text":""},{"location":"Tema%2005.%20Desenvolupament%20de%20Classes/#shan-creat-constructors","title":"S'han creat constructors","text":""},{"location":"Tema%2005.%20Desenvolupament%20de%20Classes/#shan-desenvolupat-programes-que-instancien-i-utilitzin-objectes-de-les-classes-creades-anteriorment","title":"S'han desenvolupat programes que instancien i utilitzin objectes de les classes creades anteriorment","text":""},{"location":"Tema%2005.%20Desenvolupament%20de%20Classes/#shan-utilitzat-mecanismes-per-controlar-la-visibilitat-de-les-classes-i-dels-seus-membres","title":"S'han utilitzat mecanismes per controlar la visibilitat de les classes i dels seus membres","text":""},{"location":"Tema%2005.%20Desenvolupament%20de%20Classes/#shan-definit-i-utilitzat-classes-heretades","title":"S'han definit i utilitzat classes heretades","text":""},{"location":"Tema%2005.%20Desenvolupament%20de%20Classes/#shan-creat-i-utilitzat-metodes-estatics","title":"S'han creat i utilitzat m\u00e8todes est\u00e0tics","text":""},{"location":"Tema%2005.%20Desenvolupament%20de%20Classes/#shan-definit-i-utilitzat-interficies","title":"S'han definit i utilitzat interf\u00edcies","text":""},{"location":"Tema%2005.%20Desenvolupament%20de%20Classes/#shan-creat-i-utilitzat-conjunts-i-llibreries-de-classes","title":"S'han creat i utilitzat conjunts i llibreries de classes","text":""},{"location":"Tema%2006.%20Entrada%2C%20eixida%20i%20gr%C3%A0fics/","title":"Tema 8. Entrada, eixida i gr\u00e0fics","text":""},{"location":"Tema%2006.%20Entrada%2C%20eixida%20i%20gr%C3%A0fics/#introduccio","title":"Introducci\u00f3","text":""},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/","title":"Tema 9. Gr\u00e0fics. La llibreria ControlP5","text":""},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#introduccio","title":"Introducci\u00f3","text":"<p>Una part important de tot llenguatge de programaci\u00f3 \u00e9s com s\u2019establir\u00e0 el contacte amb l\u2019exterior, b\u00e9 siga mitjan\u00e7ant la consola o a trav\u00e9s del sistema de fitxers, per finalment poder actuar amb l\u2019usuari d\u2019una aplicaci\u00f3 en execuci\u00f3. Ambd\u00f3s, consola i sistema de fitxers, poden funcionar tant d\u2019entrada als nostres programes com d\u2019eixida.</p> <p>Java defineix una abstracci\u00f3, els streams o fluxos per tractar la comunicaci\u00f3 d\u2019informaci\u00f3 amb l\u2019exterior. Per entendre-ho millor, un stream o flux \u00e9s com un canal de comunicaci\u00f3 entre un origen i un dest\u00ed. Per exemple suposem el cas d\u2019un programa que quan arranque haja de llegir una llista de clients d\u2019un fitxer de text per crear una agenda. En aquest cas l\u2019origen seria el fitxer de text i el dest\u00ed el programa o aplicaci\u00f3 que s\u2019encarrega d\u2019emplenar l\u2019agenda amb el llistat de clients, doncs b\u00e9, l\u2019stream en aquest escenari seria el canal de comunicaci\u00f3 que s\u2019establiria entre el fitxer de text i el programa per tal que aquest puga llegir la informaci\u00f3.</p> <p></p> <p>A la imatge anterior es poden observar dos tipus de fluxos de dades: El primer \u00e9s un flux d'entrada de dades, s'enten d'entrada perqu\u00e8 va del sistema de fitxers al programa, mentre que el segon representa un flux de dades d'eixida, ja que aquest va del programa al sistema de fitxers.</p> <p>En aquest tema explicarem com Java tracta mitjan\u00e7ant objectes l\u2019establiment d'aquests canals de comunicaci\u00f3 i quines s\u00f3n les operacions que hi podem fer i com s\u2019han d\u2019utilitzar aquestes abstraccions de Java. D\u2019altra banda Java tamb\u00e9 ofereix el mecanisme d\u2019excepcions per controlar els errors sobrevinguts. Una excepci\u00f3 \u00e9s un problema que es produeix en temps d\u2019execuci\u00f3. Java permet controlar aquests problemes i programar amb els try...catch la soluci\u00f3 als errors en temps d\u2019execuci\u00f3.</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#entrada-i-eixida-basiques","title":"Entrada i eixida b\u00e0siques","text":"<p>Com hem dit abans, Java organitza la entrada i eixida mitjan\u00e7ant l\u2019\u00fas d\u2019streams, que s\u00f3n abstraccions en realitat, i aquests streams el que fan es transportar la informaci\u00f3 del programa o aplicaci\u00f3 a dispositius externs. Aquests dispositius externs poden ser b\u00e9 fitxers o incl\u00fas la consola, que es tractada com un fitxer per Java.</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#flux-i-jerarquia-de-classes","title":"Flux i jerarquia de classes","text":"<p>Com que les possibilitats que tenim en programaci\u00f3 respecte de l\u2019\u00fas de fitxers \u00e9s ampla, podem: llegir de fitxers, escriure en fitxers, llegir per una entrada com un teclat System.in o escriure en una eixida com un monitor System.out, Java en primera inst\u00e0ncia distingeix entre dos tipus de fluxos: flux de bytes i flux de caracters</p> E/S Bytes Caracters Flux entrada InputStream Reader Flux eixida OutputStream Writer <p>Java declara quatre classes abstractes, \u00e9s a dir, que no podem instanciar cap objectes d'aquestes classes, que deriven directament de la superclasse \u00abObject\u00bb que s\u00f3n: InputStream, OutputStream, Reader i Writer.</p> <p>InputStream \u00e9s la base per a totes les classes definides per al flux d\u2019entrada de dades a nivell de bytes. A la imatge seg\u00fcent es mostren totes les classes que deriven d'InputStream.  De totes les classes derivades de la classe abstracta InputStream, veurem amb m\u00e9s detall les seg\u00fcents: FileInputStream, DataInputStream i ObjectInputStream.</p> <p></p> <p>OutputStream \u00e9s la classe base per a les classes que gestionen el flux d\u2019eixida a nivell de bytes. A la imatge seg\u00fcent es poden observar totes les seues classes derivades. Pel que fa a aquesta classe abstracta, veurem amb m\u00e9s detall: FileOutputStream, DataOutputStream, PrintStream i ObjectOutputStream.</p> <p></p> <p>Reader \u00e9s la classe per llegir streams a nivell de caracter. Observa les classes derivades a la imatge seg\u00fcent. D'aquesta classe abstracta veurem amb m\u00e9s detall: BufferedReader, InputStreamReader, FileReader</p> <p></p> <p>Writer \u00e9s la classe per escriure a streams a nivell de caracter i les classes que deriven d'ell s\u00f3n les que es poden veure a la seg\u00fcent imatge. De totes les derivades ens centrarem en: OutputStreamWriter, FileWriter, BufferedWriter i PrintWriter.</p> <p></p> <p>Particularitats de Processing IDE</p> <p>Processing IDE \u00e9s un entorn de desenvolupament senzill que no t\u00e9 la pot\u00e8ncia d'altres entorns com Eclipse IDE, per tant moltes de les classes d'entrada i eixida que veurem en aquest tema no es podran provar en Processing. Sempre podem obrir un projecte nou en Eclipse o Visual Studio i provar els exemples que no funcionen en Processing IDE.</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#consola","title":"Consola","text":"<p>Una de les possibilitats de realitzar l'entrada eixida a un programa \u00e9s mitjan\u00e7ant la consola, on d'una banda es pot escriure i mostrar missatges i d'altra banda l'usuari pot introduir informaci\u00f3.</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#utilitzant-bufferedreader","title":"Utilitzant BufferedReader","text":"<p>BufferedReader \u00e9s una classe derivada de la classe abstracta Reader que es troba dins del paquet java.io. A l'exemple seg\u00fcent es mostra com podem utilitzar aquesta classe.</p> <pre><code>// Exemple per a Visual Studio Code o Eclipse IDE\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\nBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\ntry {\n   String strName = reader.readLine();\n   System.out.println(\"Hola: \" + strName + \"!\");\n} \ncatch (IOException e) {\n   System.out.println(\"S'ha produit un error: \" + e.getMessage());\n} \nfinally {\n   reader.close(); // \u00c9s molt important tancar els streams\n}\n</code></pre> <p>Consideracions de l'exemple anterior:</p> <ul> <li>S'han d'importar les llibreries necess\u00e0ries per poder utilitzar les classes necess\u00e0ries.</li> <li>Per instanciar un objecte de la classe BufferedReader, el constructor necessita que se li passe un objecte de tipus InputStreamReader que apunte al flux d'entrada predefinit System.in (el teclat)</li> <li>Tota instrucci\u00f3 relacionada amb els streams, s'han de posar dins d'un bloc try..catch.</li> </ul>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#utilitzant-scanner","title":"Utilitzant Scanner","text":"<p>L'altra alternativa, m\u00e9s comoda al meu entendre, \u00e9s l'\u00fas de la classe Scanner. Aquesta classe es troba dins del paquet java.util i \u00e9s una derivada de la classe arrel Object. Observa l'exemple seg\u00fcent d'\u00fas de la classe Scanner:</p> <pre><code>// Exemple per a Visual Studio Code o Eclipse IDE\n\nimport java.util.Scanner;\n\nSystem.out.println(\"Per favor escriu el teu nom i prem Intro\");\nScanner scanner = new Scanner(System.in);\nString strName = scanner.nextLine();\n\nSystem.out.println(\"Hola: \" + strName + \"!\");\n</code></pre> <p>Algunes consideracions:</p> <ul> <li>S'han d'importar les llibreries necess\u00e0ries per poder utilitzar les classes necess\u00e0ries.</li> <li>Per instanciar un objecte de la classe Scanner, el constructor necessita que se li passe un flux d'entrada com pot ser: System.in (el teclat)</li> <li>A difer\u00e8ncia del BufferedReader no \u00e9s necessari posar el codi dins del bloc try..catch</li> </ul>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#bufferedreader-a-processing-ide","title":"BufferedReader a Processing IDE","text":"<p>A l'API de Processing existeix  una classe BufferedReader. Aquesta classe s'encarrega de llegir l\u00ednia a l\u00ednia com un conjunt d'Strings individuals.  Per\u00f2 s'utilitza per a llegir de fitxers i no de l'entrada (system.in) com als exemples anteriors. Per poder llegir des de teclat a Processing hem d'utilitzar el m\u00e8tode keyPressed</p> <p>Abans de copiar i provar el seg\u00fcent exemple, descarrega el fitxer positions.txt amb parells de n\u00fameros a cada l\u00ednia separats per un tabulador.</p> <pre><code>BufferedReader reader;\nString line;\n\nvoid setup() {\n  // Open the file from the createWriter() example\n  reader = createReader(\"positions.txt\");    \n}\n \nvoid draw() {\n  try {\n    line = reader.readLine();\n  } catch (IOException e) {\n    e.printStackTrace();\n    line = null;\n  }\n  if (line == null) {\n    // Stop reading because of an error or file is empty\n    noLoop();  \n  } else {\n    String[] pieces = split(line, TAB);\n    int x = int(pieces[0]);\n    int y = int(pieces[1]);\n    point(x, y);\n  }\n} \n</code></pre>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#flux-darxius","title":"Flux d'arxius","text":"<p>Un arxiu o fitxer \u00e9s un conjunt de bytes que s\u00f3n emmagatzemats en un dispositiu. Un arxiu o fitxer es identificat per un nom i la descripci\u00f3 de la carpeta o directori (la ruta) que el cont\u00e9. Una de les principals finalitats dels arxius \u00e9s tindre desats en mem\u00f2ria secund\u00e0ria, quan les aplicacions ja han acabat d\u2019executar-se, i que siguen recuperables despr\u00e9s.</p> <p>Un fitxer s\u2019ha de poder llegir, actualitzar, esborrar registres i tornar a guardar-se de nou amb tots els canvis realitzats. Segons el dispositiu f\u00edsic que els emmagatzeme, els arxius poden ser directes o seq\u00fcencials, el primer implica que per poder accedir a qualsevol registre, hem de passar pr\u00e8viament pels anteriors, per exemple una cinta magn\u00e8tica, mentre que el segon tipus d\u2019arxiu permet l\u2019acc\u00e9s directe al registre en q\u00fcesti\u00f3 sense haver de passar pels anteriors. </p> <p>En Java un arxiu \u00e9s una seq\u00fcencia de bytes que contenen la informaci\u00f3 emmagatzemada. Per poder treballar amb aquestes seq\u00fcencies de bytes, Java disposa de classes com s\u00f3n els tipus b\u00e0sics (int, double, string..). D\u2019una altra banda, com ja hem explicat abans, un flux \u00e9s una abstracci\u00f3 que es refereix a una corrent (stream) de dades entre un origen (tamb\u00e9 conegut com a font o productor) i una destinaci\u00f3 o embornal (consumidor) i la connexi\u00f3 que existeix entre els dos tamb\u00e9 es coneix com a pipe o tub per on circules les dades.</p> <p>Quan comen\u00e7a qualsevol execuci\u00f3 d\u2019un programa Java, es creen tres objectes flux, canals pels que pot fluir informaci\u00f3 d\u2019entrada o eixida; aquests objectes estan definits a la classe System i s\u00f3n:</p> <ul> <li>System.in: entrada est\u00e0ndard, permet l\u2019entrada de dades des del teclat.Una excepci\u00f3 \u00e9s un fallo que es produeix en temps d\u2019execuci\u00f3. Classe InputStream</li> <li>System.out: eixida est\u00e0ndard, permet la programa imprimir per pantalla. Classe PrintStream</li> <li>System.err: eixida d\u2019errors, permet al programa imprimir errors per pantalla Per defecte sol ser la mateixa eixida que System.out. Classe PrintStream</li> </ul>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#class-file","title":"Class File","text":"<p>Per poder identificar d\u2019un fitxer al sistema de fitxers de qualsevol sistema operatiu, necessitem: nom i ruta. Per exemple \u2018/user/data/file.txt\u2019. El fitxer es diu file.txt i la ruta en la qual es troba \u00e9s \u2018/user/data/\u2019. Aquest identificador de fitxer \u00e9s el que es passa al constructor de la classe per tal d\u2019obrir un flux.</p> <pre><code>import java.io.*;\nString strPath = sketchPath() + File.separator;\nFile fitxer = new File ( strPath + \"prova.txt\");\n// Fes el que vullgues fer amb el fitxer\n</code></pre> <p>En l\u2019exemple anterior hem utilitzat la classe File per tal d\u2019instanciar un stream al fitxer que li hem passat per par\u00e0metre \u00abprova.txt\u00bb. Compte que s\u2019ha de passar la ruta absoluta d\u2019on es troba el fitxer utilitzant la funci\u00f3 de Processing IDE sketchPath().</p> <p>Hi ha alternatives al constructor de la classe File que hem mostrat a l\u2019exemple anterior, es pot construir tamb\u00e9 amb dos par\u00e0metres: ruta i nom del fitxer o incl\u00fas indicar-li la ruta mitjan\u00e7ant un altre objecte File.</p> <p>Els m\u00e8todes de la classe File s\u00f3n:</p> M\u00e8tode Explicaci\u00f3 public boolean exists() Torna true si el fitxer existeix public boolean canWrite() Torna true si es pot escriure al fitxer public boolean canRead() Torna true si es nom\u00e9s de lectura public boolean isFile() Torna true si \u00e9s un fitxer public boolean isDirectory() Torna true si \u00e9s un directori public boolean isAbsolute() Torna true si el directori t\u00e9 ruta completa public long length() Torna la mida en bytes del fitxer public long lastModified() Torna el timestamp de l\u2019\u00faltima modificaci\u00f3 public String getName() Torna una string amb el nom del fitxer public String getPath() Torna una string amb el path del fitxer public String getAbsolutePath() Torna la ruta absoluta del fitxer public boolean setReadOnly() Converteix el fitxer en nom\u00e9s lectura public boolean delete() Elimina el fitxer o directori (si est\u00e0 buit) public boolean renameTo(File nou) Canvia el nom pel del fitxer nou public boolean mkdir() Crea el directori del fitxer public String[] list() Torna un array d\u2019strings dels elements Activitat 801. Class File <p>Crea un projecte en Processing IDE que obriga un fitxer de prova qualsevol, per exemple: prova.txt.    Revisa els m\u00e8todes de la classe File i comprova el funcionament d'alguns d'ells per exemple: getName();   Mostra per pantalla una fitxa en la que es mostre la seg\u00fcent informaci\u00f3: </p> <ul> <li>Nom del fitxer</li> <li>Ruta absoluta del fitxer</li> <li>Data de l'\u00faltima vegada que s'ha modificat</li> </ul> <p>Com haur\u00e0s pogut comprovar amb la classe File t'ha resultat impossible escriure o llegir d'ell.  A continuaci\u00f3 estudiarem amb m\u00e9s detall les diferents classes que disposa Java pel tractament de l'entrada i eixida d'informaci\u00f3 (Streams). Per tal entendre-ho millor, dividirem aquesta secci\u00f3 en dos blocs: Tractament a nivell de byte amb les classes abstractes InputStream i OutputStream i les seues classes derivades i tractament a nivell de caracter amb les classes abstractes Writer i Reader i les seues subclasses.</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#flux-de-dades-a-nivell-de-byte","title":"Flux de dades a nivell de byte","text":"<p>Com ja hem explicat abans, el tractament de l'entrada eixida en java a nivell de bytes es fa amb les classes abstractes InputStream i OutputStream de les quals deriven les classes: </p> <ul> <li>FileInputStream i FileOutputStream</li> <li>PipedInputStream i PipedOutputStream </li> <li>FilterInputStream i FilterOutputStream</li> <li>ByteArrayInputStream i ByteArrayOutputStream</li> <li>ObjectInputStream i ObjectOutputStream, etc.. </li> </ul>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#fileinputstream-i-fileoutputstream","title":"FileInputStream i FileOutputStream","text":"<p>Tot arxiu es pot considerar en s\u00ed mateix una seq\u00fc\u00e8ncia de bytes de baix nivell i despr\u00e9s sobre aquesta informaci\u00f3 es pot construir informaci\u00f3 de mes alt nivell per tal de processar dades m\u00e9s complexes des de tipus b\u00e0sic fins objectes. </p> <p>En altres paraules, si volem obrir un flux de dades a un fitxer o arxiu i volem llegir byte a byte per despr\u00e9s decidir nosaltres a nivell de programaci\u00f3 que volem fer amb aquests bytes, haur\u00edem d\u2019utilitzar aquestes classes.</p> <pre><code>import java.io.*;\nString strPath = sketchPath() + File.separator;\nFileInputStream fen = new FileInputStream(strPath + \"provat.txt\");\n// Fem el que hem de fer amb le fitxer i despr\u00e9s s'ha de tancar\nfen.close();\n</code></pre> <p>La classe FileInputStream s\u2019utilitza per llegir bytes o grups de bytes del fitxer associat. Tots els m\u00e8todes tenen visibilitat p\u00fablica i s\u2019ha de tenir en compte quina \u00e9s l\u2019excepci\u00f3 que llencen per controlar els possibles errors en temps d\u2019execuci\u00f3.</p> M\u00e8tode Explicaci\u00f3 FileOutputStream(String nombre) throws IOException; Crea un objecte inicialitzat amb el nom d\u2019arxiu que es passa com argument FileOutputStream(String nombre, boolean sw) throws IOException; Crea un objecte inicialitzat amb el nom d\u2019arxiu que es passa per par\u00e0metre. Si sw \u00e9s true els nous bytes s\u2019afegeixen al final FileOutputStream(File nombre) throws IOException; Crea un objecte inicialitzat amb l\u2019objecte file que es passa per par\u00e0metre void write(byte a) throws IOException; Escriu el byte \u2018a\u2019 al flux associat void write(byte[] s) throws IOException; Escriu l\u2019array de bytes \u2018s\u2019 al flux void write(byte[] s, int org, int len) throws IOException; Llig una seq\u00fc\u00e8ncia de bytes del flux i la desa a \u2018s\u2019 comen\u00e7ant per \u2018org\u2019 i una mida de \u2018len\u2019. Torna -1 si arriba al final del fitxer void close()throws IOException; Tanca el flux i el fitxer queda lliure per al seu \u00fas posterior <p>Exemple 1</p> <p>A continuaci\u00f3 obrirem el fitxer \u00abprova.txt\u00bb amb un FileInputStream per llegir-lo i desarem el seu contingut a un fitxer d\u2019eixida \u00abresultat.txt\u00bb que obrirem amb un FileOutputStream. Al fitxer d\u2019eixida, bolcarem el contingut de \u00abprova.txt\u00bb</p> <pre><code>import java.io.*;\n\nvoid setup () {\n   try {\n      String strPath = sketchPath() + File.separator;\n      FileInputStream fen = new FileInputStream(strPath + \"prova.txt\");\n      FileOutputStream fout = new FileOutputStream(strPath + \"resultat.txt\");\n\n      int byteLlegit = fen.read();\n      while ( byteLlegit != -1 ) {\n         fout.write(byteLlegit);\n         byteLlegit = fen.read();\n      }\n      fen.close();\n      fout.close();\n   }\n   catch (FileNotFoundException f ) {\n      println(\"Fitxer no trobat\");\n   }\n   catch (IOException e) {\n      println(\"Error d'entrada eixida\");\n   }\n}\n</code></pre> Activitat 802. Copiar i invertir <p>Basat en el codi anterior i fes que al fitxer resultat, el d\u2019eixida, es copie el que apareix a \u00abprova.txt\u00bb, el d\u2019entrada per\u00f2 a l\u2019inrev\u00e9s. Per exemple:</p> <p>Un possible resultat de l'activitat anterior podria ser el que es pot observar a la imatge seg\u00fcent:      </p> <p></p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#datainputstream-i-dataoutputstream","title":"DataInputStream i DataOutputStream","text":"<p>La veritat \u00e9s que treballar amb bytes quan estem parlant de fitxers o arxius que contenen informaci\u00f3 o dades de m\u00e9s nivell pot resultar incomode, ja que entre altres haur\u00edem de saber quants bytes t\u00e9 un car\u00e0cter, un enter o un doble. </p> <p>En Java tenim les classes DataInputStream i DataOutputStream que s\u00f3n subclasses de les classes FilterInputStream i FilterOutputStream. </p> <p>Abans d'entrar en el detall d'aquestes classes, veurem amb m\u00e9s profunditat que s\u00f3n les classes FilterInputStream i FilterOutputStream. Aquestes dues classes deriven de les classes abstractes InputStream i OutputStream. B\u00e0sicament el que fan es sobreescriure tots els m\u00e8todes de les seues super classes i permeten agrupar bytes (Input) i desagrupar-lo(Output) de tal forma que classes derivades seues podran treballar amb informaci\u00f3 de m\u00e9s alt nivell.</p> <p>Per tal d'instanciar un objecte de la classe DataInputStream d'on es podria llegir, ho fariem de la seg\u00fcent manera:</p> <pre><code>String strPath = sketchPath() + File.separator;\nFileInputStream gs  = new FileInputStream(strPath + \"prova.txt\");\nDataInputStream ent = new DataInputStream(gs);\n// Treballem amb ells i com passava amb els streams anteriors tamb\u00e9 els hem de tancar\ngs.close();\nent.close();\n</code></pre> <p>Observa el codi anterior: Primer s'instancia un objecte de la classe FileInputStream (derivada de InputStream) en la que se li indica la ruta del fitxer amb el que volem treballar. Despr\u00e9s aquest objecte FileInputStream s'utilitza per poder instanciar un objecte de la classe DataInputStream que utilitzarem per llegir tipus de dades primitius del fitxer.</p> <p>B\u00e0sicament aquestes classes el que fan \u00e9s organitzar els bytes en tipus primitius de tal forma que ja podem treballar llegint i escrivint als fluxos: enters, car\u00e0cters, reals, cadenes etc..</p> M\u00e8tode Explicaci\u00f3 public DataInputStream(InputStream entrada) throws IOException Crea un objecte associat a l\u2019stream que es passa per par\u00e0metre public final boolean readBoolean() throws IOException Torna el valor de tipus boole\u00e0 llegit public final byte readByte() throws IOException Torna el valor de tipus byte llegit public final short readShort() throws IOException Torna el valor de tipus short llegit public final char readChar() throws IOException Torna el valor de tipus char llegit public final int readInt() throws IOException Torna el valor de tipus int llegit public final long readLong() throws IOException Torna el valor de tipus long llegit public final float readFloat() throws IOException Torna el valor de tipus float llegit public final double readDouble() throws IOException Torna el valor de tipus double llegit public final String readUTF() throws IOException Torna una cadena que es va escriure en UTF <p>D\u2019aquesta forma ja no ens hem de preocupar de saber quants bytes de mem\u00f2ria s\u2019han de reservar per un car\u00e0cter o un enter. Per exemple si associem  un DataOutputStream a un fitxer i despr\u00e9s cridem al m\u00e8tode writeInt, realment el que s\u2019est\u00e0 fent \u00e9s escriure 4 bytes d\u2019informaci\u00f3 al fitxer de la qual cosa s\u2019estaria encarregant de manera transparent a l\u2019usuari.</p> <p>Per tal d'instanciar un objecte de la classe DataOutputStream, on es podria escriure, ho fariem de la seg\u00fcent forma:</p> <pre><code>String strPath = sketchPath() + File.separator;\nFileOutputStream fn = new FileOutputStream(strPath + \"result.txt\");\nDataOutputStream snb = new DataOutputStream(fn);\n// Treballem amb ells i tanquem.\nfn.close();\nsnb.close();\n</code></pre> <p>Al contrari que passava amb el DataInputStream, al codi anterior estem instanciant un objecte de la classe DataOutputStream que utilitzarem per escriure la informaci\u00f3 desitjada.</p> M\u00e8tode Explicaci\u00f3 public DataOutputStream(OutputStream destino) throws IOException Crea un objecte associat a l\u2019outputstream que es passa per par\u00e0metre public final void writeBoolean(boolean v) throws IOException Escriu un boolean public final void writeByte(int v) throws IOException Escriu un byte public final void writeShort(int v) throws IOException Escriu un short public final void writeChar(int v) throws IOException Escriu un char public final void writeChars(String v) throws IOException Escriu tots els chars que cont\u00e9 la String v public final void writeInt(int v) throws IOException Escriu un int public final void writeLong(long v) throws IOException Escriu un long public final void writeFloat(float v) throws IOException Escriu un float public final void writeDouble(double v) throws IOException Escriu un double public final void writeUTF(String cad) throws IOException Escriu la cadena cad en format UTF public final int close()throws IOException Tanca el flux <p>Un altre exemple d'\u00fas del DataInputStream:</p> <pre><code>import java.io.*;\n\nvoid setup () {\n  String strPath = sketchPath() + File.separator + \"prova.txt\";\n  try {\n    InputStream input = new FileInputStream(strPath);\n    DataInputStream inst = new DataInputStream(input);\n    int count = input.available();  // Quants bytes t\u00e9 l'arxiu\n    byte[] arr = new byte[count];\n    inst.read(arr);\n    \n    for (byte byt : arr) {\n      if (byt != 10) {          // Si no es tracta del caracter EOF (10 ASCII)\n        char ki = (char) byt;\n        print(ki+\"-\");\n      }\n    }\n  }\n  catch (Exception e) {\n    println(\"Algo val mal\");\n  }\n}\n</code></pre> <p>A continuaci\u00f3 podem veure un exemple en el que fem \u00fas del DataOutputStream i DataInputStream. El que fa aquest exemple \u00e9s escriure a un fitxer d\u2019eixida \u00abpluges.dat\u00bb dos valors double aleatoris per despr\u00e9s llegir-los amb un DataInputStream i mostrar-los per pantalla. </p> <p>El codi podria ser el seg\u00fcent:</p> <pre><code>String strPath = sketchPath() + File.separator;\ntry {\n    FileOutputStream fos = new FileOutputStream(strPath + \"pluges.dat\");\n    DataOutputStream dos = new DataOutputStream(fos);\n\n    double info  = random(100);\n    dos.writeDouble(info);\n    info = random(100);\n    dos.writeDouble(info);\n\n    FileInputStream fis = new FileInputStream(strPath + \"pluges.dat\");\n    DataInputStream dis = new DataInputStream(fis);\n\n    double info2 = dis.readDouble();\n    System.out.println(\"Primer valor: \" + info2);\n    info2 = dis.readDouble();\n    System.out.println(\"Segon valor: \" + info2);\n\n    fos.close();\n    dos.close();\n    fis.close();\n    dis.close();\n}\ncatch (FileNotFoundException e) {\n    System.out.println(\"El fitxer no existeix\");\n}\ncatch (IOException e) {\n    System.out.println(\"Error IO inesperat\");\n}\n</code></pre> Activitat 803. Data Input i Data Output <p>Crea un projecte en Processing copia el codi anterior i una vegada acabada l'execuci\u00f3 del programa, obre el fitxer \"pluges.dat\" i compara el que s'ha mostrat a consola amb el que s'ha gravat al fitxer. Posa el mateix? Per qu\u00e8?</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#printstream","title":"PrintStream","text":"<p>La classe PrintStream deriva de FilterOutputStream i el valor afegit d\u2019aquesta classe derivada \u00e9s que permet afegir el car\u00e0cter final de l\u00ednia als fitxers. Aquests tipus de fluxos s\u00f3n sempre d\u2019eixida i s\u2019associen a un altre flux de bytes de m\u00e9s baix nivell. System.out \u00e9s un objecte de tipus PrintStream. Per tant quan executem la sent\u00e8ncia System.out.println(\"\"); el que estem fent realment \u00e9s cridar al m\u00e8tode println de la classe PrintStream.</p> <pre><code>String strPath = sketchPath() + File.separator;\nString strFile = strPath + \"Complex.dat\";\nPrintStream ps = new PrintStream(new FileOutputStream(strFile));\n// Treballem i tanquem\nps.close();\n</code></pre> M\u00e8tode Explicaci\u00f3 public PrintStream(OutputStream destino) Crea un objecte associat a qualsevol objecte d\u2019eixida per par\u00e0metre public PrintStream(OutputStream destino, boolean flag) Crea un objecte associat a qualsevol objecte d\u2019eixida per par\u00e0metre. Si flag \u00e9s true, es produeix un bolcat autom\u00e0tic al escriure final de l\u00ednia. public void flush() Bolca el flux actual public void print(Object obj) Escriu la representaci\u00f3 de l\u2019objecte obj al flux public void print(String cad) Escriu la cadena al flux public void print(char c) Escriu un car\u00e0cter al flux public void println(Object obj) Escriu la representaci\u00f3 de l\u2019objecte al flux i final de l\u00ednia public void println(String cad) Escriu la cadena al flux i final de l\u00ednia <p>Observa el codi seg\u00fcent. Utilitzant la classe PrintStream s'obre un fitxer 'output.txt' dintre del qual s'escriur\u00e0 una sola cadena de caracters 'data' i despr\u00e9s es tancar\u00e0 l'stream una vegada finalitzat l'execuci\u00f3 del codi.</p> <pre><code>import java.io.*;\n\nString strFile = sketchPath() + File.separator + \"output.txt\";\nString data = \"Text que volem escriure dintre del fitxer\";\n\ntry {\n   PrintStream output = new PrintStream(strFile);\n\n   output.print(data);\n   output.close();\n}\ncatch(Exception e) {\n   e.getStackTrace();\n}\n</code></pre> Activitat 804. LLig per teclat i copia <p>Utilitzant el m\u00e8tode mouseClicked fes una aplicaci\u00f3 de tal forma que tot all\u00f2 que es teclege es guarde en un fitxer de text juntament amb l'hora a la qual s'ha escrit. Per exemple, si l'usuari escriu per pantalla el seu nom, \"Manolo\" i prem Intro, al fitxer d'eixida s'hauria de gravar: </p> <p>[09:05:25] - Manolo</p> <p>Has d'utilitzar la classe PrintStream per fer aquesta activitat.</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#flux-de-dades-a-nivell-de-caracter","title":"Flux de dades a nivell de caracter","text":"<p>Una altra forma de poder treballar amb fitxers en lloc de a nivell de byte com estavem fent als apartats anteriors, \u00e9s fer-ho a nivell de caracter. Al cap i a la fi els arxius, en una gran majoria, solen ser seq\u00fc\u00e8ncies de caracters i des del punt de vista l\u00f2gic ens resulta m\u00e9s natural treballar amb ells a aquest nivell.</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#reader-i-writer","title":"Reader i writer","text":"<p>Els arxius de text s\u00f3n arxius de car\u00e0cters, es poden crear fluxos de bytes o de car\u00e0cters derivats de les classes abstractes Reader i Writer.</p> <p>Els fluxos Reader i Writer s\u00f3n fluxos de Java orientats a car\u00e0cters. Amb aquests fluxos podem llegir i escriure car\u00e0cters o cadenes de car\u00e0cters al dispositius connectats mitjan\u00e7ant aquests fluxos.</p> <p>Per llegir arxius de car\u00e0cters s\u2019utilitzen fluxos derivats de la classe Reader on es declaren o sobreescriuen m\u00e8todes per la lectura de car\u00e0cters. Els m\u00e8todes m\u00e9s importants s\u00f3n:</p> M\u00e8tode Explicaci\u00f3 public int read() Llig un car\u00e0cter en forma d\u2019enter. Si arriba al final del fitxer torna -1 public int read(char [] b) Llig una seq\u00fcencia de car\u00e0cters fins completar l\u2019array b o llegir el final del fitxer. Torna el nombre de car\u00e0cters llegits o -1 si arriba al final de l\u2019arxiu"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#inputstreamreader-i-outputstreamwriter","title":"InputStreamReader i OutputStreamWriter","text":"<p>Els fluxos de la classe InputStreamReader envolten (wrap) a un flux de bytes; converteixen la seq\u00fc\u00e8ncia de bytes en seq\u00fc\u00e8ncia de car\u00e0cters i aix\u00ed ja no ho hem de fer nosaltres; la classe deriva directament de Reader, pel que t\u00e9 disponibles els m\u00e8todes read() de la seua classe pare per la lectura de car\u00e0cters</p> <p><pre><code>InputStreamReader ent = new InputStreamReader(System.in);\n// En acabar tanquem l'stream\nent.close();\n</code></pre> La classe OutputStreamWriter que deriva de writer, permet escriure car\u00e0cters en un flux de bytes al qual s\u2019associa la creaci\u00f3 de l\u2019objecte o flux.</p> <p><pre><code>OutputStreamWriter ot = new OutputStreamWriter(new FileOutputStream(arxiu));\n// Despr\u00e9s hem de recordar de tancar l'stream\not.close();\n</code></pre> Els m\u00e8todes de la classe InputStreamReader s\u00f3n:</p> M\u00e8tode Explicaci\u00f3 void close() Tanca el flux i allibera tots els recursos del sistema associats String getEncoding() Retorna el nom de la codificaci\u00f3 de car\u00e0cters que utilitza aquest flux int read() Llegeix un sol car\u00e0cter int read(char[] buf, int offset, int length) Llegeix car\u00e0cters en una part d'una matriu boolean ready() Indica si aquest flux est\u00e0 llest per ser llegit <p>Els m\u00e8todes de la classe OutputStreamWriter s\u00f3n:</p> M\u00e8tode Explicaci\u00f3 void close() Tanca el corrent, rentant-lo primer void flush() Redueix el corrent String getEncoding() Retorna el nom de la codificaci\u00f3 de car\u00e0cters que utilitza aquest flux void write(char [] buf, int off, int len) Escriu una part d'una matriu de car\u00e0cters void write(int c) Escriu un sol car\u00e0cter void write(String str, int off, int len) Escriu una part d'una cadena Activitat 805. InputStreamReader i OutputStreamReader <p>Repeteix l'activitat anterior, la 804, per\u00f2 utilitzant InputStreamReader i OutputStreamReader</p> <p>Per\u00f2 all\u00f2 normal \u00e9s que no s'utilitzen directament aquestes classes sino que es faja \u00fas de FileReader i FileWriter.</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#filereader-i-filewriter","title":"FileReader i FileWriter","text":"<p>Per llegir arxius de text o de car\u00e0cters es pot crear un flux del tipus FileReader, aquesta classe deriva d\u2019InputStreamReader, hereta els m\u00e8todes read() per a llegir car\u00e0cters, el constructor t\u00e9 com entrada una cadena amb el nom de l\u2019arxiu</p> <p>Per exemple</p> <p><pre><code>String strFile = sketchPath() + File.separator + \"cartes.dat\";\nFileReader fr = new FileReader(strFile);\nfr.close();\n</code></pre> Els constructors de la classe FileReader s\u00f3n:</p> Constructor Explicaci\u00f3 FileReader(File file) Crea un nou FileReader , amb el nom del fitxer des del qual cal llegir FileReader(FileDescriptor fd) Crea un nou FileReader , donat el FileDescriptor per llegir FileReader(String fileName) Crea un nou FileReader , amb el nom del fitxer des del qual cal llegir <p>Els m\u00e8todes dels que disposa FileReader s\u00f3n:</p> <ul> <li>Heretats de java.io.InputStreamReader: close, getEncoding, read, ready</li> <li>Heretats de java.io.Reader: mark, markSupported, read, reset, skip</li> <li>Heretats de java.lang.Object: clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait</li> </ul> <p>No es freq\u00fcent utilitzar directament fluxos OutputStreamWriter, encara que resulta interessant perqu\u00e8 la classe FileWriter \u00e9s una extensi\u00f3 d\u2019ella. Dissenyada per escriure en un arxiu de car\u00e0cters, els fluxos d\u2019aquest tipus escriuen car\u00e0cters amb el m\u00e8tode write() a l\u2019arxiu al que s\u2019associa el flux quan es crea l\u2019objecte.</p> <p><pre><code>String strFile = sketchPath() + File.separator + \"cartes.dat\";\nFileReader fr = new FileReader(strFile);\nnr.write(\"Frase qualsevol a escriure\");\nnr.close();\n</code></pre> Els constructors de la classe FileWriter s\u00f3n:</p> Constructor Explicaci\u00f3 FileWriter(File file) Construeix un objecte FileWriter donat un objecte File FileWriter(File file, boolean append) Construeix un objecte FileWriter donat un objecte File FileWriter(FileDescriptor fd) Construeix un objecte FileWriter associat a un descriptor de fitxer FileWriter(String fileName) Construeix un objecte FileWriter amb un nom de fitxer FileWriter(String fileName, boolean append) Construeix un objecte FileWriter amb un nom de fitxer amb un boole\u00e0 que indica si s'han d'afegir o no les dades escrites <p>En general no resulta eficient llegir directament d\u2019un flux d\u2019aquest tipus, s\u2019utilitzar\u00e0 un flux BufferedReader i BufferedWriter</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#bufferedreader-i-bufferedwriter","title":"BufferedReader i BufferedWriter","text":"<p>La lectura d\u2019arxius de text es realitza amb un flux que emmagatzema els car\u00e0cters en un buffer intermedi, aquests no es lligen directament de l\u2019arxiu si no del buffer. D\u2019aquesta manera augmentem l\u2019efici\u00e8ncia a les operacions d\u2019entrada, la classe BufferedReader permet crear fluxos de car\u00e0cters amb buffer que no \u00e9s m\u00e9s que una forma d\u2019organitzar el flux b\u00e0sic de car\u00e0cters del que ve  el text perqu\u00e8 al crear un flux BufferReader, aquest s\u2019inicialitza com un flux de car\u00e0cters InputStreamReader o qualsevol altre.</p> <p>El constructor de la classe t\u00e9 un argument de tipus Reader, FileReader o InputStreamReader, el flux creat disposa d\u2019un buffer de grand\u00e0ria suficient, el qual es pot especificar en el constructor amb un segon argument encara que no fa falta. Exemples de fluxos amb buffer.</p> <p>Els m\u00e8todes de la classe BufferedReader s\u00f3n:</p> M\u00e8tode Explicaci\u00f3 void close() Tanca el flux i allibera tots els recursos del sistema associats void mark(int readAheadLimit) Marca la posici\u00f3 actual al flux boolean markSupported() Indica si aquest flux admet l'operaci\u00f3 mark(), que fa read() Llegeix un sol car\u00e0cter int read(char[] cbuf, int off, int len) Llegeix car\u00e0cters en una part d'una matriu String readLine() Llegeix una l\u00ednia de text boolean ready() Indica si aquest flux est\u00e0 llest per ser llegit void reset() Restableix el flux a la marca m\u00e9s recent long skip(long n) Omet personatges <pre><code>File someFile = new File(...);\nint aCount = 0;\nFileReader fr = new FileReader(someFile);\nBufferedReader br = new BufferedReader(fr);\n\n// Count the number of 'a' characters.\nint ch;\nwhile ((ch = br.read()) != -1) {\n   if (ch == 'a') {\n      aCount++;\n   }\n}\nSystem.out.println(\"There are \" + aCount + \" 'a' characters in \" + someFile);\n</code></pre> <p>BufferedWriter, per un altre costat, escriu text en un flux de sortida de car\u00e0cters, guarda els car\u00e0cters en mem\u00f2ria interm\u00e8dia (buffer) per tal de proporcionar una escriptura eficient de car\u00e0cters, matrius i cadenes individuals.</p> <p>Es pot especificar la mida de la mem\u00f2ria interm\u00e8dia o es pot acceptar la mida predeterminada. El valor predeterminat \u00e9s prou gran per a la majoria de prop\u00f2sits.</p> <p>Es proporciona un m\u00e8tode newLine(), que utilitza la pr\u00f2pia noci\u00f3 de separador de l\u00ednies de la plataforma tal com es defineix per la propietat del sistema line.separator . No totes les plataformes utilitzen el car\u00e0cter de nova l\u00ednia ('\\n') per acabar les l\u00ednies. Per tant, es prefereix cridar aquest m\u00e8tode per acabar cada l\u00ednia de sortida que escriure directament un car\u00e0cter de nova l\u00ednia.</p> <p>Els m\u00e8todes de la classe s\u00f3n:</p> M\u00e8tode Explicaci\u00f3 void close() Tanca el corrent, rentant-lo primer void flush() Redueix el corrent void newLine() Escriu un separador de l\u00ednies void   write(char[] cbuf, int off, int len) Escriu una part d'una matriu de car\u00e0cters void write(int c) Escriu un sol car\u00e0cter void write(String s, int off, int len) Escriu una part d'una cadena <p>Exemple</p> <pre><code>import java.io.FileWriter;\nimport java.io.BufferedWriter;\n\nString data = \"This is the data in the output file\";\n\ntry {\n  // Creates a FileWriter\n  String strFile = sketchPath() + File.separator + \"output.txt\";\n\n  FileWriter file = new FileWriter(strFile);\n\n  // Creates a BufferedWriter\n  BufferedWriter output = new BufferedWriter(file);\n\n  // Writes the string to the file\n  output.write(data);\n\n  // Closes the writer\n  output.close();\n}\ncatch (Exception e) {\n  e.getStackTrace();\n}\n \n</code></pre>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#printwriter","title":"PrintWriter","text":"<p>Els fluxos m\u00e9s utilitzats en l\u2019eixida de car\u00e0cters s\u00f3n de tipus PrintWriter, aquesta classe declara constructors per associar un flux PrintWriter amb qualsevol altre de tipus Writer o b\u00e9 OutputStream.</p> M\u00e8tode Explicaci\u00f3 public PrintWriter(OutputStream dest\u00ed) Crea un flux associat amb un altre d\u2019eixida a nivell de byte. public PrintWriter(Writer destino) Crea un flux associat amb un altre d\u2019eixida de car\u00e0cters de tipus Writer. <p>La import\u00e0ncia d\u2019aquesta classe radica en que defineix m\u00e8todes print() i println() per cadascun dels tipus de dades simples, per String i per Object; la difer\u00e8ncia entre els m\u00e8todes print() i println() est\u00e0 en que el segon afegeix els car\u00e0cters de final de l\u00ednia a continuaci\u00f3 dels escrits per l\u2019argument. </p> M\u00e8tode Explicaci\u00f3 public void print(Object obj) Escriu la representaci\u00f3 de l\u2019objecte obj al flux public void print(String cad) Escriu la cadena al flux public void print(char c) Escriu el car\u00e0cter c al flux. public void println(Object obj) Escriu la representaci\u00f3 de l\u2019objecte obj al flux i final de l\u00ednia public void println(String cad) Escriu la cadena al flux i el final de l\u00ednia public void println(char c) Escriu el car\u00e0cter c al flux i final de l\u00ednia. <p>Exemple</p> <pre><code>import java.io.PrintWriter;\n\nString strFile = sketchPath() + File.separator + \"output.txt\";\nFileReader fr = new FileReader(strFile);\nString data = \"This is a text inside the file.\";\n\ntry {\n\nPrintWriter output = new PrintWriter(strFile);\n\noutput.print(data);\noutput.close();\n}\ncatch(Exception e) {\ne.getStackTrace();\n}\n</code></pre> Activitat 806. FileWriter, FileReader, BufferedReader i PrintWriter <p>Utilitzant les classes anteriors, obre un fitxer que continga text, llig tot el seu contingut i enregistra'l a un fitxer d'eixida amb la condici\u00f3 que has de canviar maj\u00fascules per min\u00fascules i a l'inrev\u00e9s des del fitxer d'origen.  </p> <p>Has de tindre en compte que Processing IDE incorpora les seues pr\u00f2pies classes BufferedReader i PrintWriter que podr\u00e0s utilitzar en combinaci\u00f3 amb FileWriter i FileReader per poder fer aquesta activitat.</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#arxius-dobjectes","title":"Arxius d'objectes","text":"<p>Fins ara hem tractat el tema d'entrada - eixida d'informaci\u00f3 utilitzant els tipus primitius o b\u00e0sics que ens proporciona el llenguatge de programaci\u00f3: int, char, float, String... per\u00f2 que passa si el que volem desar o llegir des d'un dispositiu extern \u00e9s un o diversos objectes? Com es guarden i com es recuperen aquestos objectes?</p> <p>Java proporciona una mecanisme que s'anomena serialitzaci\u00f3 que consisteix en convertir un objecte en una seq\u00fc\u00e8ncia de bytes de tal forma que, ara s\u00ed, es podr\u00e0 desar a un fitxer o un dispositiu extern. El proc\u00e9s de lectura d'un objecte serialitzat a un fitxer, per contra, s'anomena desserialitzaci\u00f3.</p> <p>Per tal que un objecte continue existint, \u00e9s a dir, que siga persistent, una vegada ja hem finalitzat l\u2019execuci\u00f3 d\u2019un programa o aplicaci\u00f3 l\u2019hem de desar a un arxiu d\u2019objectes. Per poder aconseguir a\u00e7\u00f2, utilitzarem les classes ObjectInputStream i ObjectOutputStream</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#classe-dobjecte-persistent","title":"Classe d'objecte persistent","text":"<p>Serialitzaci\u00f3: \u00e9s el proc\u00e9s de convertir un objecte (incloses les refer\u00e8ncies a altres objectes) a una seq\u00fc\u00e8ncia de bytes, aix\u00ed com tamb\u00e9 l'acci\u00f3 de reconstruir eixos bytes en un objecte viu en un futur. La serialitzaci\u00f3 s'utilitza quan vols persistir un objecte, \u00e9s a dir, que dure m\u00e9s que el que dura l'execuci\u00f3 d'un programa o aplicaci\u00f3.</p> <p>La declaraci\u00f3 de la classe els objectes de la qual van a ser persistents, han de implementar la interf\u00edcie \u00abserializable\u00bb del paquet java.io, la qual \u00e9s buida, no declara m\u00e8todes, simplement indica a la m\u00e0quina virtual de Java que les inst\u00e0ncies d\u2019aquestes classes podran gravar-se en un fitxer.</p> <p>Exemples</p> <pre><code>class racional implements serializable { ... }\n</code></pre> <pre><code>import java.io.Serializable;\n\npublic class SerialClass implements Serializable {\n   private static final long serialVersionUID = 1L;\n   private Date currentTime;\n\n   public SerialClass() {\n      currentTime = Calendar.getInstance().getTime();\n   }\n\n   public Date getCurrentTime() {\n      return currentTime;\n   }\n}\n</code></pre>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#objectoutputstream","title":"ObjectOutputStream","text":"<p>Els fluxos de la classe ObjectOutputStream s\u2019utilitzen per gravar objectes persistents. El m\u00e8tode writeObject() escriu qualsevol objecte d\u2019una classe serializable en el flux de bytes associat. Pot llen\u00e7ar excepcions del tipus IOException que \u00e9s necessari processar.</p> <pre><code>public void writeObject(Object obj) throws IOException;\n</code></pre> <p>El constructor de la classe espera un argument de tipus OutputStream, que \u00e9s la base dels fluxos d\u2019eixida a nivell de bytes, per tant, per crear aquest tipus de fluxos primer es crea un d\u2019eixida a nivell de bytes associat a un arxiu extern i a continuaci\u00f3, es passa com argument al constructor de ObjectOutputStream, per exemple:</p> <pre><code>String strFile = sketchPath() + File.separator + \"dadesRac.dat\";\nFileReader fr = new FileReader(strFile);\nFileOutputStream bn = new FileOutputStream(strFile);\nObjectOutputStream fobj = new ObjectOutputStream(bn);\nbn.close();\nfobj.close();\n</code></pre> <p>A continuaci\u00f3 es pot escriure qualsevol objecte al flux:</p> <pre><code>Persona juan = new Persona(\"Juan\",\"Martin\", \"123432123X\");\nfobj.writeObject(juan);\nString str = new String (\"Cadena de favors\");\nfobj.write(str);\nfobj.close();\n</code></pre>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#objectinputstream","title":"ObjectInputStream","text":"<p>El objectes guardats en arxius amb fluxos de la classe ObjectOutputStream es recuperen i lligen amb fluxos d\u2019entrada del tipus ObjectInputStream, aquesta classe \u00e9s una extensi\u00f3 d\u2019InputStream, a m\u00e9s a m\u00e9s, implementa la interf\u00edcie DataInput, per aix\u00f2 disposa de diversos m\u00e8todes d\u2019entrada (read) per cadascun dels tipus de dades com readInt() o altres. El m\u00e8tode m\u00e9s important definit per la classe ObjectInputStream \u00e9s readObject(), el qual llig un objecte del flux d\u2019entrada, \u00e9s a dir, de l\u2019arxiu associat al flux de baix nivell; l\u2019objecte llegit es va escriure en el seu moment amb el m\u00e8tode writeObject()</p> <pre><code>public Object readObject() throws IOException;\n</code></pre> <p>El constructor de fluxos ObjectInputStream t\u00e9 com entrada un altre flux de baix nivell de qualsevol tipus derivat d\u2019InputStream, per exemple: FileInputStream associat amb l\u2019arxiu d\u2019objectes. A continuaci\u00f3 es crea un flux d\u2019entrada per llegir els objectes de l\u2019arxiu \u00abarxiuObjects.dat\u00bb</p> <pre><code>ObjectInputStream obj = new ObjectInputStream(new FileInputStream(\"arxiuObjects.dat\"));\nobj.close();\n</code></pre> <p>El constructor de la classe ObjectOutputStream llen\u00e7a una excepci\u00f3 si, per exemple, l\u2019arxiu no existeix, aquella \u00e9s del tipus \u00abClassNotFoundException\u00bb o \u00abIOException\u00bb, \u00e9s necessari poder capturar aquestes excepcions</p> Compte on poses el codi <p>Ja que l'entorn de desenvolupament que estem utilitzant, Processing IDE, no \u00e9s un IDE a l'\u00fas com l'Eclipse IDE, Visual Studio Code o NetBeans, la serialitzaci\u00f3 d'objectes pot donar errors. \u00c9s molt important que el codi relatiu als ObjectInputStream i ObjectInputStream estiga escrit en fitxers que no tinguen l'extensi\u00f3 .pde i tinguen una extensi\u00f3 .java. En altres paraules, aquelles classes que siguen susceptibles de ser serialitzades: </p> <p>(1) Tindran tot el codi amb els objectes ObjectOutputStream i ObjectInputStream per poder llegir i escriure objectes en fitxers.   (2) Es desaran amb l'extensi\u00f3 java i MAI pde.</p> MainDog <pre><code>// Creates an object of Dog class\n  Dog dog = new Dog(\"Tyson\", \"Labrador\");\n  dog.save();\n</code></pre> <pre><code>import java.io.*;\n\npublic class Dog implements Serializable {\n\n   String name;\n   String breed;\n\n   public Dog(String name, String breed) {\n      this.name = name;\n      this.breed = breed;\n   }\n\n   public void save () {\n      try {\n            FileOutputStream file = new FileOutputStream(\"file.txt\");\n\n            // Creates an ObjectOutputStream\n            ObjectOutputStream output = new ObjectOutputStream(file);\n\n            // Writes objects to the output stream\n            output.writeObject(dog);\n\n            FileInputStream fileStream = new FileInputStream(\"file.txt\");\n\n            // Creates an ObjectInputStream\n            ObjectInputStream input = new ObjectInputStream(fileStream);\n\n            // Reads the objects\n            Dog newDog = (Dog) input.readObject();\n\n            System.out.println(\"Dog Name: \" + newDog.name);\n            System.out.println(\"Dog Breed: \" + newDog.breed);\n\n            output.close();\n            input.close();\n      }\n\n      catch (Exception e) {\n            e.printStackTrace();\n      }    \n   }\n}\n</code></pre> Activitat 807. Classe alumne <p>Dissenya una aplicaci\u00f3 amb Processing IDE on es podr\u00e0 per un costat introduir informaci\u00f3 d'alumnes que es guardaran en un fitxer que s'anomene: 'alumnes.dat'. </p> <p>Al principi l'aplicaci\u00f3 llegir\u00e0 de l'arxiu 'alumnes.dat' tots els alumnes inscrits al curs i els mostrar per pantalla, ordenats alfab\u00e8ticament pel cognom. </p> <p>Una vegada haja mostrat tots els alumnes, l'aplicaci\u00f3 esperar\u00e0 que s'introduisca algun alumne nou per consola, una vegada introduits totes les dades de l'alumne, aquesta es guardar\u00e0 en un objecte primer i despr\u00e9s al fitxer 'alumnes.dat' a continuaci\u00f3 dels que ja havien estat enregistrats. </p> <p>Finalment tornar\u00e0 a mostrar els alumnes ordenats alfab\u00e8ticament i torna a comen\u00e7ar.</p> <p>Descarrega un exemple ac\u00ed</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#fitxers-xml","title":"Fitxers XML","text":"Activitat 808. Processa un document XML en Java <p>Crear classe Alumne crear estructura xml amb alumnes carregar un arraylist d'alumnes al main. La classe Alumne ha de tindre m\u00e8todes LoadXML ....</p> Activitat 809. Aplicaci\u00f3 traductora amb XML"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#excepcions","title":"Excepcions","text":"<p>Un problema important en el desenvolupament del programari \u00e9s la gesti\u00f3 de les errades o errors. No importa quan b\u00e9 estiga planificat aquest desenvolupament i quan eficient siga l\u2019equip desenvolupador. \u00c9s una m\u00e0xima en inform\u00e0tica el fet que sempre apareixeran problemes. Aquests problemes inesperats s\u00f3n problemes o errors que apareixen en temps d\u2019execuci\u00f3, per exemple: esgotament de mem\u00f2ria o recursos, errors en els intervals dels bucles, divisions per zero, arxius no existents, etc..</p> <p>Les excepcions s\u00f3n el mecanisme previst per Java per tractar aquests problemes sobrevinguts. Amb les excepcions, Java dona la possibilitat al programador salvar aquest tipus de situacions de manera controlada sense que el programa o aplicaci\u00f3 es tanque, bloquege o deixe de respondre.</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#condicions-derrors-en-programes","title":"Condicions d'errors en programes","text":"<p>Programar, escriure codi, m\u00e8todes, classes, etc.. que siga eficient, efica\u00e7 i lliure d\u2019errades \u00e9s altament complicat. El control d\u2019errades \u00e9s una part tant important en el disseny d\u2019aplicacions que a totes les diferents metodologia de cicle de vida software, hi ha una fase que es dedica \u00fanica i exclusivament a detectar aquestes errades i solucionar-les i aix\u00ed i tot \u00e9s impossible produir programari totalment lliure d\u2019errades.</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#tractament-dels-codis-derror","title":"Tractament dels codis d'error","text":"<p>Java inclou un mecanisme de gesti\u00f3 d\u2019excepcions per poder intentat cobrir possibles errades en els programes en temps d\u2019execuci\u00f3. Aquest mecanisme consisteix en capturar (catch) els errors quan es produeixen en temps d\u2019execuci\u00f3.</p> <p>Quan es produeix un fallo en temps d\u2019execuci\u00f3 es podrien fer tres coses: parar l\u2019execuci\u00f3 de sobte, continuar executant esperant que no passe res o establir una senyal d\u2019error que el mateix codi amb altres sent\u00e8ncies s\u2019encarregue de gestionar.</p> <p>Aquestes senyals que envia (throw) el programa quan es produeix alguna errada en Java s\u2019anomenen excepcions i el bloc del codi on es posen les sent\u00e8ncies per tal d\u2019intentar solucionar-lo en temps d\u2019execuci\u00f3 \u00e9s el bloc catch.</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#excepcions-en-java","title":"Excepcions en Java","text":"<p>Una excepci\u00f3 \u00e9s un fallo que es produeix en temps d\u2019execuci\u00f3. Si hem escrit b\u00e9 el codi per tal de gestionar aquest fallo, el flux d\u2019execuci\u00f3 passa al codi destinat a gestionar les excepcions, en cas contrari el programa acaba la seua execuci\u00f3.</p> <p>Aquestes excepcions es poden produir per exemple si intenten accedir a un element d\u2019un array fora dels seus l\u00edmits, si intentem obrir un fitxer que no existeix o est\u00e0 bloquejat, si dividim per zero, etc..</p> <p>El model de gesti\u00f3 d\u2019excepcions a Java afegeix cinc noves paraules reservades: try, throw, throws, catch i finally.</p> <ul> <li>try: bloc on es detectaran les excepcions</li> <li>catch: captura les excepcions que es produeixen al bloc try </li> <li>throw: expressi\u00f3 per llen\u00e7ar excepcions</li> <li>throws: indica les excepcions que pot llen\u00e7ar un m\u00e8tode.</li> <li>finally: bloc opcional situat despr\u00e9s del try catch</li> </ul> <p>Les passes del model de control d\u2019excepcions en Java s\u00f3n:</p> <ol> <li>El bloc try cont\u00e9 les instruccions o part del codi susceptible de provocar algun error.</li> <li>Si en temps d\u2019execuci\u00f3 es produeix algun error dins de les sent\u00e8ncies que es troben dins del bloc try, es llen\u00e7a una excepci\u00f3.</li> <li>S\u2019executa el codi que es troba dins del bloc catch associat a la excepci\u00f3 que s\u2019ha llen\u00e7at al punt anterior.</li> <li>S\u2019executa el bloc finally (opcional)</li> </ol> <p>Exemple. Suposem una classe persona que incorporarem a la nostra aplicaci\u00f3. Aquesta classe t\u00e9 un constructor al qual se li passa el DNI, imaginem ara que de la nostra aplicaci\u00f3 instanciem un objecte de la classe persona a la qual l direm Joan per\u00f2 quan cridem al constructor de la classe no li passem un DNI, aquest \u00abmal \u00fas\u00bb de la classe Persona, llen\u00e7aria una excepci\u00f3 que hauria de capturar la nostra aplicaci\u00f3 al bloc catch i \u00e9s ac\u00ed, en aquest bloc d\u2019instruccions, en el que s\u2019hauria de corregir la situaci\u00f3 o avisar a l\u2019usuari de l\u2019aplicaci\u00f3 del que ha passat.</p> <pre><code>public void escolta () throws Exception {\n   // Codi del metode escolta\n   // ...\n   throw new Exception ();\n}\n\nvoid setup () {\n   try {\n      escolta();\n   }\n   catch(Exception e) {\n      // Codi a executar quan es produeix una excepci\u00f3.\n   }\n}\n</code></pre> <p>Al codi anterior hem crear un m\u00e8tode escolta que l\u2019\u00fanic que fa \u00e9s llen\u00e7ar una excepci\u00f3. Quan al m\u00e8tode main cridem a la funci\u00f3 escolta, si volem fer \u00fas del sistema d\u2019excepcions de Java, l\u2019haurem de posar dins del bloc try. Just despr\u00e8s d\u2019acabar el conjunt d\u2019instruccions del bloc try posem un catch indicant-li quina \u00e9s la classe d\u2019excepci\u00f3 que hauriem de capturar, al nostre cas Exception, i dins del bloc catch posariem el codi que s\u2019hauria d\u2019executar en cas de produir-se eixe error. Normalment es solen posar missatges d\u2019error que alerten l\u2019usuari de l\u2019aplicaci\u00f3.</p> <p>A continuaci\u00f3 explicarem amb m\u00e9s detall qu\u00e8 \u00e9s el que fan cadascun dels blocs del mecanisme d\u2019excepcions que ha dissenyat Java.</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#bloc-try","title":"Bloc try","text":"<p>Dins del bloc try s\u2019han de posar aquelles sent\u00e8ncies que poden llen\u00e7ar alguna excepci\u00f3 entre claud\u00e0tors, despr\u00e9s del claud\u00e0tor de tancament s\u2019ha de posar el bloc catch o controlador d\u2019excepcions almenys un bloc catch. Si l\u2019excepci\u00f3 que es produeix coincideix amb algun dels par\u00e0metres dels blocs catch que hi han, s\u2019executen les sent\u00e8ncies que es troben a dintre.</p> <p>Els blocs try, de la mateixa forma que amb totes les sent\u00e8ncies de programaci\u00f3 estructurada, es poden niar.</p> <pre><code>void setup (String [] args) {\n   try {\n      escolta();\n\n      try {\n         tornaAEscoltar();\n      }\n      catch (Exception e) {\n         // Codi excepci\u00f3 interna\n      }\n   }\n   catch (Exception e) {\n      // Codi excepci\u00f3 externa\n   }\n}\n</code></pre> <p>A l\u2019exemple anterior \u00e9s pot observar un codi amb dos blocs try niats on el primer bloc try t\u00e9 dos blocs catch per controlar varies excepcions</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#bloc-throw","title":"Bloc throw","text":"<p>La sent\u00e8ncia throw llen\u00e7a (raise) una excepci\u00f3. Les excepcions en Java s\u00f3n objectes, per tant, una excepci\u00f3 \u00e9s una inst\u00e0ncia d\u2019una classe que deriva de la classe Exception A l\u2019exemple anterior com es pot observar es capturen dos tipus d\u2019excepcions diferents, una generica Exception i una altra FileNotFoundException. Aquesta \u00faltima es produeix normalment quan volem obrir un fitxer, amb la classe File per exemple, i aquest no existeix.    </p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#bloc-catch","title":"Bloc catch","text":"<p>El bloc catch o de captura d\u2019excepcions. Quan una excepci\u00f3 es llen\u00e7a des d\u2019un bloc try, si el tipus d\u2019excepci\u00f3 que s\u2019ha llen\u00e7at coincideix amb el tipus d\u2019excepci\u00f3 que s\u2019ha passat per par\u00e0metre al catch, s\u2019executarien les sent\u00e8ncies que hi han dins del bloc catch. Normalment es sol posar el codi necessari per poder eixir de la situaci\u00f3 en la que ens trobem quan s\u2019al\u00e7a una excepci\u00f3.</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#clausula-finally","title":"Cl\u00e0usula finally","text":"<p>El bloc finally en un try..catch, \u00e9s el bloc d\u2019instruccions que s\u2019executar\u00e0 sempre, hi haja excepcions o no, al final de tot el nostre codi.  Normalment es solen posar sent\u00e8ncies per tal d\u2019alliberar tot all\u00f2 que podem haver creat dins del bloc try, \u00e9s a dir, tancar fluxos, fitxers, connexions a bases de dades etc..amb la finalitat d\u2019alliberar mem\u00f2ria.</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#classes-dexcepcions-en-java","title":"Classes d'excepcions en Java","text":""},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#creacio-dexcepcions","title":"Creaci\u00f3 d'excepcions","text":"<p>Java permet la creaci\u00f3 d\u2019excepcions noves que deriven de la classe base Exception</p> Activitat 810. Crear i utilitzar una excepci\u00f3 personalitzada <p>Crea una classe d'excepci\u00f3 personalitzada anomenada NumeroNegatiuException que hereti de la classe Exception. Aquesta excepci\u00f3 s'haur\u00e0 de llan\u00e7ar quan un valor num\u00e8ric negatiu sigui introdu\u00eft en el programa.</p> <p>Crea un m\u00e8tode anomenat verificarNumero(int numero) que comprovi si el n\u00famero \u00e9s negatiu. Si el n\u00famero \u00e9s negatiu, ha de llen\u00e7ar la teva excepci\u00f3 personalitzada (NumeroNegatiuException).</p> <p>En el m\u00e8tode main, crida el m\u00e8tode verificarNumero i captura la excepci\u00f3 per mostrar un missatge d'error si s'introdueix un n\u00famero negatiu.</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#introduccio_1","title":"Introducci\u00f3","text":"<p>Fins ara hem estat utilitzant els esdeveniments keyPressed i mouseClicked per tal d'interactuar amb l'usuari o b\u00e9 tamb\u00e9 utilitzant di\u00e0legs popup.....</p> <p>En aquest tema utilitzarem una llibreria de Processing IDE que es diu controlP5 que s'instal\u00b7la des del men\u00fa ** Tools --&gt; Manage Tools. Al di\u00e0leg que s'obre anem a la pestanya Libraries i busquem i instal\u00b7lem la llibreria ControlP5**</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#la-llibreria-controlp5","title":"La llibreria ControlP5","text":"<p>ControlP5 \u00e9s una col\u00b7lecci\u00f3 de controladors per crear una interf\u00edcie d'usuari gr\u00e0fica a la part superior del vostre esb\u00f3s de processament inclouen controls lliscants, botons, commutadors, botons, camps de text, botons de r\u00e0dio, caselles de verificaci\u00f3, entre d'altres, i es poden afegir f\u00e0cilment a un esb\u00f3s de processament. Es poden organitzar en contextos PGraphics de control separats i es poden organitzar en pestanyes o grups.</p> <p>Amb ControlP5 podem fer:</p> <ul> <li>Grups: poden agrupar diversos controls.</li> <li>Botons</li> <li>Etiquetes de text o labels.</li> <li>Camps i arees de text.</li> <li>Desplegables</li> <li>Entre molts altres..</li> </ul> <p> </p> <p>Per tal de poder utilitzar les llibreries ControlP5 de Processing nom\u00e9s hauriem d'instal\u00b7lar la llibreria com s'instal\u00b7len les llibreries a Processing IDE.</p> <p>Particularitats Processing IDE i ControlP5</p> <pre><code>Una vegada ja tens instal\u00b7lada la llibreria i abans de passar a utilitzar-la, has de tenir en compte una s\u00e8rie de consideracions molt importants per tal que funcione correctament.\n\n1. Processing treballa la part gr\u00e0fica de l'entorn amb una classe anomenada PApplet que \u00e9s la que s'utilitza per a dibuixar els **sketch** i a la qual tamb\u00e9 s'associen els controls derivats de la llibreria **ControlP5**. Per tant per poder utilitzar-la als nostres projectes ens hem d'assegurar que la classe que continga els controls ha de tindre acc\u00e9s al PApplet principal (main).\n\n2. La classe que continga els controls, una classe Men\u00fa per exemple, si volem que la interacci\u00f3 amb l'usuari funcione de forma correcta, haur\u00e0 d'implementar la interf\u00edcie **ControlListener**  per tant, haur\u00e0 de tindre el m\u00e8tode public void controlEvent(ControlEvent theEvent).\n</code></pre>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#botons","title":"Botons","text":"<p>Un bot\u00f3 dispara un esdeveniment despr\u00e9s de que s'allibere. Els esdeveniments del bot\u00f3 es poden associar a funcions dins de la teua aplicaci\u00f3. Si vols veure m\u00e9s informaci\u00f3 d'aquest control pots anar a la documentaci\u00f3 de la classe Controller.</p> <p>Primer crearem una xicoteta aplicaci\u00f3 per posar botons i veure amb un poc m\u00e9s de detall com funcionen i que es pot fer amb ells. </p> MainMenu <pre><code>    Menu menu;\n\n    void setup () {\n        size(640,480);\n        menu = new Menu(this);\n    }   \n\n    void draw () {\n        menu.display();\n    }\n</code></pre> <pre><code>    import controlP5.*;\n\n    public class Menu implements ControlListener {\n\n        private ControlP5 cp5;\n        private Button boto1;\n\n        public Menu(PApplet parent){\n            cp5 = new ControlP5(parent);\n    \n            boto1 = cp5.addButton(\"BOT\u00d3\", 1);\n            boto1.setPosition(250,150);\n            boto1.setSize(150,50);\n            boto1.setColorActive(color(125,125,255));\n        }\n\n        public void controlEvent(ControlEvent theEvent) {  \n            \n        }\n\n    public void display(){\n        boto1.show();\n    }\n}\n</code></pre> <p>Al codi anterior s'ha creat la classe Men\u00fa que \u00e9s la que contindr\u00e0 els controls de controlP5. Al nostre cas es tractar\u00e0 inicialment d'un sol bot\u00f3 amb text BOTO1 a la posici\u00f3 (250,150) amb una grand\u00e0ria de 150 per 150 p\u00edxels de color blau. Com pots observar tamb\u00e9 he implementat el m\u00e8tode (buit de moment) controlEvent ja que es tracta d'una classe que implementa la interf\u00edcie ControlListener. Finalment hem posat un m\u00e8tode display public en el que b\u00e0sicament el que es fa \u00e9s cridar al m\u00e8tode show() de la classe Button de la llibreria ControlP5.</p> <p>Al executar eixe codi es mostra el seg\u00fcent:</p> <p> </p> <p>Ara ens quedaria com aconseguir que es puga interactuar amb l'usuari, en altres paraules, que quan l'usuari prema el bot\u00f3 l'aplicaci\u00f3 faja alguna cosa. Per aconseguir-ho cal fer dues coses: la primera \u00e9s afegir-li a l'objecte controlP5 qui ser\u00e0 el que est\u00e0 escoltant les accions que es poden realitzar amb els controls que cont\u00e9, b\u00e0sicament fer clic sobre el bot\u00f3 en el nostre cas. Aix\u00f2 es fa afegint-li al controlP5 un listener just despr\u00e9s de la instanciaci\u00f3 d'aquest.</p> <pre><code>    cp5 = new ControlP5(parent);\n    cp5.addListener(this);\n</code></pre> <p>En altres paraules el que li estem dient al bot\u00f3 \u00e9s que quan el premem, el codi que ha d'executar-se associat al bot\u00f3 es troba a la mateixa classe Menu (this) mitjan\u00e7ant el m\u00e8tode controlEvent de la interf\u00edcie ControlListener</p> <p>Finalment ens quedaria escriure el codi necessari al m\u00e8tode controlEvent amb les accions que volem que es produeixen quan fem clic sobre el bot\u00f3.</p> <p>ControlEvent NO \u00e9s un m\u00e8tode de bot\u00f3</p> <pre><code>Heu de tenir en compte que el m\u00e8tode **controlEvent** \u00e9s un m\u00e8tode que pot respondre a accions de l'usuari en diferents controls de la mateixa classe. \u00c9s a dir, que la nostra classe men\u00fa pot tindre m\u00e9s d'un bot\u00f3 i tots els esdeveniments executaran el m\u00e8tode en q\u00fcesti\u00f3.\n</code></pre> MainMenu <pre><code>    Menu menu;\n\n    void setup () {\n        size(640,480);\n        menu = new Menu(this);\n    }   \n\n    void draw () {\n        menu.display();\n    }\n</code></pre> <pre><code>    import controlP5.*;\n\n    public class Menu implements ControlListener {\n\n        private ControlP5 cp5;\n        private Button boto1;\n\n        public Menu(PApplet parent){\n            cp5 = new ControlP5(parent);\n            cp5.addListener(this);\n    \n            boto1 = cp5.addButton(\"BOT\u00d3\", 1);\n            boto1.setPosition(250,150);\n            boto1.setSize(150,50);\n            boto1.setColorActive(color(125,125,255));\n        }\n\n        public void controlEvent(ControlEvent theEvent) {  \n            switch (theEvent.getName()) {\n                case \"boto1\":\n                    println(\"cas 1\");\n                break;\n            }\n        }\n\n        public void display(){\n            boto1.show();\n        }\n    }\n</code></pre> <p>Per acabar, qu\u00e8 passa si el que volem quan es premi un bot\u00f3 modifique l'estat del programa principal? Hem d'aprofitar que al constructor de la classe men\u00fa se li passa el pare (programa principal en el nostre cas) i per tant des dels esdeveniments de la classe Men\u00fa podriem cridar a m\u00e8todes de la classe pare. Per tant tot all\u00f2 que volem que siga susceptible de modificar-se des de classes externes com el men\u00fa, haurem de crear m\u00e8todes als quals podem cridar des del men\u00fa.</p> MainMenu <pre><code>    Menu menu;\n\n    void setup () {\n        size(640,480);\n        menu = new Menu(this);\n    }   \n\n    void draw () {\n        menu.display();\n    }\n\n    void mostraText (String strText) {\n        println(strText);\n    }\n</code></pre> <pre><code>    import controlP5.*;\n\n    public class Menu implements ControlListener {\n\n        private ControlP5 cp5;\n        private Button boto1;\n\n        public Menu(PApplet parent){\n            cp5 = new ControlP5(parent);\n            cp5.addListener(this);\n    \n            boto1 = cp5.addButton(\"BOT\u00d3\", 1);\n            boto1.setPosition(250,150);\n            boto1.setSize(150,50);\n            boto1.setColorActive(color(125,125,255));\n        }\n\n        public void controlEvent(ControlEvent theEvent) {  \n            switch (theEvent.getName()) {\n                case \"boto1\":\n                    mostraText(\"Clic bot\u00f3 1\");\n                break;\n            }\n        }\n\n        public void display(){\n            boto1.show();\n        }\n    }\n</code></pre> <p>Al codi anterior hi ha un exemple amb el codi necessari per tal que un bot\u00f3 quan es premi mostre per terminal un text, per\u00f2 compliquem-ho un poc m\u00e9s. A continuaci\u00f3 farem una aplicaci\u00f3 simple amb tres botons (centrats) dalt d'una pantalla de 640 per 480 p\u00edxels on cadascun dels botons el que far\u00e0 ser\u00e0 pintar la pantalla de fons d'un color concret. Per exemple: un bot\u00f3 que es diga Roig i pinte de roig el fons, un bot\u00f3 Verd que pinte de verd i finalment un bot\u00f3 Blau que pinte de blau.</p> MainMenu <pre><code>    Menu menu;\n    color fons;\n\n    void setup () {\n        size(640,480);\n        fons = color(255);\n        menu = new Menu(this);\n    }\n\n    void draw () {\n        background(fons);\n        menu.display();\n    }\n\n    void mostraText (String strText) {\n        println(strText);\n    }\n</code></pre> <pre><code>    import controlP5.*;\n\n    public class Menu implements ControlListener {\n    \n        ControlP5 cp5;\n        Button btnRoig, btnVerd, btnBlau;\n        \n        public Menu(PApplet parent){\n            cp5 = new ControlP5(parent);\n            cp5.addListener(this);\n            \n            btnRoig = cp5.addButton(\"ROIG\", 1);\n            btnRoig.setPosition(50,30);\n            btnRoig.setSize(150,50);\n            btnRoig.setColorActive(color(220,0,0));\n            btnRoig.setFont(createFont(\"Arial\", 12)); \n            \n            btnVerd = cp5.addButton(\"VERD\", 1);\n            btnVerd.setPosition(250,30);\n            btnVerd.setSize(150,50);\n            btnVerd.setColorActive(color(0,200,0));\n            btnVerd.setFont(createFont(\"Arial\", 12)); \n            \n            btnBlau = cp5.addButton(\"BLAU\", 1);\n            btnBlau.setPosition(450,30);\n            btnBlau.setSize(150,50);\n            btnBlau.setColorActive(color(0,0,200));\n            btnBlau.setFont(createFont(\"Arial\", 12));                 \n        }\n        \n        public void controlEvent(ControlEvent theEvent) {  \n            switch (theEvent.getName()) {\n                case \"ROIG\":\n                    mostraText(\"Pintem de roig\");\n                    fons = color(200,0,0);\n                break;\n                \n                case \"VERD\":\n                    println(\"Pintem de verd\");\n                    fons = color(0,200,0);\n                break;\n                \n                case \"BLAU\":\n                    println(\"Pintem de blau\");\n                    fons = color(0,0,200);\n                break;\n                \n                default:\n                    println(\"Ni idea de que ha passat\");\n                break;\n            }\n        }\n        \n        public void display(){\n            btnRoig.show();\n            btnVerd.show();\n            btnBlau.show();\n        }\n    }\n</code></pre> Activitat 901. Crea una aplicaci\u00f3 amb un bot\u00f3 <p>Dissenya una aplicaci\u00f3 amb un men\u00fa que tinga quatre botons.</p> <pre><code>1. El primer s'encarregar\u00e0 d'alternar el color de fons de l'aplicaci\u00f3 entre pistatxo i fuchsia.\n2. El segon demanar\u00e0 el nom de l'usuari utilitzant la classe JOptionPane i despr\u00e9s saludar\u00e0 amb el text: \"Hola ...\"\n3. El tercer bot\u00f3 dibuixar\u00e0 cercles del color contrari del fons en una posici\u00f3 aleat\u00f2ria i de grand\u00e0ria 20 p\u00edxels.\n4. El quart bot\u00f3 ha de tancar l'aplicaci\u00f3.\n</code></pre>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#checkbox","title":"CheckBox","text":"<p>En inform\u00e0tica, una casella de verificaci\u00f3, check box, checkbox, tickbox o tick box es un element de interacci\u00f3 de la interf\u00edcie gr\u00e0fica d'usuari del Sistema Operatiu, que permet a este fer selecciones m\u00faltiples d'un conjunto de opcions, marcar respostes, etc.. </p> <p>Per\u00f2 vegem un exemple. Crearem un checkbox amb sis opcions m\u00faltiples que l'usuari podr\u00e0 marca i desmarcar. Despr\u00e9s entrarem m\u00e9s en detall de com controlar els esdeveniments dispara la interacci\u00f3 de l'usuari amb el checkbox.</p> MainOpcions <pre><code>    Opcions opcions;\n\n    void setup () {\n        size(640,480);\n        opcions = new Opcions(this);\n    }\n\n    void draw () {\n        opcions.display();\n    }\n</code></pre> <pre><code>    import controlP5.*;\n\n    public class Opcions implements ControlListener {\n    \n        ControlP5 cp5;\n        Button boto1;\n        CheckBox checkbox;\n        \n        public Opcions(PApplet parent){\n            cp5 = new ControlP5(parent);\n            cp5.addListener(this);\n                \n            checkbox = cp5.addCheckBox(\"checkBox\");\n            checkbox.setPosition(100, 200);\n            checkbox.setColorLabels(color(255,0,0));\n            checkbox.setSize(40, 40);\n            checkbox.setItemsPerRow(3);\n            checkbox.setSpacingColumn(35);\n            checkbox.setSpacingRow(30);\n            checkbox.addItem(\"OPCIO1\", 50);\n            checkbox.addItem(\"OPCIO2\", 100);\n            checkbox.addItem(\"OPCIO3\", 150);\n            checkbox.addItem(\"OPCIO4\", 200);\n            checkbox.addItem(\"OPCIO5\", 255);    \n        }\n        \n        public void controlEvent(ControlEvent theEvent) {\n            switch (theEvent.getName()) {\n                case \"checkBox\":\n                    println(\"CheckBox clicat\");\n                break;\n            \n                default:\n                    println(\"ERROR (controlEvent): \" + theEvent.getName());\n                break;\n            }\n        }\n        \n        public void display(){\n            checkbox.show();\n        }\n    }\n</code></pre> <p>Ara ens queda la part en la que obtenim del nostre checkbox quina o quines s\u00f3n les opcions seleccionades, recorda que un checkbox \u00e9s un control de selecci\u00f3 m\u00faltiple, i quines s\u00f3n les accions a realitzar en base a les opcions clicades, \u00e9s a dir, programar els esdeveniments associats al checkbox. Per aix\u00f2 canviarem el nom de les opcions per tal que siguen m\u00e9s significatives del que es suposa que faran.</p> <p>Canvia al codi anterior les l\u00ednies addItem per les seg\u00fcents:</p> <pre><code>    checkbox.addItem(\"ROIG\", 50);\n    checkbox.addItem(\"FONT GRAN\", 100);\n    checkbox.addItem(\"VORA\", 150);\n    checkbox.addItem(\"VERTICAL\", 200);\n    checkbox.addItem(\"HORITZONTAL\", 255);    \n</code></pre> <p>Ara hauriem de implementar el m\u00e8tode controlEvent(ControlEvent theEvent). Escriu el seg\u00fcent codi i observa el que passa:</p> <pre><code>    public void controlEvent(ControlEvent theEvent) {\n        switch (theEvent.getName()) {\n        case \"checkBox\":\n            println(\"CheckBox clicat\");\n            List &lt;Toggle&gt; optionsList = checkbox.getItems();\n            for (Toggle item : optionsList) {\n                println(\"opci\u00f3 \" + t.getName() + \" - \" + item.getState());\n            }\n        break;\n        \n        default:\n            println(\"ERROR (controlEvent): \" + theEvent.getName());\n        break;\n        }\n    }\n</code></pre> <p>Amb el codi anterior, quan fages clic sobre alguna de les opcions del nostre control de selecci\u00f3 m\u00faltiple, es mostraran al terminal totes les opcions com les hem programades i quin valor tenen: true (checked), false (not checked).</p> <p>Configuraci\u00f3 de la font</p> <p>Segurament haur\u00e0s observat que la grand\u00e0ria del text de les opcions costa un poc de llegir. Si vols canviar les caracter\u00edstiques de la font que es mostra a les opcions, afegeix la seg\u00fcent l\u00ednia:</p> <pre><code>    cp5.setFont(createFont(\"Arial\",10,true));\n</code></pre> Activitat 902. Crea una aplicaci\u00f3 amb un checkbox <p>Crea una aplicaci\u00f3 que tinga una llista d'opcions (checkbox) i un bot\u00f3. Al llistat d'opcions (checkbox) l'usuari determinar\u00e0 les caracter\u00edstiques d'un rectangle que es dibuixar\u00e0 quan fem clic sobre el bot\u00f3.</p> <p>Les caracter\u00edstiques que es podran determinar del rectangle s\u00f3n:</p> <pre><code>1. Si te vora o no te vora.\n2. Si est\u00e0 pintat per dins o no.\n3. Si la grandaria de la font es gran o no.\n4. El\u00b7lipse vertical.\n5. El\u00b7lipse horitzontal.\n</code></pre> <p>L'usuari seleccionar\u00e0 les opcions que considere i quan faja clic al bot\u00f3, es modificaran les caracter\u00edstiques de l'el\u00b7lipse que es dibuixar\u00e0 al centre de la pantalla de la nostra aplicaci\u00f3.</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#llistes-desplegables","title":"Llistes desplegables","text":"<p>Les llistes desplegables s\u00f3n un tipus de control que permet a l'usuari seleccionar una opci\u00f3 de totes les que cont\u00e9 la llista. Quan una llista desplegable est\u00e0 desactivat nom\u00e9s mostra un valor, en canvi si est\u00e0 activat, \u00e9s a dir, si fem clic sobre ella, desplegar\u00e0 una llista amb totes les opcions disponibles per tal que l'usuari puga triar-ne alguna.</p> <p>Aquest tipus de control l'haur\u00e0s vist per exemple a formularis de subscripci\u00f3 on pot triar la data de naixement, els mesos solen apareixer representats en una llista desplegable.</p> <p>Veja'm un exemple. Fem una aplicaci\u00f3 simple en la que es mostren tres desplegables on podrem triar la data de naixement (dd/mm/aaaa) i cada vegada que canviem algun element de les nostres llistes desplegables, mostrar\u00e0 un missatge felicitant-nos l'aniversari.</p> MainControls <pre><code>    Opcions opcions;\n\n    void setup () {\n        size(640,480);\n        opcions = new Opcions(this);\n        strDia = \"1\";\n        strMes = \"GENER\";\n        strAny = \"1900\";\n    }\n\n    void draw () {\n        clear();\n        background(200);\n        opcions.display();\n        textSize(40);\n        textAlign(CENTER);\n        text(strDia + \" - \" + strMes + \" - \" + strAny, 320, 240); \n    }\n</code></pre> <pre><code>    import java.util.*;\n    import controlP5.*;\n\n    public class Opcions implements ControlListener {\n        private ControlP5 cp5;\n        private ScrollableList ddlDia, ddlMes, ddlAny;\n        \n        public Opcions(PApplet parent){\n            cp5 = new ControlP5(parent);\n            cp5.addListener(this);\n            cp5.setFont(createFont(\"Arial\",12,true));\n            \n            ddlDia = cp5.addScrollableList(\"dia\");\n            ddlDia.setHeight(200);\n            ddlDia.setPosition (50,50);\n            ddlDia.setBarHeight(22);\n            ddlDia.setItemHeight(22);\n            ddlDia.setOpen(false);\n            for (int i=1; i &lt;= 31; i ++)\n                ddlDia.addItem(String.valueOf(i),i);\n            \n            ddlMes = cp5.addScrollableList(\"mes\");\n            ddlMes.setHeight(200);\n            ddlMes.setPosition(160,50);\n            ddlMes.setBarHeight(20);\n            ddlMes.setItemHeight(20);\n            ddlMes.setOpen(false);\n            ddlMes.addItem(\"GENER\",  1);\n            ddlMes.addItem(\"FEBRER\",  2);\n            ddlMes.addItem(\"MAR\u00c7\",  3);\n            ddlMes.addItem(\"ABRIL\",  4);\n            ddlMes.addItem(\"MAIG\",  5);\n            ddlMes.addItem(\"JUNY\",  6);\n            ddlMes.addItem(\"JULIOL\",  7);\n            ddlMes.addItem(\"AGOST\",  8);\n            ddlMes.addItem(\"SETEMBRE\",  9);\n            ddlMes.addItem(\"OCTUBRE\", 10);\n            ddlMes.addItem(\"NOVEMBRE\", 11);\n            ddlMes.addItem(\"DESEMBRE\", 12);\n            \n            ddlAny = cp5.addScrollableList(\"any\");\n            ddlAny.setHeight(200);\n            ddlAny.setPosition(270,50);\n            ddlAny.setBarHeight(20);\n            ddlAny.setItemHeight(20);\n            ddlAny.setOpen(false);\n            for(int i=1950; i &lt; 2020; i++)\n                ddlAny.addItem(String.valueOf(i), i);\n        }\n        \n        public void controlEvent(ControlEvent theEvent) {\n            \n        }\n        \n        public void display() {\n            ddlDia.show();\n            ddlMes.show();\n            ddlAny.show();\n        }\n    }\n</code></pre> <p>Al codi anterior pots observar que el controlP5 que usem \u00e9s ScrollableList. En total hem instanciant tres ScrollableLists, una per als dies del mes (1-31), la segona per als mesos (\"GENER - DESEMBRE\") i finalment una altra per a l'any de la data de naixement.</p> <p>ControlP5 DropDownList</p> <p>Tamb\u00e9 existeix dins del repositori de controls de la llibreria ControlP5 el control DropdownList per\u00f2 aquest est\u00e0 obsolet i no \u00e9s recomanable utilitzar-lo si existeixen alternatives.</p> <p>Una vegada tenim els controls creats el que hem fet ha sigut afegir-los els items que hi mostraran i el valor que tenen per poder treballar amb ells a posteriori.</p> <p>La part m\u00e9s complicada d'aquest tipus de controls est\u00e0 en com capturem la informaci\u00f3 una vegada la llista llen\u00e7a un esdeveniment (clic normalment o value changed), en altres paraules, qu\u00e8 fem quan l'usuari canvie algun valor d'alguna llista desplegable. Mir a el codi i prova'l.</p> MainControls <pre><code>    Opcions opcions;\n    String strDia, strMes, strAny;\n\n    void setup () {\n        size(640,480);\n        opcions = new Opcions(this);\n        strDia = \"1\";\n        strMes = \"GENER\";\n        strAny = \"1900\";\n    }\n\n    void draw () {\n        clear();\n        background(200);\n        opcions.display();\n        textSize(40);\n        textAlign(CENTER);\n        text(strDia + \" - \" + strMes + \" - \" + strAny, 320, 240); \n    }\n\n    void setDia (String d) {\n        this.strDia = d;\n    }\n\n    void setMes (String m) {\n        this.strMes = m;\n    }\n\n    void setAny (String y) {\n        this.strAny = y;\n    }\n</code></pre> <pre><code>    import java.util.*;\n    import controlP5.*;\n\n    public class Opcions implements ControlListener {\n        private ControlP5 cp5;\n        private ScrollableList ddlDia, ddlMes, ddlAny;\n        \n        public Opcions(PApplet parent){\n            cp5 = new ControlP5(parent);\n            cp5.addListener(this);\n            cp5.setFont(createFont(\"Arial\",12,true));\n            \n            ddlDia = cp5.addScrollableList(\"dia\");\n            ddlDia.setHeight(200);\n            ddlDia.setPosition (50,50);\n            ddlDia.setBarHeight(22);\n            ddlDia.setItemHeight(22);\n            ddlDia.setOpen(false);\n            for (int i=1; i &lt;= 31; i ++)\n            ddlDia.addItem(String.valueOf(i),i);\n            \n            ddlMes = cp5.addScrollableList(\"mes\");\n            ddlMes.setHeight(200);\n            ddlMes.setPosition(160,50);\n            ddlMes.setBarHeight(20);\n            ddlMes.setItemHeight(20);\n            ddlMes.setOpen(false);\n            ddlMes.addItem(\"GENER\",  1);\n            ddlMes.addItem(\"FEBRER\",  2);\n            ddlMes.addItem(\"MAR\u00c7\",  3);\n            ddlMes.addItem(\"ABRIL\",  4);\n            ddlMes.addItem(\"MAIG\",  5);\n            ddlMes.addItem(\"JUNY\",  6);\n            ddlMes.addItem(\"JULIOL\",  7);\n            ddlMes.addItem(\"AGOST\",  8);\n            ddlMes.addItem(\"SETEMBRE\",  9);\n            ddlMes.addItem(\"OCTUBRE\", 10);\n            ddlMes.addItem(\"NOVEMBRE\", 11);\n            ddlMes.addItem(\"DESEMBRE\", 12);\n            \n            ddlAny = cp5.addScrollableList(\"any\");\n            ddlAny.setHeight(200);\n            ddlAny.setPosition(270,50);\n            ddlAny.setBarHeight(20);\n            ddlAny.setItemHeight(20);\n            ddlAny.setOpen(false);\n            for(int i=1950; i &lt; 2020; i++)\n            ddlAny.addItem(String.valueOf(i), i);\n        }\n        \n        public void controlEvent(ControlEvent theEvent) {\n            String name = theEvent.getController().getName();\n            int index = (int)theEvent.getController().getValue();\n            String valor = cp5.get(ScrollableList.class, name).getItem(index).get(\"name\").toString();\n            switch (name) {\n            case \"dia\":\n                println(\"dia: \" + valor);\n                setDia(valor);\n            break;\n            \n            case \"mes\":\n                println(\"mes: \" + valor);\n                setMes(valor);\n            break;\n            \n            case \"any\":\n                println(\"any: \" + valor);\n                setAny(valor);\n            break;\n            }\n        }\n        \n        public void display() {\n            ddlDia.show();\n            ddlMes.show();\n            ddlAny.show();\n        }\n    }\n</code></pre> <p>A aquest codi se li han afegit els m\u00e8todes setDia, setMes i setAny al main per tal que puguen ser cridats des de la classe Opcions on tenim les llistes desplegables. Quan algun valor en alguna llista desplegable canvie, es dispara autom\u00e0ticament el m\u00e8tode controlEvent. Primer esbrinem quina \u00e9s la llista que ha provocat aquest esdeveniment amb el getName() i despr\u00e9s cridem al m\u00e8tode corresponent del main per tal que modifique els valors de dia, mes o any.</p> Activitat 903. Crea una aplicaci\u00f3 amb un desplegable <p>Modifica l'exemple anterior per tal que no mostre el resultat dels canvis en les diferents llistes desplegables fins que es premi un bot\u00f3 (Submit) que hi afegir\u00e0s.</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#radiobutton","title":"RadioButton","text":"<p>El control RadioButton \u00e9s un control gr\u00e0fic que permet a l'usuari escollir nom\u00e9s una de les opcions que ens mostra aquest control. Aquesta caracter\u00edstica singular converteix els radiobutton en diferents als checkbox, on s\u00ed podem escollir m\u00e9s d'una opci\u00f3 simult\u00e0nia.</p> <p>El primer que farem ser\u00e0 instanciar un control de la classe radiobutton configurar-lo i que es mostre per pantalla amb les opcions necess\u00e0ries.</p> MainOpcions <pre><code>    Opcions opcions;\n\n    void setup () {\n        size(640,480);\n        opcions = new Opcions(this);\n    }\n\n    void draw () {\n        clear();\n        background(200);\n        opcions.display();\n    }\n</code></pre> <pre><code>    import java.util.*;\n    import controlP5.*;\n\n    public class Opcions implements ControlListener {\n        private ControlP5 cp5;\n        private RadioButton r1;\n        private PVector position;\n        \n        public Opcions(PApplet parent){\n            cp5 = new ControlP5(parent);\n            cp5.addListener(this);\n            cp5.setFont(createFont(\"Arial\",11,true));\n                \n            position = new PVector(135,230);\n            r1 = cp5.addRadioButton(\"radioButton\");\n            r1.setPosition(position.x, position.y);\n            r1.setSize(20,20);\n            r1.setColorForeground(color(120,0,250));\n            r1.setColorActive(color(255,0,0));\n            r1.setColorLabel(color(0));\n            r1.setItemsPerRow(5);\n            r1.setSpacingColumn(55);\n            r1.addItem(\"ROIG\",1);\n            r1.addItem(\"VERD\",2);\n            r1.addItem(\"BLAU\",3);\n            r1.addItem(\"FUCHSIA\",4);\n            r1.addItem(\"PISTATXO\",5);\n        }\n        \n        public void controlEvent(ControlEvent theEvent) {\n            println(\"clic\");\n        }\n        \n        public void display() {\n            fill(0);\n            textSize(16);\n            text (\"RADIO BUTTON LIST\",position.x+110, position.y-20);\n            fill(255);\n            strokeWeight(1);\n            rect(position.x-10, position.y-10, 385, 40);\n            stroke(0);\n            r1.show();\n        }\n    }\n</code></pre> <p>Finalment i igual que hem estat fent amb els controls vistos fins ara, ens quedaria programar el seu comportament. El que s'ha de fer \u00e9s implementariem el m\u00e8tode controlEvent fent que aquest cride als m\u00e8todes necessaris a la classe principal Main.  </p> <p>El que farem en aquesta aplicaci\u00f3 \u00e9s assignar un color de fons a cada opci\u00f3 de tal forma que quan seleccionem alguna opci\u00f3, el color del fons de l'aplicaci\u00f3 canvie a l'escollit. Per tant ser\u00e0 necessari implementar un m\u00e8tode canviaColor(color c) a la classe principal que siga accessible des del m\u00e8tode controlEvent de la classe Opcions</p> <pre><code>    public void controlEvent (ControlEvent theEVent) {\n        int value = (int)theEvent.getValue();\n        switch (value) {\n        case 1:\n            colorActive = color(255,0,0);\n            canviaColor(colorActive);\n        break;\n        \n        case 2:\n            colorActive = color(0,255,0);\n            canviaColor(colorActive);\n        break;\n        \n        case 3:\n            colorActive = color(0,0,255);\n            canviaColor(colorActive);\n        break;\n        \n        case 4:\n            colorActive = color(255,90,250);\n            canviaColor(colorActive);\n        break;\n        \n        case 5:\n            colorActive = color(120,225,140);\n            canviaColor(colorActive);\n        break;\n        \n        default:\n            colorActive = color(255,255,255);\n            canviaColor(colorActive);\n        break;\n        }\n        r1.setColorActive(colorActive);\n    }\n</code></pre> <pre><code>    void canviaColor(color c) {\n        this.pinta = c;  // pinta \u00e9s una variable global de l'arxiu principal\n    }\n</code></pre> <p>Nomes quedaria al draw indicar que el background s'ha de pintar amb el valor que cont\u00e9 la variable global pinta.</p> Activitat 904. Crea una aplicaci\u00f3 amb un radiobutton <p>Dissenya una aplicaci\u00f3 en la que utilitzes m\u00ednim un radiobutton amb 5 opcions diferents. Eres lliure de programar el seu comportament com consideres.</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#textfield","title":"TextField","text":"<p>Un TextField \u00e9s un control gr\u00e0fic d'interf\u00edcie d'usuari, que deuria habilitar a l'usuari per poder introduir informaci\u00f3 en forma de text per tal que puga ser utilitzada per una aplicaci\u00f3.</p> <p>A continuaci\u00f3 mostrem un exemple de com es podria utilitzar un textField, des de mostrar-lo per pantalla, configurar-lo i controlar els esdeveniments que llenci.  Mira el codi i fixa't com \u00e9s molt semblant al que estem fent fins ara amb la resta de controls de la llibreria controlP5.</p> MainControls <pre><code>    String strNom;\n    Controls control;\n\n    void setup () {\n        size(640,480);\n        control = new Controls(this);\n        strNom = \"\";\n    }\n\n    void draw () {\n        clear();\n        background(255);\n        control.display();\n        fill(0);\n        textSize(20);\n        textAlign(CENTER);\n        text(\"Hola \" + this.strNom, width/2, height/2-20);\n    }\n\n    void setName (String theValue) {\n        this.strNom = theValue;\n    }\n</code></pre> <pre><code>    import controlP5.*;\n\n    public class Controls implements ControlListener {\n        private ControlP5 cp5;\n        private Textfield txtField;\n        private PVector pos;\n        \n        public Controls(PApplet parent) {\n            this.pos = new PVector(width/2,height/2);\n            this.cp5 = new ControlP5(parent);\n            this.cp5.addListener(this);\n            this.cp5.setFont(createFont(\"FreeMono\",14,true));\n            \n            this.txtField = cp5.addTextfield(\"NOM\",(int)pos.x-100, (int)pos.y-15, 200, 30);\n            this.txtField.setColor(color(0));\n            this.txtField.setColorActive(color(0,255,0));\n            this.txtField.setColorBackground(color(255));\n            this.txtField.setColorCaptionLabel(0);\n        }\n        \n        public void display () {\n            txtField.show();\n        }\n        \n        public void controlEvent(ControlEvent theEvent) {\n            if (theEvent.getName() == \"NOM\")\n            setName(txtField.getText());\n        }\n    }\n</code></pre> <p>Input TextArea</p> <p>Un textArea \u00e9s molt semblant al textField revisant un poc la seua documentaci\u00f3, \u00e9s f\u00e0cil d'adaptar el codi anterior i convertir que textField que hem utilitzat en un textArea.</p> Activitat 905. Crea una aplicaci\u00f3 amb un camp de text <p>Dissenya la t\u00edpica pantalla de login en la que es demana un usuari i una contrasenya. Quan s'introdueixen les dades s'ha de poder premer el bot\u00f3 de login que tamb\u00e9 haur\u00e0s de posar al teu formulari.</p>"},{"location":"Tema%2006.%20Gr%C3%A0fics.%20ControlP5/#slide","title":"Slide","text":"<p>Per acabar amb aquest tema veurem un control anomenat Slider. En l'exemple que mostrarem a continuaci\u00f3, disposarem de tres controls de tipus slide que ens indicaran el percentatge (0-100) de color roig, verd i blau amb els que pintarem el fons de la pantalla.</p> <p>Mira el codi seg\u00fcent:</p> MainControls <pre><code>    Controls control;\n    color pinta;\n\n    void setup () {\n        size(640,480);\n        control = new Controls(this, new PVector(20,20));\n        pinta = color(0,0,0);\n    }\n\n    void draw () {\n        clear();\n        background(pinta);\n        control.display();\n    }\n\n    void setColor (color c) {\n        pinta = c;\n    }\n</code></pre> <pre><code>    import controlP5.*;\n\n    public class Controls implements ControlListener {\n        private PVector pos;\n        private ControlP5 cp5;\n        private Slider sldRed, sldGreen, sldBlue;\n        private int iRed, iGreen, iBlue;\n        \n        public Controls (PApplet parent, PVector p) {\n            \n            this.iRed = 0;\n            this.iGreen = 0;\n            this.iBlue = 0;\n            color c = color(iRed, iGreen, iBlue);\n            setColor(c);\n            \n            this.pos = p.copy();\n            this.cp5 = new ControlP5(parent);\n            this.cp5.addListener(this);\n            this.cp5.setFont(createFont(\"FreeMono\",14,true));\n            \n            this.sldRed = cp5.addSlider(\"ROIG\");\n            this.sldRed.setPosition(pos.x+10,pos.y+25);\n            this.sldRed.setRange(0,255);\n            this.sldRed.setSize(140,20);\n            this.sldRed.setLabel(\"ROIG (0-255)\");\n            this.sldRed.getCaptionLabel().align(ControlP5.LEFT, ControlP5.TOP_OUTSIDE).setPaddingX(0);\n            this.sldRed.setColorCaptionLabel(color(0));\n            \n            this.sldGreen = cp5.addSlider(\"VERD\");\n            this.sldGreen.setPosition(pos.x+10,pos.y+70);\n            this.sldGreen.setRange(0,255);\n            this.sldGreen.setSize(140,20);\n            this.sldGreen.setLabel(\"VERD (0-255)\");\n            this.sldGreen.getCaptionLabel().align(ControlP5.LEFT, ControlP5.TOP_OUTSIDE).setPaddingX(0);\n            this.sldGreen.setColorCaptionLabel(color(0));\n            \n            this.sldBlue = cp5.addSlider(\"BLAU\");\n            this.sldBlue.setPosition(pos.x+10,pos.y+115);\n            this.sldBlue.setRange(0,255);\n            this.sldBlue.setSize(140,20);\n            this.sldBlue.setLabel(\"BLAU (0-255)\");\n            this.sldBlue.getCaptionLabel().align(ControlP5.LEFT, ControlP5.TOP_OUTSIDE).setPaddingX(0);\n            this.sldBlue.setColorCaptionLabel(color(0));\n        }\n        \n        public void display () {\n            fill(210);\n            stroke(255);\n            strokeWeight(2);\n            rect(pos.x,pos.y,160,300);\n        }\n        \n        public void controlEvent(ControlEvent theEvent) {\n            switch (theEvent.getController().getName()) {\n            case \"ROIG\":\n                iRed = (int)theEvent.getController().getValue();\n            break;\n            \n            case \"VERD\":\n                iGreen = (int)cp5.getController(\"VERD\").getValue();\n            break;\n            \n            case \"BLAU\":\n                iBlue = (int)cp5.getController(\"BLAU\").getValue();\n            break;\n            }\n            \n            color c = color(iRed,iGreen,iBlue);\n            setColor(c);\n        }\n    }\n</code></pre> Activitat 906. Amplia l'exemple anterior <p>Basant-se en l'exemple anterior, afegeix un slider m\u00e9s per tal que tamb\u00e9 es puga modificar el valor alpha del color de fons.</p>"},{"location":"Tema%2007.%20Col%C2%B7leccions/","title":"Tema 7. Col\u00b7leccions","text":""},{"location":"Tema%2007.%20Col%C2%B7leccions/#introduccio","title":"Introducci\u00f3","text":""},{"location":"Tema%2008.%20Her%C3%A8ncia%2C%20polimorfisme%20i%20interf%C3%ADcies/","title":"Tema 8. Her\u00e8ncia, polimorfisme i interf\u00edcies","text":""},{"location":"Tema%2008.%20Her%C3%A8ncia%2C%20polimorfisme%20i%20interf%C3%ADcies/#introduccio","title":"Introducci\u00f3","text":""},{"location":"Tema%2009.%20Bases%20de%20dades%20relacionals/","title":"Tema 09. Bases de dades relacionals","text":""},{"location":"Tema%2009.%20Bases%20de%20dades%20relacionals/#introduccio","title":"Introducci\u00f3","text":"<p>Fins ara hem estat treballant amb aplicacions que si necessitaven desar informaci\u00f3 o carregar-la, o com a molt, ho feiem utilitzant arxius o la consola d'entrada. En aquest tema veurem com podem connectar una aplicaci\u00f3 Java a una base de dades MySql.</p>"},{"location":"Tema%2009.%20Bases%20de%20dades%20relacionals/#jdbc","title":"JDBC","text":"<p>Java proporciona l\u2019API Java Database Connectivity (connectivitat Java amb bases de dades) com a mecanisme per poder generar i invocar sent\u00e8ncies SQL sobre una base de dades relacional mitjan\u00e7ant codi en programes Java. La seva particularitat \u00e9s que, en contrast amb altres sistemes existents, ofereix una interf\u00edcie comuna per a l\u2019acc\u00e9s a qualsevol tipus de BD, independentment del fabricant. Per al desenvolupador, la BD real que hi ha al darrere \u00e9s totalment transparent i obvia la necessitat d\u2019efectuar cap classe de configuraci\u00f3 en la m\u00e0quina on s\u2019executa l\u2019aplicaci\u00f3 que accedeix a les dades. Aquesta biblioteca es troba principalment en els paquets java.sql i javax.sql. </p> <p>Partint de la suposici\u00f3 que ja hi ha una BD correctament configurada i a la qual volem accedir des del codi d\u2019un programa Java, el resum de passos que cal fer dins l\u2019aplicaci\u00f3 \u00e9s:</p> <p>Per\u00f2 abans de poder comen\u00e7ar a treballar amb JDDBC hem de fer una s\u00e8rie de coses:</p> <ol> <li>Incorporem el driver al nostre projecte. Descarrega el  i copia'l a una carpeta dins del teu projecte.</li> <li> <p>Obre el fitxer principal del teu projecte amb Processing IDE i ves a \"Sketch--&gt;Afegir arxiu\", busca el driver que acabes de descarregar i prem OK.</p> <p></p> </li> <li> <p>Importar les llibreries necess\u00e0ries al projecte</p> </li> <li>Establir la connexi\u00f3 a la BD.</li> <li>A partir d\u2019aqu\u00ed, ja es poden executar sent\u00e8ncies SQL en la BD i processar-les respostes.</li> <li>Quan ja no es vol treballar m\u00e9s amb la BD, cal tancar la connexi\u00f3.</li> </ol> <p>JDBC, igual que moltes altres API en Java, est\u00e0 dissenyat amb la simplicitat enel pensament i intenta que l\u2019ordre de les operacions que ha de fer l\u2019operador siga gen\u00e8ric i, fins a cert punt, l\u00f2gic. Igual que per llegir dades d\u2019un fitxer el que cal feres dir quina \u00e9s la seva ubicaci\u00f3, obrir-lo, llegir o escriure les dades i tancar-lo, ena quest cas la idea \u00e9s similar. Simplement, \u201cllegir-lo o escriure\u2019l\u201d vol dir invocar una sent\u00e8ncia SQL, enlloc de posicionar un apuntador. Tot i aix\u00ed, cal tenir un cert domini d\u2019SQL per poder fer correctament aquesta feina.</p> <p>Vejam un exemple per tal d'entendre-ho millor:</p>"},{"location":"Tema%2009.%20Bases%20de%20dades%20relacionals/#connexio-a-la-base-de-dades","title":"Connexi\u00f3 a la base de dades","text":"<p>Per tal de podre connectar amb una base de dades utilitzarem els paquets java.sql i javax.sql. Dins d'aquestos paquets disposem d'una s\u00e8rie de classes,interf\u00edcies etc.. que ens serviran per poder interactuar amb el nostre sistema gestor de bases de dades. Els m\u00e9s importants s\u00f3n: la classe DriveManager i les interf\u00edcies: ResultSet, Connection, Statement i DataSource. Per tant primer, importem tant java.sql com javax.sql al nostre projecte.</p> <pre><code>\timport java.sql.Connection;\n\timport java.sql.DriverManager;\n\timport java.sql.ResultSet;\n\timport java.sql.SQLException;\n\timport java.sql.Statement;\n</code></pre> <p>Una vegada ja tenim importats els paquets del driver JDBC, hem d'establir la connexi\u00f3 a la base de dades mitjan\u00e7ant un objecte connexi\u00f3 i aquest objecte connexi\u00f3 estar\u00e0 relacionat amb un String on s'emmagatzemar\u00e0 la cadena de connexi\u00f3 a la base de dades. Veiem alguns exemples de cadenes de connexi\u00f3:</p> <ul> <li>jdbc:mysql://localhost:port/BD</li> <li>jdbc:odbc:DSN_BD</li> <li>jdbc:oracle:usuari@servidor:port:BD</li> </ul> <p>Cal tindre tamb\u00e9 l'usuari i la contrasenya d'acc\u00e9s a la base de dades. Tamb\u00e9 esl pot donar el cas que es llence una excepci\u00f3, per tant, necessitarem posar el codi dins d'un bloc try..catch.</p> <p>En definitiva per tal d'establir una connexi\u00f3 amb la nostra base de dades en Java ho fariem al m\u00e8tode setup de la seg\u00fcent forma:</p> <pre><code>import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n//String url = \"jdbc:mysql://localhost:3306/nom_base_de_dades\";\nString url = \"jdbc:mysql://localhost:3306/instituto\";\nString user = \"root\";\nString password = \"root\";\nConnection conn = null;\n\nvoid setup() {\n    size(400, 400);\n    try {\n        conn = DriverManager.getConnection(url, user, password);\n        println(\"Connexi\u00f3 establerta.\");\n    } \n\tcatch (SQLException e) {\n        println(\"Error de connexi\u00f3: \" + e.getMessage());\n    }\n}\n</code></pre> <p>Arribats a aquest punt ja tindriem establerta la connexio entre la nostra aplicaci\u00f3 i la base de dades</p>"},{"location":"Tema%2009.%20Bases%20de%20dades%20relacionals/#creacio-i-execucio-de-sentencies-sql","title":"Creaci\u00f3 i execuci\u00f3 de sent\u00e8ncies SQL","text":"<p>El seg\u00fcent pas, una vegada ja tenim establerta la connexi\u00f3 amb la nostra base de dades hem de crear un objecte Statement des del draw amb el m\u00e8tode createStatement() que ens retornar\u00e0 un objecte de tipus Statement.</p> <p>Ara hauriem de poder executar les sent\u00e8ncies SQL que necessitem. Per poder executar sent\u00e8ncies Sql utilitzarem el m\u00e8tode executeQuery() que \u00e9s un m\u00e8tode que pertany a l'objecte Statement anteriorment creat. Aquest m\u00e8tode ens retornar\u00e0 un ResultSet qu\u00e8 \u00e9s on tindrem la informaci\u00f3 obtinguda de la base de dades.</p> <pre><code>\tvoid draw() {\n\t\tbackground(200);\n\t\tif (conn != null) {\n\t\t\ttry {\n\t\t\t\tStatement stmt = conn.createStatement();\n\t\t\t\tString query = \"SELECT * FROM alumno\";\n\t\t\t\tResultSet rs = stmt.executeQuery(query);\n\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\tString valor = rs.getString(\"nombre\");\n\t\t\t\t\tprintln(valor);\n\t\t\t\t}\n\t\t\t\trs.close();\n\t\t\t\tstmt.close();\n\t\t\t} \n\t\t\tcatch (SQLException e) {\n\t\t\t\tprintln(\"Error executant la consulta: \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t}\n</code></pre> <p>Amb les instruccions vistes als punts anteriors, ja podem connectar-nos a una base de dades i realitzar les consultes mitjan\u00e7ant queries per\u00f2 una forma m\u00e9s correcta d'implementar-ho seria creant una classe que s'encarregue de la interacci\u00f3 entre la nostra aplicaci\u00f3 i la base de dades sense haver de posar el codi a l'esborrany principal i \u00e9s en aquesta classe on posarem tots els atributs i m\u00e8todes necessaris per poder realitzar connexions a la Base de Dades de manera m\u00e9s eficient.</p> MainBDConnection <pre><code>\timport java.sql.Connection;\n\timport java.sql.DriverManager;\n\timport java.sql.ResultSet;\n\timport java.sql.SQLException;\n\timport java.sql.Statement;\n\timport javax.swing.JFrame;\n\timport javax.swing.JScrollPane;\n\timport javax.swing.JTable;\n\n\tBDConnection bdCon;\n\tString url = \"jdbc:mysql://localhost:3306/Alumnes\";\n\tString user = \"root\";\n\tString password = \"password\";\n\n\tvoid setup() {\n\t\tsize(400, 400);\n\t\tbdCon = new BDConnection (url, user, password);\n\t}\n\n\tvoid draw() {\n\t\tbackground(200);\n\n\t\tif (bdCon.isConnected()) {\n\t\t\tString strQuery = \"SELECT * FROM Alumnes\";\n\t\t\tResultSet rs = bdCon.executeQuery(strQuery);\n\t\n\t\t\ttry {\n\t\t\t\twhile(rs.next()) {\n\t\t\t\t\tString nom = rs.getString(\"Nom\");\n\t\t\t\t\tString co1 = rs.getString(\"Cognom 1\");\n\t\t\t\t\tString co2 = rs.getString(\"Cognom 2\");\n\t\t\t\t\tprintln(nom + \" \" + co1 + \" \" + co2);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (SQLException ex) {\n\t\t\t\tprintln(ex.getMessage());\n\t\t\t}\n\t\t\tbdCon.close();\n\t\t}\n\t}\n</code></pre> <pre><code>\timport java.sql.Connection;\n\timport java.sql.DriverManager;\n\timport java.sql.ResultSet;\n\timport java.sql.SQLException;\n\timport java.sql.Statement;\n\n\tpublic class BDConnection {\n\t\tprivate String url;\n\t\tprivate String usr;\n\t\tprivate String pwd;\n\t\tprivate Connection con;\n\t\tprivate Statement stmt;\n\n\t\tpublic BDConnection (String strURL, String strUSR, String strPWD) {\n\t\t\tthis.url = strURL;\n\t\t\tthis.usr = strUSR;\n\t\t\tthis.pwd = strPWD;\n\n\t\t\ttry {\n    \t\t\tthis.con = DriverManager.getConnection(url, user, password);\n    \t\t\tprintln(\"Connexi\u00f3 establerta.\");\n\t\t\t} \n\t\t\tcatch (SQLException e) {\n    \t\t\tprintln(\"Error de connexi\u00f3: \" + e.getMessage());\n\t\t\t}\n\t\t}\n\n\t\tpublic ResultSet executeQuery (String strQuery) {\n\t\t\tResultSet rs = null;\n\t\t\ttry {\n  \t\t\t\tstmt = con.createStatement();\n  \t\t\t\trs = stmt.executeQuery(strQuery);        \n\t\t\t} \n\t\t\tcatch (SQLException e) {\n  \t\t\t\tprintln(\"Error executant la consulta: \" + e.getMessage());\n\t\t\t}\n\t\t\treturn rs;\n\t\t}\n\n\t\tpublic boolean isConnected () {\n\t\t\tboolean bConnected = false;\n\n\t\t\ttry {\n  \t\t\t\tbConnected = !this.con.isClosed();\n\t\t\t}\n\t\t\tcatch (SQLException ex) {\n  \t\t\t\tprintln(\"Error en BDConnection.isConnected()\");\n\t\t\t}\n\t\t\treturn bConnected;\n\t\t}\n\n\t\tpublic boolean close () {\n\t\t\ttry {\n  \t\t\t\tthis.con.close();\n  \t\t\t\tprintln(\"Connexi\u00f3 tancada.\");\n  \t\t\t\treturn true;\n\t\t\t}\n\t\t\tcatch (SQLException e) {\n  \t\t\t\tprintln(\"Error tancant la connexi\u00f3: \" + e.getMessage());\n  \t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n</code></pre>"},{"location":"Tema%2033.%20Programaci%C3%B3%20Modular/","title":"Tema 4. Programaci\u00f3 Modular","text":""},{"location":"Tema%2033.%20Programaci%C3%B3%20Modular/#funcions-en-java","title":"Funcions en Java","text":"<p>Una vegada vistos els fonaments de la programaci\u00f3 modular, augmentem el nivell de detall. A Java la modularitat s'implementa mitjan\u00e7ant l'\u00fas de funcions. Una funci\u00f3 en Java \u00e9s la concreci\u00f3 de la t\u00e8cnica de programaci\u00f3 modular, \u00e9s a dir, un metode o procediment \u00e9s un fragment de codi que realitza una funci\u00f3 concreta dins del nostre programa. </p> <p>Per\u00f2 com s'escriu una funci\u00f3 en Java:</p> <pre><code>[acces] [modificador] tipus nomFuncio([tipus nomArgument,[tipus nomArgument]...]) {\n\n    /*\n        * Bloc d'instruccions\n    */\n\n    return valor;\n}\n</code></pre> <p>Veiem i expliquem que significa cadascun dels elements que formen el codi anterior.</p> <p>Qu\u00e8 \u00e9s qu\u00e8</p> <p>Tots aquells elements que estan entre claudators s\u00f3n opcionals. On: </p> <ul> <li>Acc\u00e9s: public, protected, private o package</li> <li>Modificador: static o final</li> <li>Tipus: int, boolean, float o qualsevol tipus predefinit per l'usuari.</li> <li>nomFuncio: cadena alfanum\u00e8rica significativa que indique el que fa la funci\u00f3.</li> <li>nomArgument: par\u00e0metres que se li passen a la funci\u00f3. Aquestos par\u00e0metres funcionaran com variables locals a la funci\u00f3.</li> </ul> <p>Per acabar veiem exemples concrets de com s'implementen les funcions o m\u00e8todes en Java. La primera funci\u00f3 el que fa \u00e9s saludar dient \"Hola m\u00f3n\" cada vegada que s'utilitza. Las segona diu \"Hola\" junt amb el nom que es passa com argument i finalment la tercera funci\u00f3 el que fa \u00e9s agafar la cadena de caracters que se li passa per par\u00e0metre i la inverteix. Si no entens el que s\u00f3n par\u00e0metres i arguments, no et preocupes, ho veurem al punt seg\u00fcent. Mira el seg\u00fcent exemple:</p> <pre><code>// Funci\u00f3 simple \nvoid diguesHola () {\n    println(\"Hola Mon\");\n}\n\n// Funci\u00f3 amb par\u00e0metres\nvoid sayMyName (String strNom) {\n    println(\"Hola Mon: \" + strNom);\n}\n\n// Funci\u00f3 que torna algun valor\nString canviaNom (String strNom) {\n    return strNom.reverse();\n}\n</code></pre> Activitat 401. Modularitza el seg\u00fcent codi ProblemaSoluci\u00f3 <p>El seg\u00fcent codi per a Processing IDE dibuixa una taula de billar amb dues boles negres, dues banques i dues roges. Modularitza el codi de tal forma que al m\u00e8tode draw nom\u00e9s hi haur\u00e0 crides a m\u00e8todes definits per tu, concretament els seg\u00fcents m\u00e8todes: </p> <ul> <li>dibuixarTaula.</li> <li>dibuixarBolesRoges.</li> <li>dibuixarBolesNegres.</li> <li>dibuixarBolesBlanques.</li> </ul> <p>Al codi teniu tamb\u00e9 el prototip de la funci\u00f3 dibuixarTaula() com a exemple.</p> <pre><code>    void setup () {\n        size(640, 480);\n        background(255);\n    }\n\n    void draw () {\n        strokeWeight(20);\n        stroke(170,120,20);\n        fill(0,255,0);\n        rect(30,30,500,330);\n        \n        fill(0);\n        strokeWeight(1);\n        stroke(200);\n        circle(200,200,35);\n        circle(400,60,35);\n        \n        stroke(0);\n        fill(255,0,0);\n        circle(100,100,35);\n        circle(350,330,35);\n        \n        fill(255,255,255);\n        circle(300,150,35);\n        circle(150,300,35); \n    }\n\n    void dibuixarTaula() {\n        // Posa ac\u00ed el codi que dibuixaria la taula de billar.\n    }\n</code></pre> <p>Descarrega la soluci\u00f3 al problema de la modularitzaci\u00f3 del codi</p>"},{"location":"Tema%2033.%20Programaci%C3%B3%20Modular/#parametres-duna-funcio","title":"Par\u00e0metres d'una funci\u00f3","text":"<p>Les funcions o m\u00e8todes en Java no nom\u00e9s serveixen per poder dividir i simplificar el codi sino que tamb\u00e9 es poden parametritzar, \u00e9s a dir, se li poden passar arguments que b\u00e9 utilitzen en la seua l\u00f2gica interna o b\u00e9 modifiquen el comportament del m\u00e8tode en q\u00fcesti\u00f3.</p> <p>Qu\u00e8 \u00e9s un par\u00e0metre ?</p> <p>Els par\u00e0metres s\u00f3n una forma d'intercanviar informaci\u00f3 amb el m\u00e8tode en q\u00fcesti\u00f3. Poden servir per introduir dades per executar el m\u00e8tode (entrada) o per obtenir o modificar dades despr\u00e9s de la seua execuci\u00f3 (eixida).</p> <p>Hi ha alguns detalls al respecte dels par\u00e0metres d'una funci\u00f3:</p> <ul> <li>Una funci\u00f3 pot tindre una quantitat qualsevol de par\u00e0metres, \u00e9s a dir, poden tindre des de zero fins a un, dos, deu o cent par\u00e0metres. </li> <li>Encara que poden ser m\u00e9s, normalment no sol passar de cinc m\u00e0xim.</li> <li>Si la funci\u00f3 t\u00e9 m\u00e9s d'un par\u00e0metre cadascun d'ells ha d'anar separat per una coma.</li> <li>Els arguments d'una funci\u00f3 tamb\u00e9 tenen un tipus i nom que els identifica.</li> <li>El tipus dels arguments pot ser qualsevol i no ha de tindre relaci\u00f3 amb el tipus del m\u00e8tode.</li> <li>Al rebre un argument res ens obliga a fer \u00fas d'aquest dins del m\u00e8tode.</li> <li>Els par\u00e0metres poden passar-se per refer\u00e8ncia (es mantenen les modificacions que es facen dins del m\u00e8tode) o per valor (no afectarien les modificacions a l'element original).</li> </ul>"},{"location":"Tema%2033.%20Programaci%C3%B3%20Modular/#una-funcio-amb-parametres-en-java","title":"Una funci\u00f3 amb par\u00e0metres en Java","text":"<pre><code>void mostraBola(int posX, int posY, int tam) {\n    fill(127);\n    stroke(0);\n    strokeWeight(3);\n    ellipse(x,y,tam,tam);\n}\n</code></pre> <p>La funci\u00f3 anterior \u00e9s un m\u00e8tode, que si fem cas al nom, s'encarrega de dibuixar una bola. Aquesta funci\u00f3 t\u00e9 tres par\u00e0metres: </p> <ul> <li>Un enter anomenat posX que representa la posici\u00f3 x on es dibuixar\u00e0 la boleta</li> <li>Un enter amb nom posY que indica la posici\u00f3 y en la que es dibuixar\u00e0 la boleta</li> <li>Un \u00faltim enter que es diu tam que li dir\u00e0 a la funci\u00f3 quin ser\u00e0 el grand\u00e0ria de la boleta.</li> </ul> <p>Com ja s'ha comentat anteriorment, \u00e9s possible passar un o m\u00e9s valors a una funci\u00f3 quan es crida. Recordeu que un valor passat a una funci\u00f3 es diu argument. Dins la funci\u00f3, la variable que rep l'argument es diu par\u00e0metre. Els par\u00e0metres es declaren dins dels par\u00e8ntesis que segueixen a el nom de m\u00e8tode. </p> <p>Un par\u00e0metre est\u00e0 dins de l'abast de la seua funci\u00f3, i a banda de la seva tasca especial de rebre un argument, actua com qualsevol altra variable local.</p>"},{"location":"Tema%2033.%20Programaci%C3%B3%20Modular/#diferencia-entre-parametre-i-argument","title":"Difer\u00e8ncia entre par\u00e0metre i argument","text":"<p>Ac\u00ed hi ha un exemple simple de l'\u00fas de par\u00e0metres. Dins del programa seg\u00fcent podem observar com tenim una funci\u00f3 </p> <pre><code>// Un exemple per diferenciar par\u00e0metre d'argument\n\nvoid setup () {\n    size(640,480);\n}\n\nvoid draw () {\n    int a = (int)random(-1000,1000);\n    aboslut (a);\n}\n\nvoid absolut (int num) {\n    int aux = num;\n    if ( aux &lt; 0)\n        aux = aux*(-1);\n\n    println(\"El valor absolut de \" + num + \" \u00e9s: \" + aux);\n}\n</code></pre> <p>Com ja s'ha comentat anteriorment un m\u00e8tode pot tenir m\u00e9s d'un par\u00e0metre. Simplement declare cada par\u00e0metre, separant un el seg\u00fcent amb una coma. Per exemple, la classe Divisor defineix un m\u00e8tode anomenat esDivisor () que determina si el primer par\u00e0metre \u00e9s divisor de el segon.</p>"},{"location":"Tema%2033.%20Programaci%C3%B3%20Modular/#funcions-amb-mes-dun-parametre","title":"Funcions amb m\u00e9s d'un par\u00e0metre","text":"<pre><code>void setup () {\n    size(640,480);\n}\n\nvoid draw () {\n    int a = (int)random(100);\n    int b = (int)random(100);\n\n    if (esDivisor(a,b))\n        println(\"a \u00e9s divisor de b\");\n}\n\nboolean esDivisor(int a, int b) {\n    if ((b%a)==0) return true;\n    else return false;\n}\n</code></pre> <p>Comprova el codi anterior amb atenci\u00f3 i digues si hi ha alguna funci\u00f3 amb par\u00e0metres. Quina i quins par\u00e0metres.</p> Activitat 402. Modularitza dibuix lliure Problema <p>Al tema anterior, quan estavem estudiant l'estructura seq\u00fcencial, a l'activitat 319 varem fer un dibuix lliure. Basant-te en aquesta activitat, modularitza codi seguint el que hem vist fins ara.</p> <p>Finalment dir que els arguments poden ser literals, que corresponguen amb el tipus del par\u00e0metre, o tamb\u00e9 poden ser variables, per\u00f2 que passa amb les variables que es passen com a argument si el par\u00e0metre al qual s'assignen \u00e9s modificat en temps d'execuci\u00f3? Es modifiquen tamb\u00e9? Mirem la difer\u00e8ncia entre valor i refer\u00e8ncia.</p>"},{"location":"Tema%2033.%20Programaci%C3%B3%20Modular/#pas-per-valor-i-pas-per-referencia","title":"Pas per valor i pas per refer\u00e8ncia","text":"<p>Entrem en m\u00e9s detall sobre els par\u00e0metres, que passa amb ells quan s'acaba l'execuci\u00f3 de la funci\u00f3 o m\u00e8tode si s\u00f3n variables locals?</p> <p>En resum el pas per valor significa que al m\u00e8tode, en la variable de l'argument li arriba una c\u00f2pia del valor en el cas que es tracte d'un tipus de dades primitiu, \u00e9s a dir, char, int, float, double, etc.. Mentre que el pas per refer\u00e8ncia en canvi, l'argument cont\u00e9 un punter amb l'adre\u00e7a de mem\u00f2ria de la variable en q\u00fcesti\u00f3. </p> <p>Resum valor vs refer\u00e8ncia</p> <ul> <li> <p>Pas per valor: Es crea una c\u00f2pia local de la variable dins de la funci\u00f3. </p> </li> <li> <p>Pas per refer\u00e8ncia: Es maneja directament la variable, els canvis realitzats dins de la funci\u00f3 li afectaran tamb\u00e9 fora.</p> </li> </ul> <p>En resum, si es passa un argument per c\u00f2pia, tot all\u00f2 que es faja al par\u00e0metre dins del codi de la funci\u00f3 no afectar\u00e0 a l'original mentre que si, per contra, l'argument es passa per refer\u00e8ncia, totes aquelles accions que es realitzen sobre el par\u00e0metre li afectaran a l'argument original.</p> <p> </p> <p>Fixa't en el seg\u00fcent codi:</p> <pre><code>    void setup () {\n        size (640,480);\n    }\n    void draw () {\n\t\t\n\t\tint a = 1;\n\t\tint b = 2;\n\t\tprint(\"Valors de a i b abans de la modificaci\u00f3: \");\n\t\tprintln(\" a = \" + a + \" ; b = \" + b );\n\t\tmodificaTipusPrimitius(a,b);\n\t\tprint(\"Valors de a i b despr\u00e9s de la modificaci\u00f3: \");\n\t\tprintln(\" a = \" + a + \" ; b = \" + b );\n\t}\n \n\n    void modificaTipusPrimitius(int x, int y) {\n\t\tx = 5;\n\t\ty = 10;\n\t}\n</code></pre> Activitat 403. Pas per valor i pas per refer\u00e8ncia I ProblemaSoluci\u00f3 <p>Copia el codi anterior en Processing IDE i respon a les seg\u00fcents q\u00fcestions:</p> <ol> <li>Quins s\u00f3n els par\u00e0metres i de quin tipus s\u00f3n els de la funci\u00f3 modificaTipusPrimitius?</li> <li>Quantes vegades es crida a la funci\u00f3 modificaTipusPrimitius?</li> <li>Quins argument es passen a cada crida?</li> <li>Qu\u00e8 passa i per qu\u00e8 a l'executar-se el codi anterior?</li> <li>Estan passant-se els arguments per valor o per refer\u00e8ncia?</li> </ol> <ol> <li>Els par\u00e0metres s\u00f3n x i y i el seu tipus \u00e9s int</li> <li>Es crida una sola vegada al draw</li> <li>A la crida es passen els arguments a i b que s\u00f3n variables locals al m\u00e8tode draw.</li> <li>Passa que els valors originals d'a i b no es modifiquen ja que s\u00f3n tipus b\u00e0sics.</li> <li>Per valor, si es passaren per refer\u00e8ncia es mantindrien els canvis.</li> </ol> <p>Ara mira el seg\u00fcent codi:</p> <pre><code>    void setup () {\n        size(640,480);\n    }\n\n    void draw () {\n        Persona juan = new Persona();\n        modificarPersona(juan);\n        println(\"Nom: \"    + persona.strNom);\n        println(\"Cognom: \" + persona.strCognom);\n        println(\"Edat: \"   + persona.edat);\n        delay(1000);\n    }\n\n    void modificaPersona (Persona p) {\n        p.strNom    = \"Manolo\";\n        p.strCognom = \"Unodos\";\n        p.edat      = 18;\n\n    }\n\n    public class Persona {\n        public String strNom;\n        public String strCognom;\n        public int edat;\n\n    }\n</code></pre> Activitat 404. Pas per valor i pas per refer\u00e8ncia II ProblemaSoluci\u00f3 <p>Copia el codi anterior i respon a les seg\u00fcents q\u00fcestions:</p> <ol> <li>Quins s\u00f3n els par\u00e0metres i de quin tipus s\u00f3n els de la funci\u00f3 modificaPersona?</li> <li>Quantes vegades es crida a la funci\u00f3 modificaPersona?</li> <li>Quins argument es passen a cada crida?</li> <li>Qu\u00e8 passa i per qu\u00e8 a l'executar-se el codi anterior?</li> <li>Estan passant-se els arguments per valor o per refer\u00e8ncia?</li> </ol> <ol> <li>Es passa un par\u00e0metre amb identificador p de tipus Persona.</li> <li>Una vegada al draw</li> <li>En la crida al m\u00e8tode es passa l'argument juan</li> <li>Al tractar-se d'un objecte el par\u00e0metre de la funci\u00f3, els canvis que es produeixen dins del m\u00e8tode es mantenen.</li> <li>Per refer\u00e8ncia ja que les modificacions dins del codi del m\u00e8tode es mantenen despr\u00e9s de l'execuci\u00f3 d'aquest.</li> </ol>"},{"location":"Tema%2033.%20Programaci%C3%B3%20Modular/#sobre-el-return","title":"Sobre el return","text":"<p>Com ja haur\u00e0s vist, hi ha algunes funcions que comencen per void i altres que tenen altres tipus... a\u00e7\u00f2 el que torna la funci\u00f3. B\u00e0sicament la difer\u00e8ncia entre una funci\u00f3 i un procediment des del punt de vista conceptual \u00e9s si el m\u00e8tode torna o no algun valor. Si torna \u00e9s un procediment sino \u00e9s una funci\u00f3, per\u00f2 aquesta \u00e9s nom\u00e9s un q\u00fcesti\u00f3 conceptual ja que des del punt de vista t\u00e8cnic (del codi) no hi practicament cap difer\u00e8ncia entre funci\u00f3 i procediment a banda del fet que retornen un valor en Java.</p> <p>Has de tenir en compte dues coses importants amb la sent\u00e8ncia return:</p> <ul> <li>Qualsevol instrucci\u00f3 que es trobe despr\u00e9s de l'execuci\u00f3 de return, NO ser\u00e0 executada.</li> <li>\u00c9s com\u00fa trobar funcions amb m\u00faltiples sent\u00e8ncies return al seu codi, com per exemple en sentencies condicionals, per\u00f2 una vegada el codi execute una sent\u00e8ncia return all\u00f2 que vinga despr\u00e9s no s'executar\u00e0.</li> <li>El tipus de valor que es torna en una funci\u00f3 ha de coincidir amb el tipus declarat a la funci\u00f3, \u00e9s a dir, si es declara int, el valor que ha de tornar ha de ser un nombre enter.</li> <li>En el cas de les funcions que no tornen res (void), tamb\u00e9 conegues com a procediments, poden usar la sent\u00e8ncia return per\u00f2 sense cap valor i nom\u00e9s s'usaria per acabar amb l'execuci\u00f3 de la funci\u00f3. </li> </ul>"},{"location":"Tema%2033.%20Programaci%C3%B3%20Modular/#funcions-i-procediments","title":"Funcions i procediments","text":"<pre><code>void setup () {\n    size(640,480);        \n}\n\nvoid draw () {\n    dibuixaSol();\n    int abs = calculaAbsolut(-10);\n    println(\"Abs: \" + abs);\n}\n\nvoid dibuixaSol() {\n    fill(255,0,0);\n    stroke(0);\n    strokeWeight(1);\n    circle(320,240,40);\n}\n\nint calculaAbsolut (int a) {\n    if (a &lt; 0)\n        a = a * -1;\n\n    return a;\n}\n</code></pre> Activitat 405. Revisa conceptes ProblemaSoluci\u00f3 <p>\u00c9s el moment de revisar tots els conceptes vistos fins ara que no s\u00f3n pocs. Revisa el codi anterior i respon a les seg\u00fcents q\u00fcestions:</p> <ol> <li>Quants m\u00e8todes hi han al codi? (draw i setup no compten)</li> <li>Quin identificador tenen?</li> <li>Escriu el prototip (interf\u00edcie) de cadascun dels m\u00e8todes que has trobat.</li> <li>Per a cada m\u00e8tode respon: quants par\u00e0metres tenen? Quin \u00e9s el nom dels par\u00e0metres i el tipus?</li> <li>Quins dels m\u00e8todes que has trobat s\u00f3n funcions i quins procediments? Raona la resposta.</li> </ol> <ol> <li>Dos.</li> <li>dibuixaSol i calculaAbsolut</li> <li>void dibuixaSol() i int calculaAbsolut(int a).</li> <li>M\u00e8tode dibuixaSol t\u00e9 zero par\u00e0metres mentre que calculaAbsolut t\u00e9 un par\u00e0metre amb identificador a de tipus int</li> <li>dibuixaSol \u00e9s un procediment (no retorna res) mentre que calculaAbsolut \u00e9s una funci\u00f3 que retorna un enter.</li> </ol>"},{"location":"Tema%2033.%20Programaci%C3%B3%20Modular/#funcions-declaracio-i-crida","title":"Funcions: declaraci\u00f3 i crida","text":"<p>Hem vist ja la gran part t\u00e8cnica de com funcionen els m\u00e8todes en Java pel que fa a la part de sintaxis i les diferents paraules claus que s'utilitzen. En altres paraules, ja sabem construir funcions i procediments tant des del punt de vista t\u00e8cnic (com \u00e9s construeixen), com des del punt de vista sem\u00e0ntic (qu\u00e8 signifiquen) per\u00f2, com fem \u00fas d'aquestes funcions o procediments?</p> <p>Primer cal que distingim entre la declaraci\u00f3 d'un m\u00e8tode i la crida a aquest.</p> <ul> <li>Declaraci\u00f3 d'un m\u00e8tode: definici\u00f3 del procediment o funci\u00f3 on s'inclou tant la cap\u00e7alera (interf\u00edcie o prototip) i el cos (codi de la funci\u00f3).</li> <li>Crida a un m\u00e8tode: \u00fas del m\u00e8tode per mitj\u00e0 d'una crida a aquest utilitzant el prototip i els par\u00e0metres en cas de tenir-los.</li> <li>Prototip, interf\u00edcie o signatura: la signatura d'un m\u00e8tode \u00e9s la combinaci\u00f3 de nom, tipus de par\u00e0metres, nom d'aquestos i ordre.</li> </ul> <p>Per tal d'utilitzar una funci\u00f3 o m\u00e8tode en Java hem de cridar a eixa funci\u00f3. Una funci\u00f3 en Java es crida utilitzant el nom del m\u00e8tode i entre parentesi s'han de passar els par\u00e0metres que s'indica a la declaraci\u00f3 de la funci\u00f3. Aquestos par\u00e0metres que es passen han de coincidir en n\u00famero, si la declaraci\u00f3 del funci\u00f3 t\u00e9 3 par\u00e0metres s'hauran de passar tres par\u00e0metres, i tamb\u00e9 han de coincidir en el t\u00edtol.  Per\u00f2 millor vegem un exemple:</p> <pre><code>/**\n * M\u00e8tode holaMon \n * Mostra per pantalla hola + el nom que es passa com a argument\n * @param strNom cadena de caracters que representa el nom d'una persona\n * @return void\n */\nvoid holaMon (String strNom) {\n  System.out.println(\"Hola: \" + strNom);\n}\n/**\n * M\u00e8tode suma\n * Retorna el valor de la suma dels elements que es passen com a arguments.\n * @param a primer element de la suma de tipus enter.\n * @param b segon element de la suma de tipus enter.\n * @return el resultat de la suma en forma entera\n */\nint suma (int a, int b) {\n  int res = a + b;\n  return res;\n}\n\n// Crides a la funci\u00f3 holaMon\nholaMon(\"Batiste\");          \nholaMon();                   \nholaMon(\"Batiste\",\"Ceba\");   \n\n// Crides a la funci\u00f3 suma\nint resultat = suma(10,5);\nsuma(10,5);\n\nint resultat = suma();\nsuma();\nint res = suma (10,3,10);\n</code></pre> Activitat 406. Copia i raona el codi anterior ProblemaSoluci\u00f3 <p>C\u00f2pia el codi anterior, executa'l i raona el que est\u00e0 passant. Modifica el codi per tal que funcione correctament i mostre un resultat per pantalla.</p> <p>Descarrega la soluci\u00f3 al problema de la crida a funcions</p> Activitat 407. Crida als m\u00e8todes de forma correcta ProblemaSoluci\u00f3 <p>A continuaci\u00f3 vos he deixat un codi amb 4 funcions. Observeu-les i despr\u00e9s feu \u00fas de totes elles des de la funci\u00f3 draw.</p> <pre><code>void setup () {\n    size(640,480);\n}\nvoid draw () {\n    // Escriu el codi de les funcions ac\u00ed.\n}\n\nvoid fesAlgo() {\n    println(\"Algo far\u00e9\");\n}\n\nvoid f2(int a) {\n    if (a%2==0)\n        println(\"El nombre \u00e9s parell\");\n    else\n        println(\"El nombre no \u00e9s parell\");\n}\n\nvoid funcio3(int a, char c) {\n    println(\"El caracter \u00e9s \" + c + \" mentre que el n\u00famero \u00e9s: \" + a);\n}\nint funcio4(int c) {\n    int a = 0;\n    for (int i=0; i &lt; c; i ++)\n        a = a + 1 + 2*a;\n\n    return a;\n}\nString funcio5(String str) {\n    if (str == \"\" )\n        return \"Buida\";\n\n    return str.toUpperCase();\n}\n</code></pre> <p>Descarrega la soluci\u00f3 al problema de la crida a funcions part 2</p>"},{"location":"Tema%2033.%20Programaci%C3%B3%20Modular/#detalls-per-cridar-funcions","title":"Detalls per cridar funcions","text":"<ul> <li>El nom ha de coincidir exactament al moment de cridar, \u00e9s l\u2019\u00fanica forma d\u2019identificar-lo.</li> <li>L\u2019ordre dels par\u00e0metres i el tipus ha de coincidir. </li> <li>Cal tindre cura en el moment d'enviar els par\u00e0metres, hem de fer-ho en el mateix ordre en que varen ser declarats i han de ser del mateix tipus.</li> <li>Cada par\u00e0metre enviat tamb\u00e9 va separat per comes.</li> <li>Si una funci\u00f3 no rep par\u00e0metres, simplement no posem res a l'interior de la par\u00e8ntesi, per\u00f2 sempre deguem posar la par\u00e8ntesi.</li> <li>Invocar una funci\u00f3 segueix sent una sent\u00e8ncia normal i corrent en Java, aix\u00ed que ha de finalitzar amb ';' com sempre.</li> <li>El valor retornat per un m\u00e8tode o funci\u00f3 pot ser assignat a una variable del mateix tipus.</li> <li>Si es tracta d'un procediment no es pot retornar valor alg\u00fa.</li> <li>Una funci\u00f3 pot cridar a una altra dins de s\u00ed mateixa o fins i tot pot ser enviada com a par\u00e0metre a una altra (mira el seg\u00fcent exemple).</li> </ul> Activitat 408. Copia i raona el seg\u00fcent codi ProblemaSoluci\u00f3 <p>Passa el seg\u00fcent codi a processing, executa'l i raona el que est\u00e0 passant. Quin altre nom alternatiu li podriem posar a la funci\u00f3 per tal que aquest siga m\u00e9s significatiu?</p> <pre><code>void setup () {\n    size(640,480);\n    int i = 10;\n    int [] array = new int[10];\n    for (int a = 0; a &lt; i; a ++ )\n        array[a] = 0;\n\n    println(\"Abans de la crida a la funci\u00f3:\");\n    println(\"i=\" + i );\n    println(\"array[5]=\" + array[5] );\n    funcio(i,array);\n    println(\"Despr\u00e9s de la crida a la funci\u00f3:\");\n    println(\"i=\" + i );\n    println(\"array[5]=\" + array[5] );\n}\n\nvoid draw () {\n    delay(10000);\n}\n\nvoid funcio(int i, int [] array) {\n    i = 5;\n    array[i] = 15;\n}\n</code></pre> <p>Descarrega la soluci\u00f3 al problema de la crida a funcions part 2</p> Activitat 409. Executa el codi en Processing IDE <p>Escriu el seg\u00fcent codi en Processing i executa'l. </p> <p><pre><code>// Variables globals\nint x, y;\nvoid setup () {\n    size(320,240);\n    x = 150;\n    y = 120;\n}\n\nvoid draw () {\n    background(255);\n    stroke(0);\n    \n    // Dibuixem la cara cercle\n    strokeWeight(2);\n    fill(255,255,0);\n    circle(x,y,100);\n    \n    // Dibuixem ulls\n    strokeWeight(2);\n    fill(255);\n    circle(130,110,20);\n    circle(165,110,20);\n    strokeWeight(5);\n    point(133,110);\n    point(168,110);\n    \n    // Dibuixem la boca\n    noFill();\n    strokeWeight(2);\n    arc(150, 135, 40, 30, 0, PI);\n</code></pre> Aquest codi mostra el seg\u00fcent dibuix</p> <p></p> Activitat 410. Divideix-lo en funcions ProblemaSoluci\u00f3 <p>Separa el codi en funcions, has d'afegir les funcions dibuixaCara, dibuixaUlls i dibuixaBoca seguint els prototips que et mostre a continuaci\u00f3.</p> <pre><code>// Prototips de funcions\nvoid dibuixaCara();\nvoid dibuixaUlls();\nvoid dibuixaBoca();\n</code></pre> <p>Descarrega la soluci\u00f3 al problema del smiley</p> Activitat 411. Par\u00e0metres coordenades ProblemaSoluci\u00f3 <p>Modifica el codi anterior per tal que tant el codi que dibuixa els ulls com el codi que dibuixa la boca, estiguen en dues funcions: dibuixaUlls i dibuixaBoca. A aquestes funcions se'ls passar\u00e0 com a par\u00e0metres les coordenades x i y i a partir d'aquestes ha de dibuixar els ulls i la boca on corresponga.</p> <pre><code>// Prototips de les funcions\nvoid dibuixaCara(int x, int y);\nvoid dibuixaUlls(int x, int y);\nvoid dibuixaBoca(int x, int y);\n</code></pre> <p>[Descarrega la soluci\u00f3 al problema del smiley] parametritzat(assets/Tema4/act411.pde)</p> Activitat 412. Dibuixar cares - Ampliaci\u00f3 ProblemaSoluci\u00f3 <p>Amplia el codi anterior per tal que mostre el seg\u00fcent dibuix. Observa com ha de quedar el codi de la funci\u00f3 draw</p> <p></p> <pre><code>// Variables Globals\nint cercleX, cercleY, triangleX, triangleY, quadratX, quadratY;\n\nvoid setup () {\n    size(640,300);\n     // Coordenades del cercle\n    cercleX = 150;\n    cercleY = 150;\n\n    // Coordenades del primer punt del triangle\n    triangleX = 320;\n    triangleY = 150;\n\n    // Coordenades del quadrat\n    quadratX = 470;\n    quadratY = 150;\n}\n\nvoid draw () {\n    background(255);\n\n    // Codi per dibuixar el cercle\n    // Escriu el codi necessari per dibuixar el cercle a cercleX i cercleY ac\u00ed\n    dibuixaUlls(cercleX,cercleY);\n    dibuixaBoca(cercleX,cercleY);\n\n    // Codi per dibuixar el triangle\n    // Escriu el codi necessari per dibuixar el cercle a triangleX i triangleY ac\u00ed\n    dibuixaUlls(triangleX,triangleY);\n    dibuixaBoca(triangleX,triangleY);\n\n    // Codi per dibuixar el quadrat\n    // Escriu el codi necessari per dibuixar el cercle a quadratX i quadratY ac\u00ed\n    dibuixaUlls(quadratX,quadratY);\n    dibuixaBoca(quadratX,quadratY);\n}\n</code></pre> <p>Descarrega la soluci\u00f3 al problema del tres smileys</p> Activitat 413. Dibuixar pe\u00e7a domino ProblemaSoluci\u00f3 <p>Emplena el codi de la funci\u00f3 dibuixaDomino(int,int) per tal que mostre la imatge seg\u00fcent.</p> <pre><code>void setup() {\n    size(640,480);\n}\nvoid draw  () {\n    dibuixaDomino(5,4);\n}\n\nvoid dibuixaDomino(int a, int b) {   \n    // Codi per dibuixar la pe\u00e7a de domin\u00f3 amb la puntuaci\u00f3 que es passa per par\u00e0metre.\n}\n</code></pre> <p></p> <p>Descarrega la soluci\u00f3 al problema de la fitxa de domin\u00f3</p> Activitat 414. Dibuixar pe\u00e7a domin\u00f3 parametritzada ProblemaSoluci\u00f3 <p>Qu\u00e8 passa si en lloc de 5 i 4 passarem 6 i 6 per par\u00e0metre? Dibuixa el que esperes que dibuixe? </p> <p>Fes les modificacions necess\u00e0ries al codi per tal que funcione com s'espera. </p> <p>Ampliaci\u00f3: fes que el teu algorisme mostre totes les peces del domin\u00f3 ordenades en files i columnes.</p> <p>Descarrega la soluci\u00f3 al problema del joc del domin\u00f3</p>"},{"location":"Tema%2033.%20Programaci%C3%B3%20Modular/#pas-dobjectes-a-funcions","title":"Pas d'objectes a funcions","text":"<p>Quan passem un tipus primitiu a una funci\u00f3, es passa per valor. Per\u00f2 quan vam passar un objecte a una funci\u00f3, la situaci\u00f3 canvia dr\u00e0sticament, perqu\u00e8 els objectes es passen per refer\u00e8ncia. Java fa aquesta cosa interessant que \u00e9s una classe d'h\u00edbrid entre passar per valor i passar per refer\u00e8ncia.</p> <p>A l'crear una variable d'un tipus de classe (un objecte), nom\u00e9s varem crear una refer\u00e8ncia a un objecte. Per tant, quan passem aquesta refer\u00e8ncia a un m\u00e8tode, el par\u00e0metre que el rep es referir\u00e0 a el mateix objecte que el referit per l'argument.</p> <p>Aix\u00f2 vol dir efectivament que els objectes actuen com si es passessin als m\u00e8todes mitjan\u00e7ant l'\u00fas del pas per refer\u00e8ncia.</p> <p>IMPORTANT: Els canvis en l'objecte dins el m\u00e8tode es reflecteixen en l'objecte utilitzat com a argument.</p> <p>Per\u00f2 vejam un exemple per tal que quede m\u00e9s clar:</p> <pre><code>// Programa Java per demostrar el pas d'objectes a funcions\n\nvoid setup () {\n    size(640,480);\n}\n\nvoid draw () {\n    Demo ob1 = new Demo(100,22);\n    Demo ob2 = new Demo(100,22);\n    Demo ob3 = new Demo(-1,-1);\n\n    println(\"ob1==ob2: \" + ob1.equalTo(ob2));\n    println(\"ob1==ob3: \" + ob1.equalTo(ob3));\n    delay(1000);\n}\n\npublic class Demo {\n    public int a;\n    public int b;\n    \n    // Constructor de la classe\n    Demo (int i, int j) {\n        a = i;\n        b = j;\n    }\n\n    // Torna true si els valors s\u00f3n els mateixos\n    boolean equalTo(Demo obj) {\n        return (obj.a == this.a &amp;&amp; obj.b == this.b);\n    }\n}\n</code></pre> <p>Eixida</p> <pre><code>obj1 == obj2: true\nobj1 == obj3: false\n</code></pre> <p>Explicaci\u00f3 en imatges:</p> <p>1.Primer: S'instancien els tres objectes ob1, ob2 i ob3.</p> <pre><code>Demo ob1 = new Demo(100, 22);\nDemo ob2 = new Demo(100, 22);\nDemo ob3 = new Demo(-1, -1);\n</code></pre> <p></p> <p>2. Segon: En la funci\u00f3 equalTo, es declara una refer\u00e8ncia de classe Demo amb un objecte obj i s'assigna inicialment null. </p> <p></p> <p>3. Tercer: En la primera crida al m\u00e8tode equalTo (ob1.equalTo(ob2)), al par\u00e0metre obj del prototip del m\u00e8tode, se li passa l'argument 'ob2', \u00e9s a dir, 'obj' passa a ser una refer\u00e8ncia a 'ob2' quan la seg\u00fcent sent\u00e8ncia s'execute.</p> <pre><code>System.out.println(\"ob1 == ob2: \" + ob1.equalTo(ob2));\n</code></pre> <p></p> <p>4. Quart: Ara com podem observar, es crida al m\u00e8tode equalTo sobre 'ob1' i 'obj' fa refer\u00e8ncia a 'ob2'. Donat que els valors 'a' i 'b' s\u00f3n els mateixos per ambdues refer\u00e8ncies, aleshores si la condici\u00f3 \u00e9s veritat, tornar\u00e0 true.</p> <pre><code>if(obj.a == a &amp;&amp; obj.b == b)\n</code></pre> <p>5. Cinqu\u00e8: De nou 'obj' es reassignar\u00e0 a 'ob3' quan s'executa la seg\u00fcent sent\u00e8ncia com s'ha fet al pas tercer.</p> <pre><code>System.out.println(\"ob1 == ob3: \" + ob1.equalTo(ob3));\n</code></pre> <p></p> <p>6. Sis\u00e8: Ara, com podem observar, el m\u00e8tode equalTo es crida en 'ob1', i 'obj' fa refer\u00e8ncia a 'ob3'. Com que els valors 'a' i 'b' no s\u00f3n els mateixos per a les dues refer\u00e8ncies, aleshores torna false.</p> Activitat 415. Copia el codi <p>Copia i executa el codi anterior en Processing IDE</p>"},{"location":"Tema%2033.%20Programaci%C3%B3%20Modular/#recursivitat","title":"Recursivitat","text":"<p>Definici\u00f3</p> <p>En general, la recursivitat \u00e9s el proc\u00e9s de definir alguna cosa en termes de si mateix i \u00e9s una cosa semblant a una definici\u00f3 circular. El component clau d'un m\u00e8tode recursiu \u00e9s una declaraci\u00f3 que executa una crida a si mateix. La recursivitat \u00e9s un poder\u00f3s mecanisme de control.</p> <p>L'exemple cl\u00e0ssic de recursivitat \u00e9s el c\u00e0lcul del factorial d'un nombre. El factorial d'un nombre N \u00e9s el producte de tots els nombres enters que es troben entre 1 i N. Per exemple, el factorial de 3 \u00e9s 1 \u00d7 2 \u00d7 3, \u00e9s a dir, \u00e9s de 6.</p> <p>El seg\u00fcent programa mostra una forma recursiva de calcular el factorial d'un nombre. Per a prop\u00f2sits de comparaci\u00f3, tamb\u00e9 s'inclou un equivalent no recursiu (iteratiu).</p> <pre><code>void setup () {\n    size(640,480);\n}\n\nvoid draw () {\n    println(\"Factorial utilitzant un m\u00e8tode recursiu:\");\n    println(\"El factorial de 3 \u00e9s: \"+factorialRecursiu(3));\n    println(\"El factorial de 6 \u00e9s: \"+factorialRecursiu(6));\n    println();\n    println(\"Factorial utilitzant un m\u00e8tode iteratiu:\");\n    println(\"El factorial de 3 \u00e9s: \"+factorialIteratiu(3));\n    println(\"El factorial de 6 \u00e9s: \"+factorialIteratiu(6));\n    println();\n\n}\n\nint factorialRecursiu (int n) {\n    int res;\n\n    if (n == 1 ) \n        return 1;\n\n    res = factorial(n-1)*n;\n\n    return res;\n\n}\n\nint factorialIteratiu (int n) {\n    int t, res;\n\n    res=1;\n    for (t=1; t&lt;=n; t++) \n        res *=t;\n        \n    return res;\n}\n</code></pre> <p>Eixida</p> <pre><code>Factorial utilitzant un m\u00e8tode recursiu:\nEl factorial de 3 \u00e9s: 6\nEl factorial de 6 \u00e9s: 720\n\nFactorial utilitzant un m\u00e8tode iteratiu:\nEl factorial de 3 \u00e9s: 6\nEl factorial de 6 \u00e9s: 720\n</code></pre> <p>Stack Overflow</p> <p>Les versions recursives de moltes rutines poden executar-se una mica m\u00e9s lentament que els seus equivalents iteratius causa de la sobrec\u00e0rrega addicional de les trucades a m\u00e8todes addicionals. Massa crides recursives a un m\u00e8tode podrien causar un desbordament de la pila.</p> <p>Com l'emmagatzematge per als par\u00e0metres i les variables locals est\u00e0 a la pila i cada trucada nova crea una nova c\u00f2pia d'aquestes variables, \u00e9s possible que la pila s'acabe esgotant. Si aix\u00f2 passa, el sistema de temps d'execuci\u00f3 (run-time) de Java causar\u00e0 una excepci\u00f3. No obstant aix\u00f2, probablement no haur\u00e0s de preocupar-te per aix\u00f2 a menys que una rutina recursiva es torne boja.</p> <p>El principal avantatge de la recursivitat \u00e9s que alguns tipus d'algoritmes es poden implementar de forma m\u00e9s clara i m\u00e9s recursiva del que poden ser iterativament. Per exemple, l'algorisme de classificaci\u00f3 Quicksort \u00e9s bastant dif\u00edcil d'implementar de manera iterativa. A m\u00e9s, alguns problemes, especialment els relacionats amb la IA, semblen prestar-se a solucions recursives.</p> <pre><code>int fact(int n)\n{\n    // Condici\u00f3 de base equivocada (provoca Stack Overflow)\n    if (n == 100) \n        return 1;\n    else\n        return n*fact(n-1);\n}\n</code></pre> <p>En l'exemple anterior: Si es diu a fact (10), cridar\u00e0 a fact(9), fact(8), fact(7), etc., per\u00f2 el nombre mai arribar\u00e0 a 100. Per tant, no s'assoleix la condici\u00f3 base. Si la mem\u00f2ria s'esgota amb aquests m\u00e8todes en la pila, provocar\u00e0 un error de desbordament de pila.</p>"},{"location":"Tema%2033.%20Programaci%C3%B3%20Modular/#la-api-de-java","title":"La API de Java","text":"<p>L'API Java \u00e9s una interf\u00edcie de programaci\u00f3 d'aplicacions (API, per les seves sigles de l'angl\u00e8s: Application Programming Interface) prove\u00efda pels creadors de el llenguatge de programaci\u00f3 Java, que d\u00f3na als programadors els mitjans per desenvolupar aplicacions Java.</p> <p>Com el llenguatge Java \u00e9s un llenguatge orientat a objectes, l'API de Java proveeix d'un conjunt de classes utilit\u00e0ries per a efectuar tota mena de tasques necess\u00e0ries dins d'un programa.</p> <p>L'API Java est\u00e0 organitzada en paquets l\u00f2gics, on cada paquet cont\u00e9 un conjunt de classes relacionades sem\u00e0nticament.</p> <p></p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/","title":"Tema 5. Tipus Compostos de Dades","text":""},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#introduccio","title":"Introducci\u00f3","text":"<p>Fins ara hav\u00edem treballat amb tipus de dades simples: int, char, double, float, bool...  per\u00f2 que passa si necessitarem guardar un conjunt de dades o informaci\u00f3 relativa a una persona? Nom, cognoms, DNI, adre\u00e7a postal, data de naixement etc? Amb els tipus de dades simples ens seria impossible representar aquesta informaci\u00f3. Es per aix\u00f2 que s\u2019utilitzen els tipus de dades compostos que ens permetran agrupar de diverses maneres aquesta informaci\u00f3.</p> <p>Ens podem trobar diversos tipus de dades compostos i en aquest tema veurem: </p> <ul> <li>Cadenes de caracters: conjunt d'elements de tipus b\u00e0sic caracter.</li> <li>Arrays: tamb\u00e9 coneguts com vectors o arreglos, contenen elements d'un mateix tipus base o objectes de la mateixa classe.</li> <li>Estructures: conjunt d'elements heterogenis, no tenen per qu\u00e8 ser del mateix tipus base.</li> </ul>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#arrays","title":"Arrays","text":"<p>Comencem per veure l'estructura m\u00e9s simple de totes, l'array. Un array \u00e9s un tipus de dades compost que permet emmagatzemar un nombre x d\u2019elements del mateix tipus. Amb una \u00fanica declaraci\u00f3 podem tenir acc\u00e9s a un conjunt de valors agrupats. Aquestes agrupacions o arrays poden b\u00e9 ser de tipus simples o tamb\u00e9 de tipus compostos.</p> <p>Per tal d\u2019accedir a cadascun dels elements del array s\u2019utilitza un \u00edndex o posici\u00f3. La primera posici\u00f3 de tot array \u00e9s la 0 mentre que la segona seria la que t\u00e9 \u00edndex 1. A\u00e7\u00f2 pot marejar un poc al principi.</p> <ul> <li>Array d\u2019enters: {8,2,14,55,3,7}</li> <li>Array de car\u00e0cters: {\u2018n\u2019,\u2019a\u2019,\u2019t\u2019,\u2019o\u2019}</li> <li>Array de cadenes: {\"hola\", \"ciao\", \"hi\", \"allo\"}</li> </ul> <p>\u00c9s molt important distingir entre valor i posici\u00f3. Mentre que el valor \u00e9s el contingut de l\u2019array en una posici\u00f3 determinada la posici\u00f3 \u00e9s l\u2019\u00edndex que ens permet recorres l\u2019array i tot el seu contingut.</p> <p> </p> <p>A l\u2019exemple anterior tenim un array de 8 enters, la part superior de color blau ens indica les posicions que van de la 0 a la 7, 8 posicions ens total. Mentre que a la fila inferior trobarem el valor que cont\u00e9 cadascuna de les posicions. Per exemple en la posici\u00f3 5 (la sisena) de l\u2019array tindr\u00edem emmagatzemat un valor de 8.</p> <p>Un altre concepte a tenir en compte \u00e9s la dimensi\u00f3 o grand\u00e0ria de l\u2019array que ens determina el total d\u2019elements que es poden guardar en aquest. En el nostre cas la mida seria de 8.</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#declaracio-i-creacio-dun-array-en-java","title":"Declaraci\u00f3 i creaci\u00f3 d'un array en Java","text":"<p>Un array en Java \u00e9s una estructura de dades que ens permet emmagatzemar un conjunt de dades del mateix tipus. El grand\u00e0ria de l\u2019array es determina en la seua declaraci\u00f3 i no es permet la seua modificaci\u00f3 posterior</p> <pre><code>tipusBase nomArray [];\nnomArray = new tipusBase[grand\u00e0ria];\n</code></pre> <p>Alguns exemples:</p> <pre><code>int mes [];             // Declarem un array mes d'enters (sense espai)\nmes = new int [30];     // Creem espai per a 30 elements a l'array mes\nchar grups [];          // Declarem un array de caracters (sense espai assignat)\ngrups = new char [5];   // Creem espai per a 5 elements\n</code></pre> <p>Aquesta forma de declarar i inicialitzar arrays es pot fer en una sola l\u00ednia de la seg\u00fcent forma:</p> <pre><code>int agendaMensual = new int [30];  // Declarem un array d'enters i reservem 30 posicions de mem\u00f2ria\n</code></pre>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#inicialitzacio-dun-array","title":"Inicialitzaci\u00f3 d'un array","text":"<p>Per tal d\u2019accedir a les dades que cont\u00e9 un array necessitem l\u2019identificador d\u2019aquest aix\u00ed com tamb\u00e9 la posici\u00f3 concreta a la qual volem accedir. Per exemple, imaginem un array d\u2019enters que es diu n\u00fameros.</p> <pre><code>int n\u00fameros = new int [5];   // Declarem un array d'enters de cinc posicions\nn\u00fameros. [] = {2,4,6,8,10};  // Inicialitzaci\u00f3 dels cinc valors\n</code></pre> <p>D\u2019aquesta forma haur\u00edem creat un array de 5 enters que contindria els nombres parells fins al 10.</p> <p>Difer\u00e8ncia entre declaraci\u00f3 creaci\u00f3 i inicialitzaci\u00f3</p> <p>\u00c9s molt important que coneixeu b\u00e9 aquests conceptes:</p> <ul> <li>Declaraci\u00f3: assignaci\u00f3 de nom i tipus.</li> <li>Creaci\u00f3: reserva d'espai necessari.</li> <li>Inicialitzaci\u00f3: assignaci\u00f3 de valors.</li> </ul> <p>Fins ara tots aquests conceptes anaven lligats quan nom\u00e9s utilitzavem tipus de dades b\u00e0sics, per exemple, quan creavem en un programa nostre una variable de tipus enter, en la mateixa l\u00ednia anava la declaraci\u00f3 (donem nom a la variable), la creaci\u00f3 (automaticament es reserva l'espai necessari per al tipus de dades que hem creat) i la inicialitzaci\u00f3 (ja que per defecte i segons el tipus b\u00e0sic s'assignava un valor inicial). Per\u00f2 ara amb els arrays la cosa \u00e9s un poc m\u00e9s complexa. Vegem algun exemple.</p> <pre><code>int a; \nint [] array; \narray = new int [10]; \n</code></pre> <p>Repassem el codi anterior. A la l\u00ednia 1 de codi i nom\u00e9s amb aquesta l\u00ednia hem aconseguit:</p> <ol> <li>Declaraci\u00f3: es declara una variable amb identificador 'a' i de tipus enter</li> <li>Creaci\u00f3: automaticament el compilador li reserva l'espai necessari per a representar un enter: 4 bytes.</li> <li>Inicialitzaci\u00f3: per defecte se li dona valor 0.</li> </ol> <p>Ara si mirem les l\u00ednies seg\u00fcents podrem observar que:</p> <ol> <li>A la l\u00ednia 2 del codi es produeix la declaraci\u00f3 de l'array. Hem creat l'array i li hem assignat identificador per\u00f2, quants elements pot emmagatzemar?</li> <li>A la l\u00ednia 3 del codi \u00e9s on es crea l'array, \u00e9s a dir, es reserva espai en mem\u00f2ria. Al nostre cas 10 enters, \u00e9s a dir, 40 bytes.</li> <li>En aquest cas com que el tipus base de l'array \u00e9s enter, la inicialitzaci\u00f3 d'aquest vindria implicita en la reserva de mem\u00f2ria assignant-se valor 0 a tots els elements.</li> </ol> <p>Per\u00f2 com poden inicialitzar cadascun dels elements del nostre array de forma manual?</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#acces-als-elements-dun-array","title":"Acc\u00e9s als elements d'un array","text":"<p>Una vegada ja tenim la declaraci\u00f3 de l\u2019array i la seua inicialitzaci\u00f3, si volem b\u00e9 accedir al seu contingut o modificar-ho, necessitar\u00edem l\u2019identificador de l\u2019array i l\u2019\u00edndex al qual volem accedir. \u00c9s molt important tenir en compte que el primer element d\u2019un array en Java est\u00e0 a la posici\u00f3 (\u00edndex) 0 i no a la posici\u00f3 1 com ens indicaria la l\u00f2gica.</p> <pre><code>int primerNumero = n\u00fameros. [0]; // primerNumero valdria 2\nn\u00fameros. [0] = 12;  // Canviem el  primer numero de l\u2019array\n</code></pre> Activitat 501. Declara, crea i inicialitza ProblemaSoluci\u00f3 <p>Escriu un programa en Java utilitzant Processing IDE que permeta emmagatzemar en un array 10 enters. Aquest array s'inicialitzar\u00e0 element a element cridant a una funci\u00f3 que es dir\u00e0 'generaNumAleatori' i que tornara un enter random entre 0 i 100. La funci\u00f3 tindr\u00e0 el seg\u00fcent prototip:</p> <ul> <li>int generaNumAleatori();</li> </ul> <p>Has de tindre en compte que la inicialitzaci\u00f3 de l'array s'ha de fer al m\u00e8tode setup per tal que no es torne a modificar a cada cicle del draw</p> <p>Descarrega la soluci\u00f3 al problema de la inicialitzaci\u00f3 d'arrays</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#arrays-de-caracters","title":"Arrays de caracters","text":"<p>Un array que cont\u00e9 car\u00e0cters en lloc de n\u00fameros funciona d\u2019una forma molt semblant al que s\u2019ha explicat en els apartats anteriors. Es pot veure de forma senzilla a l\u2019exemple que vos mostrem a continuaci\u00f3.</p> <pre><code>// Declaraci\u00f3 de l\u2019array vocals que contindr\u00e0 un total de 5 posicions en mem\u00f2ria\nchar vocals = new char [5];\n\n// Inicialitzaci\u00f3 de l'array amb les vocals de l'alfabet.\nvocals [] = {\u2018a\u2019,\u2019e\u2019,\u2019i\u2019,\u2019o\u2019,\u2019u\u2019} \n\n// Acc\u00e9s a l'element primer (0) de l'array per modificar el seu valor\nvocals [0] = \u2018z\u2019;\n</code></pre> Activitat 502. Array de caracters ProblemaSoluci\u00f3 <p>Millora el codi anterior. Afegeix un array que puga emmagatzemar 10 caracters i inicialitza-lo amb un altre m\u00e8tode que es dir\u00e0: 'generaCharAleatori()'. El prototip del m\u00e8tode hauria de ser:</p> <ul> <li>char generaCharAleatori();</li> </ul> <p>Igual que a l'activitat anterior, haur\u00e0s de cridar a aquest m\u00e8tode des del setup i no des del draw</p> <p>Descarrega la soluci\u00f3 al problema de la inicialitzaci\u00f3 d'arrays</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#arrays-com-a-parametres","title":"Arrays com a par\u00e0metres","text":"<p>Com qualsevol altre tipus de dades, un array tamb\u00e9 es pot passar com a par\u00e0metre a un m\u00e8tode. Els arrays sempre es passen per refer\u00e8ncia, \u00e9s a dir, quan passem un array per par\u00e0metre a un m\u00e8tode, el que en realitat estem passant \u00e9s un adre\u00e7a de mem\u00f2ria que \u00e9s la que ens indicaria on est\u00e0 l\u2019inici del contingut d\u2019aquest. Passar per refer\u00e8ncia qualsevol par\u00e0metre significa que qualsevol modificaci\u00f3 que es faja dins del m\u00e8tode afectar\u00e0 tamb\u00e9 a l\u2019array fora d\u2019aquest.</p> <p>No passa el mateix si passem un element concret de l\u2019array, en aquest cas a l\u2019igual que amb els altres par\u00e0metres, aquests es passen per valor, per tant les  modificacions o canvis que es produeixen dins del m\u00e8tode no afectaran fora d\u2019aquest.</p> Activitat 503. Mostra array amigablement ProblemaSoluci\u00f3 <p>Seguint amb el codi anterior, fes dos m\u00e8todes per la nostra aplicaci\u00f3 que mostre, de forma amigable, l\u2019array de n\u00fameros i l\u2019array de car\u00e0cters. Els m\u00e8todes es podrien dir mostraEnters i mostraCaracters. Utilitza totes les funcions que conegues de Processing IDE per tal que mostre els arrays de la forma m\u00e9s est\u00e8tica possible.</p> <pre><code>void mostraEnters (int [] array) {\n\t// Codi per mostrar el vector d'enters\n}\n\nvoid mostraCaracters (char [] array) {\n\t// Codi per mostrar el vector de caracters\n}\n</code></pre> <p>Igual podria ser \u00fatil que li afegires coordenades (x,y) com a par\u00e0metres a la funci\u00f3 de mostrar arrays per tal de poder indicar-li on vols que es mostren.</p> <p>Descarrega la soluci\u00f3 al problema de mostrar arrays amigablement</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#bucle-for-en-java","title":"Bucle for en Java","text":"<p>A les activitats anteriors t'haur\u00e0s trobat amb el dilema de com rec\u00f3rrer tant l'array d'enters com el de caracters per tal d'inicialitzar-lo. Si vares entendre b\u00e9 el teorema d'estructura i les estructures iteratives, segurament haur\u00e0s utilitzat un bucle while, un do while o un for. Per\u00f2 aquests bucles a l'hora de rec\u00f3rrer arrays tenen un inconvenient: el grand\u00e0ria de l'array. El programador ha de controlar quan s'arriba al final de l'array per tal que l'aplicaci\u00f3 no done una errada inesperada i aix\u00f2 de vegades no \u00e9s senzill. Mira els seg\u00fcents exemples de bucles:</p> <pre><code>final int TAM = 10;\nint [] arrayEnters;\narrayEnters = new int [TAM];\n\n// Recorrem l'array amb un for\n\nfor (int i=0; i &lt; TAM; i++) \n\tarrayEnters[i] = i*10;\n\n// Recorrem l'array amb un while\nint i = 0;\nwhile (i &lt; TAM)\n\tarrayEnters[i] = i*10;\n\n// Recorrem l'array amb un do while\nint j = 0;\ndo {\n\tarrayEnters[j] = i*10;\n\tj++;\n}\nwhile(j &lt; TAM);\n</code></pre> Activitat 504. Fes una tra\u00e7a ProblemaSoluci\u00f3 <p>Fes una tra\u00e7a al codi anterior i observa com els diferents bucles recorren l'array. Escriu la teua conclusi\u00f3 a un comentari de documentaci\u00f3 al codi.</p> <p>Descarrega la soluci\u00f3 al problema dels diferents tipus de bucle</p> <p>La millor forma de rec\u00f3rrer un array sense haver de controlar quan s\u2019arriba al final \u00e9s la sent\u00e8ncia for usada d\u2019una manera alternativa. Si per exemple tenim un array d\u2019enters que s\u2019anomena \u00abvector\u00bb i volem llistar tots els seus elements, podr\u00edem fer el seg\u00fcent:</p> <pre><code>for (int i: vector){\n\t// Accions a realitzar\n}\t\n</code></pre> Activitat 505. Recorre i mostra l'array ProblemaSoluci\u00f3 <p>Seguint amb les activitats 502 i 503, modifica el m\u00e8todes mostraEnters i mostraCaracters per tal que utilitzen aquest \u00faltim bucle que hem vist per recorrer arrays en Java.  Quan executes per primera vegada, segurament no funcionar\u00e0 nom\u00e9s sustituint la l\u00ednia del for i haur\u00e0s d'afegir algo m\u00e9s de codi per poder solucionar el problema. Escriu el problema amb el que t'has trobat i la soluci\u00f3 que has aplicat a un comentari.</p> <p>Podriem fer el mateix als m\u00e8todes d'inicialitzaci\u00f3 dels arrays? Per qu\u00e8? Escriu la resposta en a un comentari de documentaci\u00f3.</p> <p>Descarrega la soluci\u00f3 al problema del bucle for \"especial\"</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#algorismes-de-recerca","title":"Algorismes de recerca","text":"<p>Implicitament amb l'aparici\u00f3 de les estructures de dades complexes en programaci\u00f3 que, en certa manera, es podrien entendre com a conjunts, apareix la necessitat de poder fer recerques elements dintre d'aquestos conjunts. Existeixen dos algorismes de recerca que veurem en aquest apartat: la recerca seq\u00fcencial i la recerca binaria. A l\u2019element que estem buscant li direm clau.</p> <p>Per\u00f2 abans d'anar per feina, canviarem temporalment l'entorn de programaci\u00f3 de Processing IDE a Eclipse IDE i veurem un poc m\u00e9s que s\u00f3n les classes i els objectes i com funcionen en Java abans de veure-ho amb m\u00e9s detall al tema seg\u00fcent. Realitza les activitats seg\u00fcents abans de continuar.</p> Activitat 506. Crea el projecte base ProblemaSoluci\u00f3 <p>Aquesta primera activitat en Processing IDE \u00e9s senzilla, nom\u00e9s haur\u00e0s de crear un nou projecte en Java i copiar el codi seg\u00fcent per\u00f2 primer, veiem amb m\u00e9s detall qu\u00e9 \u00e9s el que es preten aconseguir.  </p> <p>Volem crear un projecte que tinga les seg\u00fcents caracter\u00edstiques:</p> <ul> <li>Ha de tindre m\u00ednim una constant que ens indicar\u00e0 el total d\u2019elements que tindran els arrays, tant el d\u2019enters com el de car\u00e0cters.</li> <li>Com a global ha de tindre almenys un array de car\u00e0cters i un d\u2019enters.</li> <li>Tamb\u00e9 ha de tenir un m\u00e8tode setup i un draw que inicialitzen i executen l'aplicaci\u00f3.</li> </ul> <p>En aquesta primera activitat haureu de copiar aquest codi en un nou projecte java de Processing IDE i si et fixes, aquest projecte disposa dels m\u00e8todes: mostraEnters, mostraCaracters, generaNumAleatori i generaCharAleatori que ja havieu implementat a les activitats anteriors. Aprofita i reutilitza el codi que ja havies escrit en activitats anteriors.</p> <pre><code>/**\n* Projecte Tipus Compostos de Dades\n* -----------------------------------------------------------------------------------------------------\n* Projecte escrit en Processing IDE en el que tractarem els tipus compostos de dades en Java.\n* A aquest projecte se li aniran afegint funcionalitats conforme avancem en els continguts del Tema 5\n* @author  Vicent Sanchis\n* @since   10/11/23\n* @version 1.0\n*/\n// -----------------------------------------------------------------------------------------------------\n// CONSTANTS\n// -----------------------------------------------------------------------------------------------------\nstatic final int TAM = 10;\n// -----------------------------------------------------------------------------------------------------\n// Variables Globals\n// -----------------------------------------------------------------------------------------------------\nint  [] arrayEnters;\nchar [] arrayCaracters;\n// -----------------------------------------------------------------------------------------------------\n/**\n * M\u00e8tode setup: M\u00e8tode de configuraci\u00f3 i inicialitzaci\u00f3 de la nostra aplicaci\u00f3. \n * Aquest m\u00e8tode nom\u00e9s s'executa una vegada a l'inici de l'aplicaci\u00f3.\n * @return void\n*/\nvoid setup ()  {\n\t\n}\n/**\n * Metode draw: aquest m\u00e8tode funciona com una esp\u00e8cies de bucle del joc. \n * S'executa a 60Hz, \u00e9s a dir, 60 vegades o frames per segon.\n * \u00c9s en aquest m\u00e8tode on s'aprofita per fer animacions\n*/\nvoid draw () {\n\t\n}\n\nvoid mostraEnters() {\n\n}\n\nvoid mostraCaracters() {\n\n}\n\nint generaNumAleatori() {\n\treturn 0;\n}\n\nchar generaCharAleatori() {\n\treturn 0;\n}\n</code></pre> <p>Descarrega el projecte inicial</p> Activitat 507. Inicialitzaci\u00f3 d'arrays ProblemaSoluci\u00f3 <p>En aquest punt aprofitarem per crear un m\u00e8tode inicialitzador al nostre projecte. Com que volem que s\u2019execute en el moment que s\u2019inicia l'aplicaci\u00f3, aquest m\u00e8tode es cridar\u00e0 des del m\u00e8tode setup i \u00e9s ac\u00ed on inicialitzar\u00e0 els nostres arrays: el d'enters i el de caracters.</p> <p>C\u00f2pia el seg\u00fcent codi i posa'l al teu projecte.</p> <p>Afegeix i implementa els m\u00e8todes emplenaArrays() per tal que es criden des del setup i utilitzen els m\u00e8todes generaNumAleatori() i generaCharAleatori().</p> <p>Finalment i per tal de comprovar que anem b\u00e9 de moment, implementa els m\u00e8todes mostraEnters() i mostraCaracters() i crida'ls al m\u00e8tode draw i executa l'aplicaci\u00f3.</p> <p>Depura el codi anterior i comprova que tot est\u00e0 funcionant com s'espera que funcione.</p> <pre><code>void inicialitzaArrays () {\n\tarrayEnters    = new int  [TAM];\n\tarrayCaracters = new char [TAM];\n}\n</code></pre> <p>Descarrega la soluci\u00f3 a l'activitat 507</p> Activitat 508. Ampliaci\u00f3 de funcions ProblemaSoluci\u00f3 <p>En la seg\u00fcent activitat afegirem una funci\u00f3 a la nostra classe en la que ens mostre un men\u00fa de les accions que podem realitzar. Per tal de realitzar aquest men\u00fa afegirem un array d\u2019strings com a nou membre de la classe que inicialitzarem amb les seg\u00fcents opcions: </p> <ol> <li>Mostrar array enters</li> <li>Mostrar array caracters</li> <li>Reinicialitzar vectors</li> <li>Recerca seq\u00fcencial</li> <li>Recerca bin\u00e0ria</li> <li>Ordenar amb selecci\u00f3</li> <li>Ordenar amb inserci\u00f3</li> <li>Ordenar amb bombolla</li> <li>Ordenar amb Quicksort S. Ordenar amb Shell X. Eixir</li> </ol> <p>En aquesta activitat nom\u00e9s has de crear l'estructura per poder emmagatzemar el men\u00fa i emplenar-la.</p> <p>Descarrega la soluci\u00f3 a l'activitat 508</p> Activitat 509. Mostrar men\u00fa ProblemaSoluci\u00f3 <p>Fes una funci\u00f3 que mostre per pantalla el men\u00fa de forma amigable. El men\u00fa s'haur\u00e0 de mostrar a la pantalla de l'aplicaci\u00f3, amb text(), i no pel terminal. Al mateix temps haur\u00e0s d'implementar un m\u00e8tode que capture el teclat per tal que execute alguna de les opcions que es mostraran al men\u00fa. Tin en compte que l'aplicaci\u00f3 que estem dissenyant nom\u00e9s haur\u00e0 de fer alguna acci\u00f3 si es premen els n\u00fameros del 1 al 9, la 'S' o la 'X'. Pots utilitzar un sistema de fases. Has de crear una variable global opcio que en tot moment s\u00e0piga quina opci\u00f3 est\u00e0 executant (recorda que el draw \u00e9s un bucle), \u00e9s a dir, si opci\u00f3 val 1: mostrem l'array d'enters, si val 2: el de caracters, si val 3: estem buscant... i aix\u00ed successivament. \u00c9s el m\u00e8tode keyPressed el que s'encarregar\u00e0 de canviar el valor de la variable global opcio</p> <p>Seria molt interessant que el m\u00e8tode que s'encarrega de mostrar el men\u00fa admetera com a par\u00e0metres les coordenades x i y on es va a mostrar.</p> <p>Per facilitar saber quin n\u00famero correspon a quina opci\u00f3, utilitza constants: ENTERS = 1, CARACTERS = 2...</p> <p>Descarrega la soluci\u00f3 a l'activitat 509</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#sequencial","title":"Seq\u00fcencial","text":"<p>Tamb\u00e9 anomenada recerca lineal, es recorren tots els elements de l\u2019array des del principi fins que es troba la clau (element que estem buscant) o fins que s\u2019arriba a l\u2019\u00faltim element de l\u2019array.</p> <pre><code>int sequencial (int [] array, int clau) {\n\tfor (int i = 0; i &lt; array.length; i ++ ) \n\t\tif (array[i] == clau ) \n\t\t\treturn i;\n\treturn -1;\n}\n</code></pre>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#binaria","title":"Bin\u00e0ria","text":"<p>En aquest algoritme existeix la precondici\u00f3 que l\u2019array o vector sobre el qual vaja a fer-se la recerca, ha d\u2019estar ordenat. Aquest m\u00e8tode \u00e9s m\u00e9s \u00f2ptim. El funcionament d\u2019aquest algorisme \u00e9s el seg\u00fcent: en una primera iteraci\u00f3 es compara la clau (element que estem buscant) amb el valor al centre, que s\u2019anomena pivot, de l\u2019array. Poden passar tres coses:  - Que hajam trobat el que busquem, per tant s\u2019acaba la recerca - Que el pivot siga major que la clau. En aquest cas continuar\u00edem buscant a la meitat esquerra del vector desestimant la meitat dreta (pivot incl\u00f2s) - Que el pivot siga menor que la clau. Amb la qual cosa haur\u00edem de buscar a la part esquerra del vector.</p> <pre><code>int recercaBinaria (int [] array, int clau) {\n\tint posCentre, posInici, posFinal, valorCentral;\n\tposInici = 0;\n\tposFinal = array.length \u2013 1;\n\twhile (posInici &lt;= posFinal ) {\n\t\tposCentre = (posInici+posFinal)/2;\n\t\tvalorCentral=array[posCentre];\n\t\tif (clau == valorCentral) {\n\t\t\treturn posCentre;\n\t\t}\n\t\telse if (clau &lt; valorCentral) {\n\t\t\tposFinal = posCentro \u2013 1;\n\t\t}\n\t\telse {\n\t\t\tposInici = posCentro + 1;\n\t\t}\n\t}\n\treturn -1;\n}\n</code></pre> Activitat 510. Afegeix m\u00e8todes seq\u00fcencial i binari ProblemaSoluci\u00f3 <p>Afegeix el m\u00e8tode de recerca seq\u00fcencial i el de recerca binaria al projecte. Has d\u2019implementar el codi necessari per tal que quan l\u2019usuari seleccione una de les dues opcions de la nostra aplicaci\u00f3 (bin\u00e0ria o sequencial), demane el n\u00famero a buscar i mostre el resultat per pantalla, que b\u00e0sicament consisteix en indicar en quina posici\u00f3 s'ha trobat la clau buscada. </p> <p>En cas que es seleccione la recerca bin\u00e0ria, \u00e9s necessari que el vector estiga ordenat i com que encara no hem vist algorismes d'ordenaci\u00f3, seria recomanable que inicialitzareu un vector ordenat manualment per tal que puga fer les proves de la recerca bin\u00e0ria.</p> <p>Per tal de demanar la clau a buscar, pots utilitzar la classe de l'API de java JOptionPane. Pots trobar tota la informaci\u00f3 que necessites al Manual de refer\u00e8ncia de Java</p> <p>De moment nom\u00e9s farem les recerques sobre l'array d'enters per no complicar m\u00e9s l'aplicaci\u00f3.</p> <p>Descarrega la soluci\u00f3 a l'activitat 510</p> Activitat 511. Compara efici\u00e8ncies ProblemaSoluci\u00f3 <p>Comparem l\u2019efici\u00e8ncia dels dos algorismes de recerca vistos. Fes una funci\u00f3 al teu projecte en la que es compten el total de vegades que s\u2019accedeix  l\u2019array de n\u00fameros per arribar a trobar la clau. Haur\u00e0s de posar una opci\u00f3 m\u00e9s al men\u00fa, per exemple: \u00abComparar efici\u00e8ncia dels algoritmes\u00bb. Aquesta nova opci\u00f3 podria realitzar la recerca de tots els elements de l'array d'enters i fer una mitjana dels accessos que es fan a l'array en els dos casos per poder calcular una mitjana.</p> <p>Aquesta activitat no es pot realitzar sense modificar els algorismes de recerca seq\u00fcencial i bin\u00e0ria, ja que \u00e9s en aquestes l\u00ednies de codi on es pot saber quan s'accedeix a l'array d'enters. El que podries fer \u00e9s crear variables globals que porten aquest recompte al codi dels propis algorismes de recerca.</p> <p>Recorda que per poder realitzar la recerca bin\u00e0ria l'array ha d'estar ordenat.</p> <p>Descarrega la soluci\u00f3 a l'activitat 511</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#algorismes-dordenacio","title":"Algorismes d'ordenaci\u00f3","text":"<p>Els algorismes d\u2019ordenaci\u00f3 permeten ordenar un array en funci\u00f3 d\u2019un criteri establert al propi algorisme. Hi han diferents tipus d\u2019algorismes d\u2019ordenaci\u00f3: selecci\u00f3, inserci\u00f3, bombolla, Shell i Quicksort.</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#seleccio","title":"Selecci\u00f3","text":"<p>El procediment d\u2019ordenaci\u00f3 per selecci\u00f3 \u00e9s el seg\u00fcent: 1. Busquem l\u2019element m\u00e9s menut de l\u2019array i el col\u00b7loquem a la posici\u00f3 0 intercanviant els dos elements  2. A partir de la posici\u00f3 1 busquem l\u2019element m\u00e9s menut seg\u00fcent i fem el mateix que al pas anterior per\u00f2 aquesta vegada a la posici\u00f3 1 de l\u2019array 3. Repetim el pas 2 fins arribar a l\u2019\u00faltima posici\u00f3 de l\u2019array.</p> <p> </p> <pre><code>for(int i = 0; i &lt; TAM-1 ; i++){\n      int posMinim = i;\n      for(int j = i + 1 ; j &lt; TAM ; j++){\n            if(array[j] &lt; array[posMinim]){\n                  posMinim = j;\n            }\n      }\n\t  int aux = array[i];\n\t  array[i] = array[posMinim];\n\t  array[posMinim] = aux;\n}\n</code></pre> Activitat 512. Algorisme d'ordenaci\u00f3 per selecci\u00f3 ProblemaSoluci\u00f3 <p>Implementa l\u2019algorisme d\u2019ordenaci\u00f3 per selecci\u00f3 al projecte i vicula-la a l\u2019opci\u00f3 del men\u00fa corresponent. Has de comprovar que funciona. De moment ser\u00e0 millor que nom\u00e9s et centres en ordenar l'array d'enters i deixar el de caracters.    </p> <p>Descarrega la soluci\u00f3 a l'activitat 512</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#insercio","title":"Inserci\u00f3","text":"<p>Aquest algorisme consisteix en generar un nou array a partir del que ja es t\u00e9, tal que cada nou element inserit es posa a la seua posici\u00f3 correcta. Imaginem que tenim el seg\u00fcent array d\u2019enters per ordenar: </p> <p>{12, 5, 3, 13, 2, 9, 7}</p> <p>Generem un nou array amb el primer element de l\u2019array a ordenar</p> <p>{12}</p> <p>El seg\u00fcent valor de l\u2019array original \u00e9s 5. \u00c9s major o menor que el que ja est\u00e0 inserit? Com que la resposta \u00e9s menor, aquest s\u2019haur\u00e0 d\u2019inserir abans quedant de la seg\u00fcent forma:</p> <p>{5, 12}</p> <p>El nou array es genera ja ordenat. El seg\u00fcent valor de l\u2019array desordenat \u00e9s 3. On l\u2019haurem de col\u00b7locar? Just abans del 5 quedant aix\u00ed:</p> <p>{3, 5, 12}</p> <p>Repetim la mateixa operaci\u00f3 per cada element de l\u2019array original:</p> <p>{3, 5, 12, 13} {2, 3, 5, 12, 13} {2, 3, 5, 9, 12, 13} {2, 3, 5, 7, 9, 12, 13}</p> <pre><code>void insercio ( int [] array ) {\n\tint i, j, aux;\n\tfor (i=1; i &lt; array.length; i++ ) {\n\t\tj = i;\n\t\taux = array [i];\n\t\twhile ( j &gt; 0 &amp;&amp; aux &lt; array[j-1]) {\n\t\t\tarray [j] = array [j-1];\n\t\t\tj--;\n\t\t}\n\t\tarray[j] = aux;\n\t}\n}\n</code></pre> <p> </p> Activitat 513. Algorisme ordenaci\u00f3 per inserci\u00f3 ProblemaSoluci\u00f3 <p>Implementa l\u2019algorisme d\u2019ordenaci\u00f3 per inserci\u00f3 al projecte i vincula-la a l\u2019opci\u00f3 del men\u00fa corresponent. Igual que a l'activitat anterior, centrat en l'array d'enters nom\u00e9s.</p> <p>Descarrega la soluci\u00f3 a l'activitat 513</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#bombolla","title":"Bombolla","text":"<p>L\u2019algorisme d\u2019ordenaci\u00f3 per bombolla \u00e9s el m\u00e9s conegut i tamb\u00e9 el menys eficient, ja que a cada passada per ordenar un element compara cadascun d\u2019ells amb el seu adjacent de forma que si les seues posicions s\u00f3n incorrectes, s\u2019intercanvien. Al finalitzar cada passada l\u2019element m\u00e9s gran es va posant al final de la llista</p> <p>Donat el seg\u00fcent array: </p> <p>{12, 5, 3, 13, 2, 9, 7}</p> <p>Pas 1. Comparem les posicions 0 i 1, \u00e9s a dir, 12 i 5 i com que estan desordenats (el primer \u00e9s major que el segon), s\u2019intercanvien.</p> <p>{5, 12, 3, 13, 2, 9, 7}</p> <p>Pas 2. A continuaci\u00f3 comparem les posicions 1 i 2 de l\u2019array, que s\u00f3n 12 i 3. Com que tamb\u00e9 estan desordenades, les intercanviem</p> <p>{5, 3, 12, 13, 2, 9, 7}</p> <p>Pas 3. Ara anem a comparar les posicions 2 i 3 que contenen els valors 12 i 13 respectivament. Com que estan ben ordenades no es realitza cap acci\u00f3:</p> <p>Pas 4. Posicions 3 i 4 que s\u00f3n 13 i 2. Les intercanviem.</p> <p>{5, 3, 12, 2, 13, 9, 7}</p> <p>Pas 5. Posicions 4 i 5 que tamb\u00e9 estan desordenades per tant executem l\u2019intercanviem</p> <p>{5, 3, 12, 2, 9, 13, 7}</p> <p>Pas 6. Comparem posicions 5 i 6 que tenen els valors 13 i 7 i s\u2019han d\u2019intercanviar</p> <p>{5, 3, 13, 2, 9, 7, 13}</p> <p>Una vegada finalitzada la primera passada hem aconseguit que l\u2019element major de l\u2019array estiga posicionat a l\u2019\u00faltima posici\u00f3. A la seg\u00fcent passada recorrerem l\u2019array fins la posici\u00f3 anterior a on es troba ara el n\u00famero 13, \u00e9s a dir la posici\u00f3 5 i aquest procediment es repeteix fins arribar a la posici\u00f3 0</p> <p>Finalment el codi quedaria aix\u00ed:</p> <p><pre><code>void bombolla ( int [] arrayNumeros) {\n\tfor (int i = 0; i &lt; arrayNumeros.length-1; i++) {\n\t\tfor(int j = i + 1; j &lt; arrayNumeros.length; j++) {\n\t\t\tif (arrayNumeros[i] &gt; arrayNumeros[j]) {\n\t\t\t\tint canvi = arrayNumeros[i];\n\t\t\t\tarrayNumeros[i] = arrayNumeros[j];\n\t\t\t\tarrayNumeros[j] = canvi;\n\t\t\t}\n\t\t}\n\t}\n}\n</code></pre> </p> Activitat 514. Ordenaci\u00f3 per bombolla ProblemaSoluci\u00f3 <p>Implementa l\u2019algorisme d\u2019ordenaci\u00f3 per bombolla al projecte i vincula-la a l\u2019opci\u00f3 del men\u00fa corresponent igual que has fet a les dues activitats anteriors.</p> <p>Descarrega la soluci\u00f3 a l'activitat 514</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#shell","title":"Shell","text":"<p>L\u2019algorisme Shell \u00e9s una millora de l\u2019algorisme d\u2019inserci\u00f3 directa. Compara elements separats per un espai de v\u00e0ries posicions el que permet que un element faja passos m\u00e9s grans fins trobar la seua posici\u00f3 esperada. </p> <p>Els passos m\u00faltiples sobre els elements de l\u2019array es fan amb espais de posicions cada vegada m\u00e9s menuts. L\u2019\u00faltim pas de l\u2019algorisme Shell \u00e9s una simple ordenaci\u00f3 per inserci\u00f3 per\u00f2 arribats a aquest punt es pot garantir que l\u2019array esta ja quasi ordenat, el que fa que l\u2019ordenaci\u00f3 per inserci\u00f3 siga molt eficient.</p> <p>Vegem com actuaria aquest algorisme aplicat sobre l\u2019array que estem utilitzant com exemple: </p> <p>{12, 5, 3, 13, 2, 9, 7}. </p> <p>Aquest array t\u00e9 un total de 7 elements (n=7). Creem n/2 grups, separats n/2 n\u00fameros entre ells. n/2=7/2=3, \u00e9s a dir, el nostre interval per crear grups val 3 Marquem en negreta els valors de la primera subllista.</p> <p>{12, 5, 3, 13, 2, 9, 7}</p> <p>Donats els elements 12, 13 i 7 els hem d\u2019ordenar correctament</p> <p>{7, 5, 3, 12, 2, 9, 13}</p> <p>Continuem formant grups de 3 a partir del segon valor de l\u2019array</p> <p>{7, 5, 3, 12, 2, 9, 13}</p> <p>Ordenem els n\u00fameros en cas de no estar-ho, quedant l\u2019array aix\u00ed:</p> <p>{7, 2, 3, 12, 5, 9, 13}</p> <p>Passem a l\u2019element 3 de l\u2019array i apliquem el mateix procediment.</p> <p>{7, 2, 3, 12, 5, 9, 13}</p> <p>Els valors ja estan ordenats en aquest cas, per tant no hem de fer res. </p> <p>{7, 2, 3, 12, 5, 9, 13}</p> <p>No podem m\u00e9s grups ja que hem arribat al final del vector. Ara el que hem de fer \u00e9s tornar a dividir el nostre interval entre 2. El nou interval \u00e9s 3/2 = 1. </p> <pre><code>void shellSort ( int [] array) { \n\tint interval, i, j, k, temp;\n\tinterval = array.length / 2;\n\twhile ( interval &gt; 0 ) {\n\t\tfor (i=interval; i&lt;array.length; i++) {\n\t\t\tj=i-interval;\n\t\t\twhile(j&gt;=0) {\n\t\t\t\tk=j+interval;\n\t\t\t\tif(array[j] &lt;= array[k]) \n\t\t\t\t\tj = -1;\n\t\t\t\telse {\n\t\t\t\t\ttemp = array[j];\n\t\t\t\t\tarray[j] = array[k];\n\t\t\t\t\tarray[k] = temp;\n\t\t\t\t\tj -= interval;\n\t\t\t\t}\n\t\t\t}\n\t\t} interval = interval / 2;\n\t}\t\n}\n</code></pre> Activitat 515. Ordenaci\u00f3 per Shell ProblemaSoluci\u00f3 <p>Implementa l\u2019algorisme d\u2019ordenaci\u00f3 shell al projecte i vincula-la a l\u2019opci\u00f3 del men\u00fa corresponent. </p> <p>Descarrega la soluci\u00f3 a l'activitat 515</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#quicksort","title":"Quicksort","text":"<p>Aquest \u00e9s un dels algorismes d\u2019ordenaci\u00f3 m\u00e9s r\u00e0pids i eficients. Utilitza la t\u00e8cnica \u00abdivideix i vencer\u00e0s\u00bb de tal forma que divideix l\u2019array a ordenar en parts que ordenar\u00e0 al mateix temps. B\u00e0sicament es tria l\u2019element de l\u2019array com a pivot tal que es forme dos subArrays, en un d\u2019ells s\u2019emmagatzemen els elements menors que l\u2019element que hem triat com a pivot i a l\u2019altre array es guarden els element majors que el pivot. Una vegada fet, s\u2019aplica el mateix procediment als subarrays obtinguts.</p> <p>Seguint amb el mateix array dels exemples anteriors, aplicarem l\u2019algorisme d\u2019ordenaci\u00f3 quicksort.</p> <p>{12, 5, 3, 13, 2, 9, 7}</p> <p>Triem un valor que fara el paper de pivot, per exemple el primer element de l\u2019array, el 12 i a partir d\u2019aquest creem dos arrays, un amb els n\u00fameros menors que el pivot i l\u2019altre amb els n\u00fameros majors que el pivot:</p> <p>pivot: {12}; menors: {5, 3, 2, 9, 7}; majors {13}</p> <p>El subarray de majors ja est\u00e0 ordenada ja que nom\u00e9s t\u00e9 un n\u00famero. Ara ordenem el subarray de menors: {5, 3, 2, 9, 7} per la qual cosa escollim com a pivot el primer element de l\u2019array, \u00e9s a dir, el 5.</p> <p>pivot: {5}; menors {3, 2}; majors: {9, 7}.</p> <p>Seguim dividint en subarrays, Una vegada els subarrays estan ordenats sempre sempre s\u2019assemblaran col\u00b7locant subarrays de menors, seguides de pivot i subarrays de majors</p> <p>{2, 3, 5, 7, 9, 12, 13}</p> <pre><code>void Quicksort (int [] array, int esquerra, int dreta) {\n  int pivot = array [esquerra];                 // Agafem el primer elment com a pivot\n  int i = esquerra;                             // L'index i fa la recerca de esquerra a dreta\n  int j = dreta;                                // L'index j fa la recerca de dreta a esquerra\n  int aux;\n \n  while(i &lt; j){                                // Mentre no es creuen les recerques                                   \n     while(array [i] &lt;= pivot &amp;&amp; i &lt; j)        // Busca l'element major que el pivot \n       i++;\n       \n     while(array [j] &gt; pivot)                  // Busca l'element menor que el pivot \n       j--;      \n       \n     if (i &lt; j) {                              // Si no s'han creuat els intercanvia (swap)                      \n         aux= array[i];                      \n         array[i]=array[j];\n         array[j]=aux;\n     }\n   }\n   \n   array [esquerra] = array [j];               // Es posa el pivot de tal forma que teni els menors a l'esquerra i els majors a la dreta. \n   array [j] = pivot;      \n   \n   if (esquerra &lt; j-1)\n      Quicksort (array, esquerra, j-1);        // Ordenem el subarray esquerre\n      \n   if (j+1 &lt; dreta)\n      Quicksort (array, j+1, dreta);           // Ordenem el subarray dret\n}\n}\n</code></pre> Activitat 516. Algorisme Quicksort ProblemaSoluci\u00f3 <p>Implementa l\u2019algorisme d\u2019ordenaci\u00f3 quicksort al projecte i vincula-la a l\u2019opci\u00f3 del men\u00fa corresponent. Comprova que funciona.</p> <p>Descarrega la soluci\u00f3 a l'activitat 516</p> Activitat 517. Ampliaci\u00f3. Mostrar tra\u00e7a algorismes ordenaci\u00f3 ProblemaSoluci\u00f3 <p>Fes que en cada algorisme d\u2019ordenaci\u00f3 es mostre una tra\u00e7a on a cada passada de l\u2019algoritme, \u00e9s a dir, cada vegada que mou un element a l\u2019array, mostre aquest per pantalla.</p> <p>Encara no disponible</p> Activitat 518. Entrega del projecte ProblemaSoluci\u00f3 <p>Entrega mitjan\u00e7ant la plataforma aules el projecte final que inclou de les activitats 506 a 518 amb totes les funcions tant de recerca com d\u2019ordenaci\u00f3 sobre arrays unidimensionals.</p> <p>Descarrega la soluci\u00f3 a l'activitat 518</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#arrays-multidimensionals","title":"Arrays multidimensionals","text":"<p>Fins ara hem estan utilitzant arrays d\u2019una sola dimensi\u00f3, coneguts tamb\u00e9 com vectors, taules o llistes. Aquests arrays es recorren amb ajuda d\u2019un sol \u00edndex (tenen una sola dimensi\u00f3). En aquest apartat estudiarem arrays de m\u00e9s d\u2019una dimensi\u00f3 per als que necessitarem m\u00e9s d\u2019un \u00edndex a l\u2019hora de ser recorreguts.  Els arrays multidimensionals m\u00e9s comuns s\u00f3n els de dues dimensions o bidimensionals, tamb\u00e9 coneguts com matrius. \u00c9s com\u00fa representar aquest tipus de dades com una taula composta per una s\u00e8rie de files i columnes:</p> 0,0 0,1 0,2 0,3 ... 0,N 1,0 1,1 1,2 1,3 ... 1,N 2,0 2,1 2,2 2,3 ... 2,N ... ... ... ... ... ... N,0 N,1 N,2 N,3 ... N,N <p>Al contrari del que passava amb els arrays d\u2019una sola dimensi\u00f3 on nom\u00e9s necessitavem un \u00edndex per accedir al valor, en els arrays de dues dimensions com el de l\u2019exemple anterior, necessitarem dos \u00edndex per accedir al valor de l\u2019array. Les matrius, com es coneixen els arrays bidimensionals es forme per files i columnes.</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#declaracio-i-creacio","title":"Declaraci\u00f3 i creaci\u00f3","text":"<p>Per tal de declarar una matriu en java, \u00e9s a dir, un array de dues dimensions, ho farem de la seg\u00fcent forma:\u00c7</p> <pre><code>tipusBase matriu [][];\n</code></pre> <p>Si es fixeu, mentre quan declaravem un array d\u2019una sola dimensi\u00f3 utilitzavem nom\u00e9s un parell de claud\u00e0tors: </p> <p><pre><code>tipusBase array[];\n</code></pre> Ara que volem crear una matriu (array de dues dimensions) utilitzarem dos parells de claud\u00e0tors.</p> <p>\u00c9s f\u00e0cil deduir que si volguerem declarar un array de tres dimensions, hauriem d\u2019utilitzar tres parells de claud\u00e0tors.</p> <p>Amb aquesta instrucci\u00f3 el que estem fent es declarar la matriu per\u00f2 no li hem dit quina grand\u00e0ria tindr\u00e0. Eixa \u00e9s la difer\u00e8ncia entre declaraci\u00f3 i creaci\u00f3. Per tal de crear, \u00e9s a dir, reservar espai per a la nostra matriu, hem de fer el seg\u00fcent:</p> <pre><code>matriu = new tipusBase[n][m];\n</code></pre> <p>On n i m s\u00f3n valors enters que ens indiquen la grand\u00e0ria de cada dimensi\u00f3.  Per exemple, per declarar i crear una matriu d\u2019enters de 5 files i 10 columnes fariem el seg\u00fcent:</p> <p><pre><code>int matriuEnters [][];\nmatriuEnters = new int [5][10];\n// Tamb\u00e9 ho podriem fer en una sola instrucci\u00f3\nint matriuEnters[][] = new int [5][10];\n</code></pre> Encara no disponible</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#inicialitzacio-i-acces","title":"Inicialitzaci\u00f3 i acc\u00e9s","text":"<p>El proc\u00e9s d\u2019inicialitzaci\u00f3 d\u2019un vector, dona igual les dimensions que tinga, consisteix en donar-li valor a les cel\u00b7les que inicialment estan buides. Aquesta inicialitzaci\u00f3 es pot fer de tres formes diferents:</p> <ul> <li>De forma individual.</li> <li>En el moment de la declaraci\u00f3.</li> <li>Mitjan\u00e7ant l\u2019\u00fas d\u2019una sent\u00e8ncia de control repetitiva.</li> </ul> <p>Inicialitzaci\u00f3 i acc\u00e9s a cada element de l'array Per accedir a una dada en un array multidimensional hem de coneixer els \u00edndex de posici\u00f3 d\u2019aquest. En un array de dues dimensions, per accedir a una dada s\u2019ha d\u2019indicar la fila i la columna d\u2019on es troba aquesta informaci\u00f3.</p> <p>Per exemple, imaginem que tenim la seg\u00fcent taula (array de dos dimensions)</p> 12 13 5 9 22 14 21 11 8 56 23 7 6 10 32 36 24 99 78 55 57 79 18 14 <p>Per tal d\u2019inicialitzar-la element a element hauriem d\u2019executar les seg\u00fcents sent\u00e8ncies:</p> <pre><code>for (int i = 0; i &lt; FILES; i ) {\n\tfor (int j=0; j&lt; COLUMNES; j++ ) {\n\t\tarray [i][j] = 0;\n\t}\n}\n</code></pre> <p>Per tal d\u2019entendre el concepte de matriu o array bidimensional, realitzarem un exercici on treballarem amb les t\u00edpiques matrius matem\u00e0tiques, realitzant les operacions pr\u00f2pies d\u2019aquestes.</p> Activitat 519. Matrius ProblemaSoluci\u00f3 <p>Es tracta de desenvolupar una aplicaci\u00f3 que realitze operacions utilitzant matrius de 3x3. El men\u00fa ha de mostrar el seg\u00fcent:</p> <ol> <li>Emplena la primera matriu</li> <li>Emplena la segona matriu</li> <li>Visualitza les matrius</li> <li>Suma les matrius</li> <li>Multiplica per un escalar</li> <li>Producte de matrius</li> <li>Trasposta</li> <li>Eixir</li> </ol> <p>Per a cadascuna de les operacions anteriors s\u2019ha d\u2019implementar un m\u00e8tode Mireu el seg\u00fcent exemple:</p> <p></p> <p>Descarrega la soluci\u00f3 a l'activitat 519</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#arrays-irregulars","title":"Arrays irregulars","text":"<p>Una matriu irregular o escalonada no \u00e9s m\u00e9s que un array de taules, on cadascuna de les taules que formen l\u2019array no necess\u00e0riament han de tenir la mateixa grand\u00e0ria.</p> <p></p> <p>La declaraci\u00f3 d\u2019un array irregular en java seria de la seg\u00fcent manera:</p> <pre><code>// Declaraci\u00f3 d\u2019una matriu (files)\nint [][] mat;\n\n// Primer creem la quantitat de files deixant les columnes buit\nmat=new int[3][];\n\n// Despr\u00e9s creem cada fila indicant la quantitat d\u2019elements\nmat[0]=new int[5];\nmat[1]=new int[3];\nmat[2]=new int[2];\n</code></pre> Activitat 520. Alumnes i assignatures ProblemaSoluci\u00f3 <p>Imagina que has de mantindre les notes dels alumnes de tres assignatures. A cada assignatura tens 15 alumnes, tal que s\u2019ha de mantenir la informaci\u00f3 mitjan\u00e7ant una variable que gr\u00e0ficament presenta la seg\u00fcent estructura</p> Assignatura 1 5 6 7,3 2,3 4,5 Assignatura 2 7,8 8,7 7,7 3,3 4,8 Assignatura 3 7 9 10 8,2 2,8 <p>Crea una aplicaci\u00f3 en la que pugues:</p> <ol> <li>Inserir notes de l\u2019assignatura sel\u00b7leccionada.</li> <li>Inserir totes les notes</li> <li>Calcular la nota mitjana de les assignatures.</li> <li>Ordenar les notes de forma ascendent.</li> <li>Estad\u00edstica.</li> <li>Eixir de l\u2019aplicaci\u00f3.</li> </ol> <p>La primera opci\u00f3 primer et demanar\u00e0 de quina assignatura vols introduir una nota (1, 2, 3) i despr\u00e9s et demanar\u00e0 la nota que podr\u00e0 ser un n\u00famero decimal des del 0.0 fins al 10.0. La segona, et mostrar\u00e0 un di\u00e0leg on l'usuari anir\u00e0 introduint notes una a una fins introduir-les totes. Al di\u00e0leg s'informar\u00e0 en tot moment de quina assinatura i quina nota es tracta. Calcular la mitjana de les assignatures mostrar\u00e0 per la pantalla de l'aplicaci\u00f3 per a cada assignatura quina \u00e9s la seua mitjana. L'opci\u00f3 d'ordenar les notes de forma ascendent \u00e9s que per a cada assignatura les notes passaran a estar disposades a l'array de menor a major nota. L\u2019opci\u00f3 estad\u00edstica mostra la quantitat de notes entre 0 i 4, entre 4 i 5, entre 5 i 7, entre 7 i 9 i entre 9 i 10. Eixir tancaria l'apliaci\u00f3.</p> <p>Descarrega la soluci\u00f3 a l'activitat 520</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#un-sudoku-simple","title":"Un sudoku simple","text":"<p>Llig l'enunciat de la seg\u00fcent activitat i fes un sudoku simple.</p> Activitat 521. Un sudoku simple ProblemaSoluci\u00f3 <p>El seg\u00fcent codi \u00e9s un m\u00e8tode que s'encarrega d'emplenar una matriu de 9x9 seguint la l\u00f2gica del sudoku</p> <pre><code>void inicialitzaArraySudoku (int [][] arraySudoku ) {\n\t// Primera fase: inicialitzem la matriu\n\tfor(int fil=0; fil &lt; 9; fil ++) {\n\t\tfor(int col=0; col &lt; 9; col ++) {\n\t\tif (fil == 0 || fil == 3 || fil == 6) \n\t\t\tarraySudoku[fil][col] = (col + fil/3)%9+1;\n\t\telse if ((fil &gt; 0 &amp;&amp; fil &lt; 3) || (fil &gt; 3 &amp;&amp; fil &lt; 6) || (fil &gt; 6 &amp;&amp; fil &lt; 9))\n\t\t\tarraySudoku[fil][col] = (arraySudoku[(fil/3)*3][col]+3*fil-1)%9+1;\n\t\t}\n\t}\n\t\n\t// Segona fase: barallem files\n\tfor(int fil = 0; fil &lt; 9; fil += 3) {\n\t\tint f1, f2;\n\t\tdo {\n\t\tf1 = (int)random(fil,fil+3);\n\t\tf2 = (int)random(fil,fil+3);\n\t\t}\n\t\twhile(f1 == f2);\n\t\t\n\t\tfor (int col=0; col &lt; 9; col ++) {\n\t\tint aux = arraySudoku[f1][col];\n\t\tarraySudoku[f1][col] = arraySudoku[f2][col];\n\t\tarraySudoku[f2][col] = aux;\n\t\t}\n\t}\n\t\n\t// Tercera fase: barallem les columnes\n\tfor(int col = 0; col &lt; 9; col += 3) {\n\t\tint c1, c2;\n\t\tdo {\n\t\tc1 = (int)random(col,col+3);\n\t\tc2 = (int)random(col,col+3);\n\t\t}\n\t\twhile(c1 == c2);\n\t\t\n\t\tfor (int fil=0; fil &lt; 9; fil ++) {\n\t\tint aux = arraySudoku[fil][c1];\n\t\tarraySudoku[fil][c1] = arraySudoku[fil][c2];\n\t\tarraySudoku[fil][c2] = aux;\n\t\t}\n\t}\n\t\n\t// Quarta fase: interncanviem dues files de submatrius \n\tint sm1, sm2;\n\tdo {\n\t\tsm1 = (int)random(0,3);\n\t\tsm2 = (int)random(0,3);\n\t}\n\twhile(sm1 == sm2);\n\t\n\tfor (int i = 0; i &lt; 3; i ++) {\n\t\tfor(int j = 0; j &lt; 9; j ++) {\n\t\tint val1 = 3*sm1+i;\n\t\tint val2 = 3*sm2+i;\n\t\tint aux = arraySudoku[val1][j];\n\t\tarraySudoku[val1][j] = arraySudoku[val2][j];\n\t\tarraySudoku[val2][j] = aux;\n\t\t}\n\t}\n}\n</code></pre> <p>Escriu un programa utilitzant Processing IDE que et mostre un Sudoku per pantalla, que permeta al jugador emplenar les cel\u00b7les buides i que comprove si el n\u00famero escollit es v\u00e0lid o no.</p> <p>Descarrega la soluci\u00f3 a l'activitat 521</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#colleccions","title":"Col\u00b7leccions","text":"<p>Les col\u00b7leccions en Java s\u00f3n un marc que proporciona una arquitectura per emmagatzemar i manipular el grup d'objectes Poden realitzar totes les operacions que realitzeu sobre les dades, com ara la cerca, l'ordenaci\u00f3, la inserci\u00f3, la manipulaci\u00f3 i la supressi\u00f3.</p> <p>Java ofereix interf\u00edcies (Set, List, Queue, Deque) i classes (ArrayList, Vector, LinkedList, PriorityQueue, HashSet, LinkedHashSet, TreeSet).</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#jerarquia-de-classes","title":"Jerarquia de classes","text":"<p>A continuaci\u00f3 pots observar la jerarquia de classes que ens ofereix l'API de Java respecte de les col\u00b7leccions.</p> classDiagram \tIterable &lt;|-- Collection \tCollection &lt;|-- List \tCollection &lt;|-- Queue \tCollection &lt;|-- Set \tList &lt;|.. ArrayList \tList &lt;|.. LinkedList \tList &lt;|.. Vector \tList &lt;|.. Stack \tQueue &lt;|--Deque \tQueue &lt;|..PriorityQueue \tSet &lt;|-- SortedSet \tSet &lt;|.. HashSet     Set &lt;|.. LinkedHashSet \tSortedSet &lt;|.. TreeSet \tDeque &lt;|.. ArrayDeque"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#arraylist","title":"ArrayList","text":"<p>La classe ArrayList implementa la interf\u00edcie List. Utilitza una matriu din\u00e0mica per emmagatzemar l'element duplicat de diferents tipus de dades. La classe ArrayList mant\u00e9 l'ordre d'inserci\u00f3 i no est\u00e0 sincronitzada. Es pot accedir aleat\u00f2riament als elements emmagatzemats a la classe ArrayList. Considereu l'exemple seg\u00fcent.</p> <pre><code>// Primer creem l'arrayList\nArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();\n\n// Despr\u00e9s afegim elements a la llista\nlist.add (\"Ravi\" );\nlist.add (\"Vijay\");  \nlist.add (\"Ravi\" );  \nlist.add (\"Ajay\" );  \n</code></pre>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#hashset","title":"HashSet","text":"<p>Aquesta classe implementa la interf\u00edcie Set, recolzada per una taula hash (en realitat una inst\u00e0ncia HashMap). No ofereix cap garantia quant a l'ordre d'iteraci\u00f3 del conjunt; en particular, no garanteix que l'ordre es mantingui constant al llarg del temps. Aquesta classe permet l'element nul.</p> <pre><code>// Primer creem l'arrayList\nHashSet&lt;String&gt; hSet = new HashSet&lt;String&gt;();\n\n// Despr\u00e9s afegim elements a la llista\nhSet.add (\"Ravi\" );\nhSet.add (\"Vijay\");  \nhSet.add (\"Ravi\" );  \nhSet.add (\"Ajay\" );\n\nboolean isAdded = participants.add(\"Anna\"); // Aquest no s'afegir\u00e0 perqu\u00e8 ja existeix\nif (!isAdded) {\n\tprintln(\"Anna ja \u00e9s a la llista de participants!\");\n}\n\n// Recorrem la llista i mostrem per pantalla\nIterator itr = list.iterator();  \nwhile (itr.hasNext ()) {  \n\tprintln (itr.next ());  \n}\n</code></pre> Activitat 522. Crea una llista amb els dies de la setmana utilitzan un ArrayList <p>Utilitza una col\u00b7lecci\u00f3 Arraylist per crear un conjunt amb els dies de la setmana</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#treeset","title":"TreeSet","text":"<pre><code>// Primer creem l'arrayList\nTreeSet&lt;String&gt; words = new ArrayList&lt;String&gt;();\n\n// Despr\u00e9s afegim elements a la llista\nwords.add (\"Ravi\" );\nwords.add (\"Vijay\");  \nwords.add (\"Ravi\" );  \nwords.add (\"Ajay\" );  \n\n// Mostrar la llista de paraules ordenades\nprintln(\"Llista de paraules ordenades:\");\nfor (String word : words) {\n\tprintln(word);\n}\n\n// Comprovar la primera i l'\u00faltima paraula\nprintln(\"Primera paraula: \" + words.first());\nprintln(\"\u00daltima paraula: \" + words.last());\n\n// Afegir m\u00e9s paraules i comprovar l'ordre\nwords.add(\"alfabet\");\nwords.add(\"zebra\");\nprintln(\"Despr\u00e9s d'afegir m\u00e9s paraules:\");\nfor (String word : words) {\n\tprintln(word);\n}\n\n// Eliminar una paraula\nwords.remove(\"java\");\nprintln(\"Despr\u00e9s d'eliminar 'java': \" + words);\n\n// Comprovar si una paraula existeix\nString checkWord = \"estructures\";\nif (words.contains(checkWord)) {\n\tprintln(\"'\" + checkWord + \"' est\u00e0 a la llista.\");\n} \nelse {\n\tprintln(\"'\" + checkWord + \"' no est\u00e0 a la llista.\");\n} \n</code></pre> Activitat 523. Crea un conjunt amb els balos d'or usant un HashSet <p>Utilitza una col\u00b7lecci\u00f3 HashSet per crear un conjunt amb els guanyadors del bal\u00f3 d'or</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#linkedlist","title":"LinkedList","text":"<pre><code>// Crear un LinkedList per gestionar la cua\nLinkedList&lt;String&gt; customerQueue = new LinkedList&lt;&gt;();\n\n// Afegir clients a la cua\ncustomerQueue.add(\"Anna\");\ncustomerQueue.add(\"Joan\");\ncustomerQueue.add(\"Maria\");\ncustomerQueue.add(\"Pere\");\n\n// Mostrar la cua inicial\nprintln(\"Cua inicial de clients: \" + customerQueue);\n\n// Atendre el primer client (eliminar-lo de la cua)\nString servedCustomer = customerQueue.poll();\nprintln(\"Client at\u00e8s: \" + servedCustomer);\nprintln(\"Cua despr\u00e9s d'atendre un client: \" + customerQueue);\n\n// Afegir un nou client al final de la cua\ncustomerQueue.add(\"Carla\");\nprintln(\"Cua despr\u00e9s d'afegir Carla: \" + customerQueue);\n\n// Consultar el primer client sense eliminar-lo\nString nextCustomer = customerQueue.peek();\nprintln(\"El seg\u00fcent client a atendre \u00e9s: \" + nextCustomer);\n\n// Inserir un client d'urg\u00e8ncia al principi de la cua\ncustomerQueue.addFirst(\"Urgent - Miquel\");\nprintln(\"Cua despr\u00e9s d'afegir un client urgent: \" + customerQueue);\n\n// Eliminar l'\u00faltim client\ncustomerQueue.removeLast();\nprintln(\"Cua despr\u00e9s d'eliminar l'\u00faltim client: \" + customerQueue);\n</code></pre> Activitat 524. Crea una llista amb els companys de classe utilitzant una LinkedList <p>Utilitza una col\u00b7lecci\u00f3 LinkedList per crear un conjunt amb els noms dels teus companys de classe</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#iteradors","title":"Iteradors","text":"<p>Fins ara hem vist com crear algunes de les col\u00b7leccions que java posa a disposici\u00f3 dels programadors, per\u00f2 hi han molte m\u00e9s. Segurament tamb\u00e9, t'has estat preguntant com es poden rec\u00f3rres aquestes noves llistes element a element. Per tal de fer-ho de la forma m\u00e9s eficient, ho fariem amb iteradors. Mira el seg\u00fcent exemple:</p> <pre><code> // Crear una col\u00b7lecci\u00f3 (ArrayList en aquest cas)\nArrayList&lt;String&gt; names = new ArrayList&lt;&gt;();\nnames.add(\"Anna\");\nnames.add(\"Joan\");\nnames.add(\"Maria\");\n\n// Obtenir un iterador de la col\u00b7lecci\u00f3\nIterator&lt;String&gt; iterator = names.iterator();\n\n// Rec\u00f3rrer els elements amb l'iterador\nSystem.out.println(\"Recorregut dels elements:\");\nwhile (iterator.hasNext()) {\n\tString name = iterator.next();\n\tSystem.out.println(name);\n}\n</code></pre> Activitat 525. Llista d'espera de pacients <p>Crea una llista d'espera de pacients amb la col\u00b7lecci\u00f3 que trobes m\u00e9s adequada i crida als pacients un a un. Justifica la teua decisi\u00f3 al comentari de codi de l'aplicaci\u00f3.</p> Activitat 526.Recorre els balons d'or amb un iterador <p>Recorre el conjunt de guanyadors del bal\u00f3 d'or de l'activitat 523 i mostra'ls de forma amigable per pantalla. Canviaries el tipus de col\u00b7ecci\u00f3 en aquesta activitat per emmagatzemar els premiats? Quina escolliries? Per qu\u00e8? Quins avantatges i inconvenients tenen les altres col\u00b7eccions de java front a l'escollida per tu? Escriu totes les respostes al comentaris de documentaci\u00f3.</p> Activitat 527. Recorre la llista d'espera amb un iterador <p>Recorre la llista d'espera de clients de l'activitat 525 utilitzant un iterador. Canviaries la col\u00b7lecci\u00f3? Per qu\u00e8?</p> Activitat 528. Crea un conjunt ordenat amb TreeSet per crear una llista ordenada de noms. <p>Crea una llista ordenada de noms.</p> Activitat 529. Converteix el Projecte Alumnes i assignatures <p>Basant-nos en l'activitat 520 \"Alumnes i Assignatures\" utilitza el que hem vist de les distintes col\u00b7leccions que ens proporciona java per millorar el nostre codi.</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#string-cadenes-de-caracters","title":"String: Cadenes de caracters","text":"<p>En Java hem vist que quan volem emmagatzemar un valor enter, definim una variable de tipus int, si pel contrari, el que volem \u00e9s emmagatzemar un valor amb decimals, definim una variable de tipus double o float. Ara b\u00e9, si el que volem \u00e9s emmagatzemar una cadena de caracters, per exemple el nom d\u2019una persona, hem de definir un objecte de tipus String</p> <pre><code>// Crear un objecte string\nString strNom = \u00abManolo el del bombo\u00bb;\n</code></pre> <p>Aquest codi el que fa \u00e9s crear un objectes string strNom que cont\u00e9 el nom: \u00abManolo el del bombo\u00bb. Tamb\u00e9 podriem crear un string de la seg\u00fcent manera:</p> <pre><code>String strNome = new String(\u00abManolo el del bombo\u00bb);\n</code></pre> <p>Al tractar-se d\u2019una classe, la forma natural de treballar amb ella ser\u00e0 mitjan\u00e7ant l\u2019\u00fas dels m\u00e8todes que disposa la classe. Aquests m\u00e8todes s\u00f3n:</p> <ul> <li>int length(): retorna la llarg\u00e0ria de la cadena en un enter.</li> <li>char charAt (int i): ens diu quin caracter est\u00e0 a la posici\u00f3 \u2018i\u2019</li> <li>String substring(int i): ens retorna la subcadena que hi ha a partir de la posici\u00f3 \u2018i\u2019 fins el final de la cadena</li> <li>String substring(int i, int j): ens retorna la subcadena que es troba des de l\u2019\u00edndex i fins el j</li> <li>String concat(String str): concatena la cadena \u2018str\u2019 que es passa com a par\u00e0metre al final de la cadena. Per exemple:</li> </ul> <pre><code>      String s1 = \u00abJava\u00bb;\n      String s2 = \u00abPego\u00bb;\n      String s3 = s1.concat(s2); // El resultat seria \u00abJavaPego\u00bb\n</code></pre> <ul> <li>int indexOf(String s): Ens retorna l\u2019index dins de la cadena de la primera aparici\u00f3 de la subcadena s. Per exemple:</li> </ul> <pre><code>      String s1 = \u00abJava a Pego\u00bb;\n      int pos = s1.indexOf(\u00abPego\u00bb); // Retorna 7\n</code></pre> <ul> <li>int indexOf(String s, int i): retorna l\u2019\u00edndex dins de la cadena de la primera aparici\u00f3 de la subcadena s a partir de l\u2019\u00edndex i</li> <li>int lastIndexOf(int ch): torna l\u2019\u00edndex de l\u2019\u00faltima vegada que apareix el caracter \u2018ch\u2019 dins de la cadena.</li> <li>boolean equals(String str): Compara l\u2019string amb l\u2019objecte que es passa per par\u00e0metre.</li> <li>boolean equalsIgnoreCase (String otroString): Compara dues cadenes sense tenir en compte maj\u00fascules i min\u00fascules.</li> <li>int compareTo (String otroString): compara dues cadenes lexicogr\u00e0ficament. En altres paraules, diu quina \u00e9s major que l\u2019altra.</li> <li>int compareToIgnoreCase (String otroString): com el m\u00e8tode anterior per\u00f2 sense tenir en compte maj\u00fascules ni min\u00fascules.</li> <li>String toLowerCase(): converteix la cadena a min\u00fascules.</li> <li>String toUpperCase(): converteix la cadena a maj\u00fascules.</li> <li>String trim(): suprimeix els espais en blanc que puguen haver als extrems de la cadena</li> <li>String replace (char oldChar, char newChar): substitueix totes les ocurr\u00e8ncies de oldChar que hi ha a la cadena per newChar</li> </ul>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#expressions-regulars-en-java","title":"Expressions regulars en Java","text":"<p>Les expressions regulars s\u00f3n una forma de crear un plantilla que pot servir per:</p> <ul> <li>Comprovar si un text compleix un format determinat:     El NIF ha de tenir 8 d\u00edgits i una lletra.     Una matr\u00edcula de cotxe ha de tenir 4 d\u00edgits i 3 lletres.     Un n\u00famero de tel\u00e8fon ha de tenir 3 d\u00edgits, un punt, 3 d\u00edgits, un punt i 3 d\u00edgits.</li> <li>Buscar si existeix una subcadena (amb un format determinat) dins d'un text.</li> <li>Buscar i canviar una subcadena per una altra dins d'un text, nom\u00e9s una vegada o totes les que aparega.</li> </ul>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#caracters-especials","title":"Caracters especials","text":"<pre><code>[ ]: per especificar un conjunt de car\u00e0cters.\n( ): per agrupar.\n{ }: per indicar un nombre de repeticions.\n\\: per poder utilitzar car\u00e0cters especials, per representar car\u00e0cters especials o per conjunts de car\u00e0cters.\n^: t\u00e9 dos possibles significats:\n    indicar que la coincid\u00e8ncia ha d'estar al principi de la l\u00ednia.\n    si es posa com a primer car\u00e0cter dins de [ ], implica negaci\u00f3 ([^AEIOUaeiou] detectar\u00e0 qualsevol car\u00e0cter que no sigui una vocal).\n$: indica que la coincid\u00e8ncia ha d'estar al final de la l\u00ednia.\n|: per triar entre diferents possibilitats.\n?: indica que el car\u00e0cter o grup anterior pot apar\u00e8ixer una o cap vegada.\n+: indica que el car\u00e0cter o grup anterior ha d'apar\u00e8ixer una o m\u00e9s vegades.\n*: indica que el car\u00e0cter o grup anterior pot apar\u00e8ixer zero, una o m\u00e9s vegades.\n.: equival a qualsevol car\u00e0cter.\n\n\\t: representa un tabulador.\n\\n: representa un salt de l\u00ednia.\n\\s: representa qualsevol car\u00e0cter que sigui un separador. \u00c9s equivalent a [ \\t\\n\\x0B\\f\\r].\n\\S: representa qualsevol car\u00e0cter que no sigui un separador. \u00c9s equivalent a [^\\s].\n\\d: representa qualsevol car\u00e0cter que sigui un d\u00edgit. \u00c9s equivalent a [0-9].\n\\D: representa qualsevol car\u00e0cter que no sigui un d\u00edgit. \u00c9s equivalent a [^0-9].\n\\w: representa qualsevol car\u00e0cter que pot formar una paraula. \u00c9s equivalent a [a-zA-Z_0-9].\n\\W: representa qualsevol car\u00e0cter que no formi part d'una paraula. \u00c9s equivalent a [^\\w].\n</code></pre> <pre><code>\t// Codi java que serveix per validar un correu electr\u00f2nic\n\timport java.util.regex.Pattern;\n    String emailRegex = \"^[\\\\w.-]+@[\\\\w.-]+\\\\.[a-zA-Z]{2,}$\";\n    Pattern pattern = Pattern.compile(emailRegex);\n\n\t// Correus a validar\n\tString[] emails = {\n\t\t\"exemple@domini.com\",\n\t\t\"correu.incorrecte\",\n\t\t\"test123@gmail.net\",\n\t\t\"a@b.c\",\n\t\t\"incorrect@domini\"\n\t};\n\n\t// Validaci\u00f3 dels correus\n\tfor (String email : emails) {\n\t\tif (pattern.matcher(email).matches()) {\n\t\t\tprintln(email + \" \u00e9s v\u00e0lid.\");\n\t\t} \n\t\telse {\n\t\t\tprintln(email + \" no \u00e9s v\u00e0lid.\");\n\t\t}\n\t}\n</code></pre> Activitat 530. Expressions regulars en java <p>Escriu el codi necessari per tal validar adreces de p\u00e0gines web.</p>"},{"location":"Tema%2055.%20Tipus%20Compostos%20de%20Dades/#enumeracions","title":"Enumeracions","text":"<p>Una enumeraci\u00f3 \u00e9s un tipus especial de \u2018classe\u2019 que representa un grup de constants. Cada element d\u2019aquesta estructura est\u00e0 associada a un valor de un tipus de dades concret (normalment enter) on el primer element de l\u2019enumeraci\u00f3 sol agafar el valor 0</p> <pre><code>// Exemple 1. Dies de la setmana\nenum Dies {\n\tDilluns,\n\tDimarts,\n\tDimecres,\n\tDijous,\n\tDivendres,\n\tDissabte,\n\tDiumenge\n}\n\n// Exemple 2. Talles de roba\nenum Talles {\n\tXXL,\n\tXL,\n\tL,\n\tM,\n\tS,\n\tXS\n}\n</code></pre> Com usar una enumeraci\u00f3 <pre><code>\tenum Colors {\n  \t\tRED,\n  \t\tBLUE,\n  \t\tYELLOW,\n  \t\tGREEN\n\t}\n\n\tColors myColor = Colors.YELLOW;\n\n\tswitch(myColor) {\n\t\tcase RED:\n\t\t\tSystem.out.println(\"The color is red\");\n\t\tbreak;\n\n\t\tcase BLUE:\n\t\t\tSystem.out.println(\"The color is blue\");\n\t\tbreak;\n\n\t\tcase YELLOW:\n\t\t\tSystem.out.println(\"The color is yellow\");\n\t\tbreak;\n\n\t\tcase GREEN:\n\t\t\tSystem.out.println(\"The color is green\");\n\t\tbreak;\n\t}\n</code></pre>"},{"location":"Tema%2077.%20Her%C3%A8ncia%2C%20polimorfisme%20i%20interf%C3%ADcies/","title":"Tema 7. Her\u00e8ncia, polimorfisme i interf\u00edcies","text":""},{"location":"Tema%2077.%20Her%C3%A8ncia%2C%20polimorfisme%20i%20interf%C3%ADcies/#introduccio","title":"Introducci\u00f3","text":"<p>Un dels mecanismes m\u00e9s potents que incorpora el paradigma de programaci\u00f3 orientada a objectes s\u00f3n l\u2019her\u00e8ncia i el polimorfisme. </p> <p>El primer ens permet crear una jerarquia de classes relacionades entre s\u00ed de tal forma que la quantitat de codi, especialment el codi redundant, es redueix significativament. </p> <p>El segon permet redefinir m\u00e8todes de tal forma que realitzen funcions diferents depenent del context en el qual es troben. En altres paraules, el polimorfisme \u00e9s el mecanisme de la programaci\u00f3 orientada a objectes que permet que una funci\u00f3 amb el mateix nom realitze tasques diferents depenent de l\u2019objecte des del qual es fa refer\u00e8ncia. </p> <p>Finalment tamb\u00e9 veurem com a les interf\u00edcies podrem especificar les operacions que haurien de definir-se a les classes que la implementen. Una interf\u00edcie \u00e9s un mitj\u00e0 per a que els objectes no relacionats es comuniquen entres s\u00ed. Aquestes s\u00f3n les definicions de m\u00e8todes i valors sobre els quals els objectes estan d\u2019acord per cooperar.</p>"},{"location":"Tema%2077.%20Her%C3%A8ncia%2C%20polimorfisme%20i%20interf%C3%ADcies/#herencia","title":"Her\u00e8ncia","text":"<p>En programaci\u00f3 orientada a objectes l\u2019her\u00e8ncia \u00e9s un mecanisme que permet potenciar la reutilitzaci\u00f3 i l\u2019extensibilitat en el desenvolupament de programari a banda de reduir la quantitat de codi redundant. Aquest mecanisme permet crear noves classes a partir d\u2019una classe o jerarquia de classes preexistent (ja comprovades i verificades) evitant d\u2019aquesta forma el redisseny, la modificaci\u00f3 i verificaci\u00f3 de la part ja implementada. L\u2019her\u00e8ncia facilita la creaci\u00f3 d\u2019objectes a partir d\u2019altres ja existents i implica que una subclasse obt\u00e9 tot el comportament (m\u00e8todes) i finalment els atributs (variables) de la seua superclasse.</p> <p>Suposem el cas en el que disposem de dues classes (amb menys classes resultaria impossible l\u2019her\u00e8ncia), una s\u2019anomenar\u00e0: classe base, superclasse o classe pare; mentre que l\u2019altra ser\u00e0 la classe derivada, subclasse o classe filla.</p> <p>Seguint amb l'exemple del tema anterior del Volcano (Descarrega'l ac\u00ed), els nostres piroclasts tenen tots les mateixes caracter\u00edstiques (aparen\u00e7a) i tots tenen el mateix comportament conforme l'hem dissenyada fins ara. Si apliquem els conceptes d'her\u00e8ncia i polimorfisme al nostre projecte el canvi pot ser significatiu.</p> <p>Basant-nos en el projecte del volc\u00e0 del tema anterior per\u00f2 aplicant algunes modificacions de classes i amb el que varem explicar al tema anterior sobre her\u00e8ncia on haviem dissenyat una s\u00e8rie de classes derivades de Piroclast com es podreu observar al seg\u00fcent esquema:</p> <p>Canvis Projecte Volcano</p> <p>La classe Con es converteix en la classe Crater La classe Cendra ara \u00e9s la classe Fum</p> <p> \tclassDiagram          Crater \"1\" --&gt; \"*\" Piroclast  \t\tPiroclast &lt;|-- Fum \t\tPiroclast &lt;|-- Lava \t\tPiroclast &lt;|-- Roca  </p> <p>Ara tenim una superclasse Piroclast amb les subclasses associades Fum, Lava i Roca. Tots tres s\u00f3n Piroclasts, \u00e9s a dir, tots tenen: posici\u00f3, direcci\u00f3, velocitat, color inicial, color final, temps de vida i grandaria a banda d'altres atributs que anirem veient i, a m\u00e9s a m\u00e9s, a tots els afecten les lleis de la f\u00edsica, per\u00f2 cadascuna de les subclasses tenen certes peculiaritats:</p> <ul> <li>El fum sol anar sempre cap amunt es dissipa amb facilitat i es sol veure afectat per la direcci\u00f3 en la que va el vent.</li> <li>La lava pot ser des de liquida fins quasi s\u00f2lida, els colors varien mentre cau i al final s'esclafa en terra.</li> <li>Les roques a banda de ser s\u00f2lides, poden adoptar moltes formes diferents i quan cauen reboten.</li> </ul> <p>La classe base en una jerarquia d\u2019her\u00e8ncia \u00e9s la classe que cont\u00e9 els atributs i m\u00e8todes comuns a totes les classes derivades i \u00e9s per aix\u00f2 que s\u2019evita la redund\u00e0ncia del codi que es produiria si hagu\u00e9rem de repetir codi com\u00fa a cadascuna de les subclasses, per tant, es podria deduir que una classe derivada \u00e9s de facto una ampliaci\u00f3 de les funcionalitats de la classe base ja que contindr\u00e0 tant els membres de la classe base com els que s'afegeixen de m\u00e9s a la classe derivada.</p>"},{"location":"Tema%2077.%20Her%C3%A8ncia%2C%20polimorfisme%20i%20interf%C3%ADcies/#declaracio-duna-classe-derivada","title":"Declaraci\u00f3 d'una classe derivada","text":"<p>Per tal de declarar que una classe hereta d\u2019una altra, Java utilitza la paraula reservada extends. Si ens basem en el diagrama de classes anteriors, el codi quedaria de la seg\u00fcent forma:</p> <pre><code>public class Piroclast {\n    // Codi de la classe Piroclast\n}\n\npublic class Fum extends Piroclast {\n    // Codi de la classe Fum\n}\n\npublic class Lava extends Piroclast {\n    // Codi de la classe Lava\n}\n\npublic class Roca extends Piroclast {\n    // Codi de la classe Roca\n}\n</code></pre> <p>Respecte de la visibilitat dels membre de la superclasse, les subclasses tindran acc\u00e9s als membres, siguen atributs o m\u00e8todes, public o protected mentre que no heretaran els membres privats de la classe pare. </p>"},{"location":"Tema%2077.%20Her%C3%A8ncia%2C%20polimorfisme%20i%20interf%C3%ADcies/#disseny-de-subclasses","title":"Disseny de subclasses","text":"<p>Dissenyar \u00e9s adaptar la realitat que es vol representar a un model concret, en el nostre cas els diagrames de classes d\u2019UML. \u00c9s en aquest pas en el que s\u2019han de prendre les decisions que poden condicionar el resultat final de la nostra aplicaci\u00f3 i no sempre \u00e9s f\u00e0cil determinar quines s\u00f3n les relacions que s\u2019han d\u2019establir.  \u00c9s per aix\u00f2 que cal tenir en ment sempre la seg\u00fcent m\u00e0xima: </p> <p>Principi de programaci\u00f3</p> <p>\u00abLa jerarquia de classes m\u00e9s eficient i efectiva \u00e9s aquella que minimitza el codi al redundant al m\u00e0xim i simplifica el codi\u00bb \u00ab\u00c9s molt habitual una vegada finalitzat el projecte \"refactoritzar\" i modificar atributs i m\u00e8todes comuns\u00bb</p> <p>Al utilitzar el mecanisme de l\u2019her\u00e8ncia en programaci\u00f3 orientada a objectes hem d\u2019intentar sempre tindre un m\u00e0xim de membres a la superclasse i despr\u00e9s a les diferents subclasses nom\u00e9s aquells membres o atributs que fan de discriminador, \u00e9s a dir, que diferencien la classe especialitzada (o subclasse) de la classe superior.</p> <p>A la nostra classe Piroclast ens interessa saber com ja haviem fet al tema anterior: la posici\u00f3, la direcci\u00f3, velocitat, color inicial, color final i grand\u00e0ria. Mentre que de les subclasses seria interessant saber del fum la seua densitat i com li afecta el vent, de la lava volem saber un color inicial i final que ens simule com va canviant de temperatura, mentre que de la roca ens interessa la forma que t\u00e9 i que pot rebotar.</p> <p> \tclassDiagram  \t\tdirection LR         Crater: #ample         Crater: #alt         Crater: #color         Crater: #posicio         Crater: + Crater(int, int)         Crater: + display()         Crater: + update()         Crater: + run()         Crater: + createPiroclast()         Crater: - mostraPiroclasts()         Crater: - actualitzaPiroclasts()         Crater: - comprovaMorts()         Crater \"1\" --&gt; \"*\" Piroclast          Piroclast: # velocitat         Piroclast: # grandaria         Piroclast: # lifeSpan         Piroclast: # colorInicial         Piroclast: # colorActual         Piroclast: # colorFinal         Piroclast: # posicio         Piroclast: # direccio         Piroclast: # alturaTerra          Piroclast: + Piroclast (PVector, int, color, color)         Piroclast: + display()         Piroclast: + update()         Piroclast: + quedaVida()          Piroclast: + estaTocantTerra()         Piroclast: + estaParada()                    Fum: - dissipacio         Fum: - expansio         Fum: + display()         Fum: + update()          Lava: - percentColor         Lava: + display()         Lava: + update()          Roca: - percentColor         Roca: - angleDeGir         Roca: - velAngular         Roca: - sentitRellotge          Roca: + display()         Roca: + update()         Roca: - rebota()         Roca: - calculaAngleGir()         Roca: - actualitzaColor()  \t\tPiroclast &lt;|-- Fum \t\tPiroclast &lt;|-- Lava \t\tPiroclast &lt;|-- Roca  </p> Activitat 701. El joc dels escacs <p>Fes un diagrama de classes per al joc dels escacs utilitzant els mecanismes d'her\u00e8ncia com hem vist amb l'exemple del Volcano.</p> <p> </p> <p>Basant-nos en la imatge anterior, podriem fer un dissenya amb un tauler de joc una classe base fitxa que aglutine tots els atributs i m\u00e8todes comuns i despr\u00e9s per cada una de les fitxes diferents: torre, cavall, \u00e0lfil, pe\u00f3, torre, rei i reina es podrien crear classes derivades on especificariem les difer\u00e8ncies en aparen\u00e7a, cada fitxa t\u00e9 una forma, i en comportament, cada fitxa es mou d'una forma diferent.</p>"},{"location":"Tema%2077.%20Her%C3%A8ncia%2C%20polimorfisme%20i%20interf%C3%ADcies/#herencia-publica","title":"Her\u00e8ncia p\u00fablica","text":"<p>En Java tenim la possibilitat de fer protected (#) private (-) public (+) i package (~) ens determina la visibilitat dels membres d\u2019una classe. Java considera que l\u2019her\u00e8ncia \u00e9s sempre p\u00fablica i que la classe derivada tindr\u00e0 per tant acc\u00e9s als membres protected i public de la classe pare per\u00f2 no als membres privats. El fet de poder tindre elements privats a la nostra classe base seria per poder ocultar informaci\u00f3 a les classes derivades.</p> <p>Fixa't que ac\u00ed els atributs de la classe pare o superclasse ja no usen el modificador de visibilitat private sino protected. Si no les subclasses no podrien heretar els atributs de la classe pare.</p> <p>Traduint el diagrama de classes anterior i aplicant els modificadors de visibilitat adequats, el codi podria quedar de la seg\u00fcent forma:</p> PiroclastFumLavaRoca <pre><code>public class Piroclast {\n    protected int     velocitat;     /** Magnitud en metres per segon                                  */\n    protected int     grandaria;     /** Grandaria del piroclast en p\u00edxels                             */\n    protected int     lifeSpan;      /** Temps de vida que li queda en frames                          */\n    protected color   colorInicial;  /** Color base o inicial del piroclast                            */\n    protected color   colorActual;   /** Color amb el que el piroclast est\u00e0 pintat                     */\n    protected color   colorFinal;    /** Color al qual va el piroclast conforme es gela                */\n    protected PVector posicio;       /** Vector de posici\u00f3 del piroclast                               */\n    protected PVector direccio;      /** Vector de direcci\u00f3 (en realitat velocitat vectorial)          */\n    protected float   alturaTerra;   /** Punt de l'eix de les y on ha de tocar terra la roca i rebotar */\n\n    public Piroclast (PVector v, int i, color c1, color c2) {}\n    public void update () {}\n    public void display () {}\n    public boolean quedaVida () \n    public boolean estaTocantTerra () \n    public boolean estaParada () \n}\n</code></pre> <pre><code>public class Fum extends Piroclast {\n    private float dissipacio;\n    private float expansio;\n    \n    public Fum (PVector posCrater) { }\n    public void display () {}\n    public void update  () {}\n}\n</code></pre> <pre><code>public class Lava extends Piroclast {\n    private float percentColor;\n\n    public Lava (PVector posCrater) { }\n    public void display () {}\n    public void update () {}\n}\n</code></pre> <pre><code>public class Roca extends Piroclast {\n    private float percentColor;\n    private float angleGir;\n    private float velAngular;\n    private boolean sentitRellotge;\n\n    public Roca (PVector posCrater) { }\n    public void display () {}\n    public void update () {}\n    private void rebota() {}\n    private void calculaAngleGir () {}\n    private void actualitzaColor () {}\n}\n</code></pre> <p>Del codi anterior es pot extreure la seg\u00fcent informaci\u00f3:</p> <pre><code>- Totes les subclasses tindran acc\u00e9s, encara que al codi no estiga als atributs de la superclasse.\n- Totes les subclasses quan criden als m\u00e8todes display i update, executaran el codi que hi ha a la superclasse sempre que no es s\u2019indique el contrari (sobrec\u00e0rrega o sobreescriptura).\n- La lava no rebota mentre que la roca s\u00ed.\n- El fum vola cap amunt\n</code></pre> <p>Per poder acoblar el nostre volc\u00e0 al nou sistema de part\u00edcules (fum, lava i roques) haurem de fer alguns canvis. El primer \u00e9s conceptual, a partir d'ara el nostre Crater contindr\u00e0 un conjunt de roques, laves i part\u00edcules de fum. El segon \u00e9s que ara cada vegada que s'afegisca un nou piroclast al con per expulsat, aquest podr\u00e0 ser una de les tres opcions anteriors, per\u00f2 com decidim el tipus? Doncs els frames parells crearem lava mentre que als cicles senars crearem roques, el fum es genera a tots els frames.</p> Activitat 702. Visibilitat <p>Revisa i comprova que has posat de forma correcta els modificadors de visibilitat al teu projecte. Recorda que a les classes base o pare normalment es posen com a protected els elements susceptibles de ser heretats per les classes derivades.</p>"},{"location":"Tema%2077.%20Her%C3%A8ncia%2C%20polimorfisme%20i%20interf%C3%ADcies/#constructors-en-herencia","title":"Constructors en her\u00e8ncia","text":"<p>De la mateixa manera que s\u2019hereten m\u00e8todes i atributs tamb\u00e9 s\u2019hereten els constructors de la classe. D\u2019aquesta forma si declarem un objecte d\u2019una classe derivada, primer s\u2019executa el constructor de la classe base i a continuaci\u00f3 s\u2019executa la part de codi de la classe derivada.</p> <p>Si executes el codi anterior veur\u00e0s que dona un error d'execuci\u00f3 i no funciona per\u00f2, qu\u00e8 est\u00e0 passant realment? Si feu una tra\u00e7a al codi veureu que el problema est\u00e0 quan s'intenten dibuixar com que no hem inicialitzat els valors de posici\u00f3 etc a les classes derivades, el programa para d'executar-se. I aix\u00f2 \u00e9s perqu\u00e8 quan creem una nova inst\u00e0ncia de roca per exemple, aquesta crida al constructor de la classe Piroclast sense par\u00e0metres i no assigna valors inicials. Si volem que cride al constructor de la superclasse parametritzat, afegiriem el seg\u00fcent codi al constructor per defecte de les subclasses:</p> <pre><code>super (new PVector (320,135), 15, color(255,0,0));\n</code></pre> <p>El que fem amb el codi anterior i la crida a super \u00e9s cridar al constructor de la classe pare passant-li els par\u00e0metres que demana per tal d'inicialitzar els diferents piroclasts de forma correcta.</p> <p>Per tal de distingir les diferents subclasses, els assignarem diferents colors a les diferents subclasses.</p> <p> </p> <p>A m\u00e9s a m\u00e9s, super() tamb\u00e9 ens permet cridar a m\u00e8todes de la classe pare de la seg\u00fcent forma:</p> <pre><code>super.metode(arguments);\n</code></pre> <p>Mira el seg\u00fcent exemple, passa'l a Processing IDE i comprova que \u00e9s el que est\u00e0 passant. Seria interessant que abans d'executar el codi per comprovar el que est\u00e0 passant, t'escrigueres el que trobes que va a passar.</p> Constructors en her\u00e8ncia MainB1B2DHDh <pre><code>void draw () {\n    D d1 = new D();\n    println(\"_______________________\\n\");\n    Dh d2 = new Dh();\n}    \n</code></pre> <pre><code>public class B1 {\n    public B1 () {\n        println(\"Constructor B1\");\n    }\n}\n</code></pre> <pre><code>public class B2 {\n    public B2 () {\n        println(\"Constructor B2\");\n    }\n}\n</code></pre> <pre><code>public class D extends B1 {\n    public D () {\n        println(\"Constructor D\");\n    }\n}   \n</code></pre> <pre><code>public class H extends B2{\n    public H () {\n        println(\"Constructor H\");\n    }\n}   \n</code></pre> <pre><code>public class Dh extends H {\n    public Dh () {\n        println(\"Constructor Dh\");\n    }\n}   \n</code></pre> <p>Finalment cal dir que el constructor d'una classe base (superclasse) pot executar una part del codi que \u00e9s com\u00fa a totes les subclasses i la resta del codi necessari per a la construcci\u00f3 d'una subclasse ho pot fer la classe derivada.</p> <p>Per\u00f2 vegem com afecta el que acabem d'explicar al nostre projecte Volcano. Una vegada afegides les modificacions el projecte podria quedar com mostra el seg\u00fcent codi. Fixa't especialment en la modificaci\u00f3 de codi que s'ha fet al m\u00e8tode creaPiroclast de la classe Crater que \u00e9s la que va afegint els piroclasts a l'arrayList:</p> MainPiroclastCraterFumLavaRoca <pre><code>    final static int INTERVAL = 10;\n    Crater vesuvi;\n    \n    void setup () {\n        size (640, 480);\n        vesuvi = new Crater(320, 135);\n        Fisiques2D.vent = new PVector (random(-0.05, 0.05), random(-0.01, 0.01));\n    }\n    void draw () {\n        clear ();\n        background (255);\n\n        if (haPassatInterval()) \n            vesuvi.creaPiroclast ();\n\n        vesuvi.display ();\n        vesuvi.run     ();        \n    }\n\n    boolean haPassatInterval () {\n        return (frameCount - INTERVAL*vesuvi.getTotalPiroclasts()) &gt;= INTERVAL;\n    }\n</code></pre> <pre><code>    \n    public class Piroclast {\n        protected int     velocitat;     /** Magnitud en metres per segon                                  */\n        protected int     grandaria;     /** Grandaria del piroclast en p\u00edxels                             */\n        protected int     lifeSpan;      /** Temps de vida que li queda en frames                          */\n        protected color   colorInicial;  /** Color base o inicial del piroclast                            */\n        protected color   colorActual;   /** Color amb el que el piroclast est\u00e0 pintat                     */\n        protected color   colorFinal;    /** Color al qual va el piroclast conforme es gela                */\n        protected PVector posicio;       /** Vector de posici\u00f3 del piroclast                               */\n        protected PVector direccio;      /** Vector de direcci\u00f3 (en realitat velocitat vectorial)          */\n        protected float   alturaTerra;   /** Punt de l'eix de les y on ha de tocar terra la roca i rebotar */\n    \n        public Piroclast (PVector pos, int tam, color colIni, color colFin) {\n            this.grandaria    = tam;\n            this.colorInicial = colIni;\n            this.colorActual  = colIni;\n            this.colorFinal   = colFin;\n            this.lifeSpan     = 255;\n            this.posicio      = pos.copy();\n            this.velocitat    = (int) random(1,3);\n            this.alturaTerra  = random (210, 280);     // Inicialitzem el punt y on es simulara que el piroclast xocar\u00e0\n            this.direccio     = new PVector (random(-1, 1), random(-2, 0));\n            this.direccio.mult (this.velocitat);\n        }\n    \n        public void    display () {\n\n        }       \n        public void    update  () {\n            \n        }       \n    \n        public boolean quedaVida () {\n            return this.lifeSpan &gt;= 0;\n        }\n    \n        public boolean estaTocantTerra () {\n            if (posicio.y &gt;= alturaTerra) {\n            posicio.y = alturaTerra;\n            return true;\n            }\n            else\n            return false;\n        }\n    \n        public boolean estaParada () {\n            return ((int)posicio.y &gt;= (int)alturaTerra &amp;&amp; direccio.mag() &lt;= 0.1);\n        }\n    }    \n</code></pre> <pre><code>    public class Crater {\n        private int       ample;                      // Base del volc\u00e0 en p\u00edxels\n        private int       alt;                        // Alt del volc\u00e0 en p\u00edxels\n        private color     col;                        // Color del volc\u00e0\n        public PVector   posicio;                    // Posici\u00f3 en la que es troba el volc\u00e0 que tamb\u00e9 posiciona el cr\u00e0ter\n        public ArrayList &lt;Piroclast&gt; alPiroclasts;   // Col\u00b7lecci\u00f3 de piroclasts que el volc\u00e0 va expulsant\n        \n        public Crater (int x, int y) {\n            this.ample   = 100;\n            this.alt     = 60;\n            this.posicio = new PVector (x, y);\n            this.col     = color(70, 70, 70);\n            this.alPiroclasts = new ArrayList&lt;Piroclast&gt; ();  // Inicialitzem el conjunt de piroclasts a punt de ser expulsats.\n        }\n        \n        public void display () {\n            fill     (70);\n            stroke   (0);\n            rectMode (CENTER);\n            triangle (posicio.x, posicio.y, posicio.x-(ample/2), posicio.y+alt, posicio.x+(ample/2), posicio.y+alt);\n        }\n        \n        public void run () {\n            mostraPiroclasts     ();\n            actualitzaPiroclasts ();\n            comprovaMorts        ();\n        }\n        \n        public void creaPiroclast () {\n            Fum f = new Fum(this.posicio);\n            alPiroclasts.add(f);\n            \n            if (frameCount % 2 == 0) {\n                Lava l = new Lava (this.posicio);\n                alPiroclasts.add(l);\n            }\n            else {\n                Roca r = new Roca (this.posicio);\n                alPiroclasts.add(r);\n            }\n            \n            Fum f2 = new Fum (this.posicio);\n            alPiroclasts.add (f2);\n        }\n        \n        private void mostraPiroclasts () {\n            for (Piroclast piro : this.alPiroclasts)\n            piro.display();\n        }\n        \n        private void actualitzaPiroclasts () {\n            for (Piroclast piro : this.alPiroclasts) \n            piro.update(); \n        }\n        \n        private void comprovaMorts () {\n            for (int i=0; i &lt; this.alPiroclasts.size(); i ++) {\n            Piroclast piro = this.alPiroclasts.get(i);\n            if (piro != null &amp;&amp; !piro.quedaVida())   // Esborrem els que ja se'ls haja acabada la vida (lifeSpan) \n                this.alPiroclasts.remove(piro);\n            }\n        }\n        \n        public int getTotalPiroclasts () {\n            return this.alPiroclasts.size();\n        }\n    }\n</code></pre> <pre><code>    public class Fum extends Piroclast {\n        private int dissipacio;  // Valor que determina la velocitat (p\u00edxels) a la que es dissipa el fum\n        private int expansio;   // Valor que determina la velocitat (p\u00edxels) amb la que s'expandeix el fum\n        \n        public Fum (PVector posCrater) {\n            super (posCrater, (int)random(10,20), color(170,170,170), color(255,255,255));\n            this.velocitat = (int)random(0,1);\n            this.direccio  = new PVector (random(-0.3, 0.3), random(-1, -0.1));\n            this.dissipacio = (int)random(1,3);\n            this.expansio  = (int)random(0,2);\n            this.lifeSpan  = 190;\n        }\n        \n        public void display () {\n            color pinta = color(colorInicial, lifeSpan);\n            noStroke();\n            fill (pinta);\n            circle (posicio.x, posicio.y, grandaria);\n        }\n        \n        public void update () {\n            this.direccio.add (Fisiques2D.vent);\n            this.posicio.add (direccio);\n            \n            if (frameCount % 2 == 0)\n            this.grandaria += expansio;\n            \n            this.lifeSpan -= dissipacio;\n        }\n    }\n</code></pre> <pre><code>    public class Lava extends Piroclast {\n        private float   percentColor;   // Percentatge de modulaci\u00f3 del color inicial al final\n        \n        public Lava (PVector posCrater) {\n            super (posCrater, (int)random(5,18), color(255,0,0), color(100,0,0));\n        }\n        \n        public void display () {\n            noStroke();\n            if (!estaTocantTerra()) {\n            fill(colorActual);\n            circle(posicio.x, posicio.y, grandaria);\n            }\n            else {\n            lifeSpan --;\n            fill (colorActual, lifeSpan);\n            ellipse(posicio.x, posicio.y, grandaria, 2*grandaria/3);\n            }\n        }\n        \n        public void update () {\n            if (estaTocantTerra()) \n            return;\n            \n            if (percentColor &lt; 1)\n            percentColor += 0.003;\n            \n            colorActual = lerpColor(colorInicial, colorFinal, percentColor);\n            \n            PVector friccioAire = direccio.copy().mult(Fisiques2D.friccioAire);\n            direccio.add (friccioAire);\n            direccio.add (Fisiques2D.gravetat);\n            posicio.add (direccio);\n        }\n    }\n</code></pre> <pre><code>    public class Roca extends Piroclast {\n        private float   percentColor;   // Percentatge de modulaci\u00f3 del color inicial al final\n        private float   angleDeGir;     // Angle necessari per poder simular la rotaci\u00f3 sobre l'eix Z\n        private float   velAngular;     // Velocitat angular a la que est\u00e0 rodant la roca\n        private boolean sentitRellotge; // Sentit de gir: true significa en sentit de les agulles del rellotge\n        \n        public Roca (PVector posCrater) {\n            super (posCrater, (int)random(5,15), color(175,175,175), color(0,0,0));\n            velAngular  = random (0.1, 0.20);    // Inicialitzem la velocitat angular (girat\u00f2ria) de la roca de forma aleat\u00f2ria.\n        }\n        \n        public void display ( ) {\n            stroke(0);\n            \n            calculaAngleGir ();\n            \n            if (!estaParada()) {\n            pushMatrix();\n                translate(posicio.x, posicio.y);\n                rotate(angleDeGir);\n                fill (colorActual);\n                rect (0, 0, grandaria, grandaria);\n            popMatrix();\n            }\n            else {\n            noStroke();\n            lifeSpan -= 2;\n            fill (colorActual, lifeSpan);\n            rect(posicio.x, posicio.y, grandaria, grandaria);\n            }\n        }\n        \n        public void update () { \n            if (!estaParada()) {\n            PVector friccioAire = direccio.copy().mult(Fisiques2D.friccioAire);\n            direccio.add (friccioAire);\n            direccio.add (Fisiques2D.gravetat);\n            posicio.add  (direccio);\n            \n            if (estaTocantTerra()) \n                rebota();   \n            \n            actualitzaColor (); \n            }\n        }\n        \n        private void rebota() {\n            direccio.mult(-0.5);\n            velAngular *= 0.5;\n            sentitRellotge = !sentitRellotge;  \n        }\n        \n        private void calculaAngleGir () {\n            if (sentitRellotge)\n                angleDeGir += velAngular;\n            \n            else\n                angleDeGir -= velAngular;\n            \n            if(angleDeGir &gt; TWO_PI) { \n                angleDeGir = 0.0; \n            }\n        }\n        \n        private void actualitzaColor () {\n            if (percentColor &lt; 1)\n                percentColor += 0.01;\n            \n            colorActual = lerpColor(colorInicial, colorFinal, percentColor);\n        }\n    }\n</code></pre> Activitat 703. Constructors de classe <p>Implementa els constructors de les classes que has dissenyat per al teu projecte dels Escacs. Recorda que almenys vas a tindre un constructor per cada una de les classes. Tamb\u00e9 has de tindre en compte el que hem vist sobre l'her\u00e8ncia de constructors, de com es pot cridar als constructors de la classe pare, on s'executa tot el codi com\u00fa a les classes derivades i despr\u00e9s ja s'executaria el codi propi i espec\u00edfic de les classes derivades.</p>"},{"location":"Tema%2077.%20Her%C3%A8ncia%2C%20polimorfisme%20i%20interf%C3%ADcies/#sobrecarrega-i-sobreescriptura-de-metodes","title":"Sobrec\u00e0rrega i sobreescriptura de m\u00e8todes","text":"<p>La sobrec\u00e0rrega de m\u00e8todes \u00e9s la creaci\u00f3 de diversos m\u00e8todes amb el mateix nom per\u00f2 amb diferent llista de tipus de par\u00e0metres o de funcionalitat. Java diferencia entre els m\u00e8todes sobrecarregats en base al n\u00famero i tipus de par\u00e0metres o arguments que t\u00e9 el m\u00e8tode i no pel tipus que retorna.</p> <p>D'aquesta forma una classe derivada pot redefinir un m\u00e8tode de la classe base amb el mateix nom per\u00f2 una llista diferent d\u2019arguments </p> <p>Un exemple de sobrec\u00e0rrega al codi del nostre projecte de volc\u00e0 \u00e9s quan definim diversos constructors per a una mateixa classe. Tenen el mateix identificador per\u00f2 el nombre de par\u00e0metres canvia d'un a l'altre.</p> <p>Si pel contrari tenim un mateix m\u00e8tode amb el mateix nom i la mateixa signatura (els mateixos par\u00e0metres) el que estem fent es sobreescriure (override) i no sobrecarregar (overloading) que b\u00e0sicament consisteix en canviar la signatura (els par\u00e0metres). Imagina que la nostra subclasse fum en el seu m\u00e8tode update fa el mateix que la resta de piroclasts per\u00f2 a banda va augmentant el seu diametre. Estariem en un cas de sobreescriptura de m\u00e8todes a la classe derivada i el codi quedaria aix\u00ed:</p> <pre><code>    @Override\n    public void update () {\n      super.update();\n      this.grandaria ++;\n    }\n</code></pre>"},{"location":"Tema%2077.%20Her%C3%A8ncia%2C%20polimorfisme%20i%20interf%C3%ADcies/#conversio-entre-subclasse-i-superclasse","title":"Conversi\u00f3 entre subclasse i superclasse","text":"<p>De vegades en programaci\u00f3 hem de poder convertir entre tipus de dades, aquest mecanisme s\u2019anomena tamb\u00e9 \u00abcast\u00bb. Per exemple si tenim un double amb valor 6,8 i volem convertir-lo en un moment determinat de la nostra aplicaci\u00f3 a un int, ho fariem de la seg\u00fcent forma:</p> <pre><code>double d = 6,8;\nint i = (int)d;\n</code></pre> <p>Entre objectes tamb\u00e9 existeix la possibilitat de aplicar aquest mecanisme. Al nostre model de piroclasts, ens podr\u00edem trobar amb la seg\u00fcent situaci\u00f3:</p> <pre><code>Piroclast piro = new Piroclast ();\nFum fum = new Fum ();\nRoca roca = new Roca ();\n\npiro = fum;   // Conversi\u00f3 autom\u00e0tica\npiro = roca;  // Conversi\u00f3 autom\u00e0tica\n</code></pre>"},{"location":"Tema%2077.%20Her%C3%A8ncia%2C%20polimorfisme%20i%20interf%C3%ADcies/#classes-no-derivables-atribut-final","title":"Classes no derivables: atribut final","text":"<p>Si volem que alguna classe en concret no siga ja m\u00e9s derivable, \u00e9s a dir, que no volem que es creen m\u00e9s subclasses a partir d\u2019una classe concreta, ho indiquem utilitzant la paraula reservada \u00abfinal\u00bb</p> <pre><code>public final class Fum extends Piroclast {\n    public Fum () {\n\n    } \n}\n</code></pre>"},{"location":"Tema%2077.%20Her%C3%A8ncia%2C%20polimorfisme%20i%20interf%C3%ADcies/#polimorfisme","title":"Polimorfisme","text":"<p>El polimorfisme (del Grec \u03c0\u03bf\u03bb\u03cd\u03c2, polys, \"molt, molts\" i \u03bc\u03bf\u03c1\u03c6\u03ae, morph\u0113, \"forma, figura\") \u00e9s una caracter\u00edstica d'alguns llenguatges de programaci\u00f3 que tenen la propietat d'enviar missatges sint\u00e0cticament iguals als objectes de diferents tipus. L'\u00fanic requisit que han de complir els objectes que s'utilitzen de manera polim\u00f2rfica \u00e9s saber respondre al missatge que se'ls hi envia, en altres paraules, les classes han de tindre implementats els m\u00e8todes amb els que se'ls envia el missatge.</p> <p>El polimorfisme permet fer refer\u00e8ncia a altres objectes de classes mitjan\u00e7ant el mateix element de programa i realitzar la mateixa operaci\u00f3 de diferents maneres d\u2019acord amb l\u2019objectes al qual es fa refer\u00e8ncia en cada moment.</p>"},{"location":"Tema%2077.%20Her%C3%A8ncia%2C%20polimorfisme%20i%20interf%C3%ADcies/#lligadura","title":"Lligadura","text":"<p>El terme lligadura es correspon a l\u2019enlla\u00e7 que es produeix entre un objecte o inst\u00e0ncia d\u2019una classe i les seues propietats. Si aquestes propietats s\u00f3n atributs, la lligadura \u00e9s refereix a la connexi\u00f3 entre l\u2019atribut i la refer\u00e8ncia a mem\u00f2ria on es trobaria el valor de l\u2019atribut en q\u00fcesti\u00f3 mentre que si estem parlant de m\u00e8todes, la lligadura \u00e9s refereix a la connexi\u00f3 entre el nom del m\u00e8tode que es pret\u00e9n executar i el codi que executaria.</p> <p>Per un altre costat, el temps de lligadura \u00e9s el moment en el que l\u2019atribut s\u2019associa amb el seu valor o que un m\u00e8tode s\u2019agrupa amb el seu codi corresponent. Aquest temps de lligadura pot ser \u2018est\u00e0tic\u2019 o \u2018din\u00e0mic\u2019. El primer es produeix durant la compilaci\u00f3 del programa mentre que la segona es produeix en temps d\u2019execuci\u00f3.</p> <p>La majoria de llenguatges de programaci\u00f3 com C utilitzen la lligadura est\u00e0tica en temps de compilaci\u00f3 mitjan\u00e7ant l\u2019enlla\u00e7ador, pel contrari els llenguatges de programaci\u00f3 que utilitzen lligadura din\u00e0mica, no determinen quin \u00e9s el codi que s\u2019executar\u00e0 en la crida al m\u00e8tode fins que arriba el moment en temps d\u2019execuci\u00f3 i \u00e9s nom\u00e9s en eixe cas en el que es determinar\u00e0 de totes les possibilitats de codi a executar (polimorfisme) quin \u00e9s el que s\u2019enlla\u00e7ar\u00e0 o lligar\u00e0 (lligadura efectiva).</p> <p>Java \u00e9s un llenguatge orientat a objectes que utilitza la lligadura din\u00e0mica en temps d\u2019execuci\u00f3 amb l\u2019excepci\u00f3 dels m\u00e8todes static o final que utilitzen lligadura est\u00e0tica.</p>"},{"location":"Tema%2077.%20Her%C3%A8ncia%2C%20polimorfisme%20i%20interf%C3%ADcies/#classes-i-metodes-abstractes","title":"Classes i m\u00e8todes abstractes","text":"<p>Les classes i m\u00e8todes abstractes s\u00f3n un \u00abfenomen\u00bb que es dona en algunes de les generalitzacions que ens apareixen quan analitzem una realitat des del punt de vista de la programaci\u00f3 orientada a objectes. \u00c9s a dir, l\u2019abstracci\u00f3 com a t\u00e8cnica en POO nom\u00e9s es pot donar en l\u2019her\u00e8ncia entre classes, concretament a les classes m\u00e9s altes de la jerarquia.</p> <p>Una classe abstracta \u00e9s aquella de la qual mai s\u2019instanciar\u00e0 cap objecte. Per exemple Piroclast al nostre volcano on o s\u2019instancia una roca, una lava o fum per\u00f2 mai un piroclast com a tal.</p> <p>A nivell de codi l\u2019\u00fanic canvi que es produeix \u00e9s que a la classe general \u00abPiroclast\u00bb se li afegeix la paraula reservada abstract com a modificador de comportament de la classe.</p> <pre><code>public abstract class nomClasse {\n\n}\n</code></pre> <p>Normalment els m\u00e8todes d\u2019una classe abstracta tamb\u00e9 seran abstractes.</p> <p>Una classe abstracta sol ser aquella que no existeix com a tal en la realitat que volem modelar. Al nostre exemple de volc\u00e0, el piroclast podria ser implementat com una classe abstracta ja que en el nostre sistema de particules, mai instanciarem un objecte piroclast. B\u00e9 instanciarem un objecte Fum, Lava o Roca, per\u00f2 mai un objecte Piroclast.</p> <p>M\u00e8todes Abstractes Un m\u00e8tode abstracte \u00e9s un m\u00e8tode que defineix un comportament o funcionalitat concreta per\u00f2 no especifica la seua implementaci\u00f3 i ha de ser la classe filla la que implemente el m\u00e8tode. En altres paraules, a la classe pare o superclasse podem tindre m\u00e8todes abstractes sempre i quan no tinguen codi.</p> <p>La implementaci\u00f3 de m\u00e8todes abstractes per part de les classes filles en una jerarquia utilitzen la lligadura din\u00e0mica ja que no es possible determinar el codi que s\u2019ha d\u2019executar en temps de compilaci\u00f3.</p>"},{"location":"Tema%2077.%20Her%C3%A8ncia%2C%20polimorfisme%20i%20interf%C3%ADcies/#us-del-polimorfisme","title":"\u00das del polimorfisme","text":"<p>Arribats a aquest punt podem treure les  seg\u00fcents conclusions: que el polimorfisme ens permet que diferents objectes responguen de manera diferent al mateix missatge (m\u00e8tode amb el mateix nom) i que aquesta diferenciaci\u00f3 de quin codi executar ho fa el compilador amb lligadura din\u00e0mica (en temps d\u2019execuci\u00f3 i no de compilaci\u00f3) </p> <p>Per usar el polimorfisme a Java hem de seguir les seg\u00fcents regles:</p> <ol> <li>Crear una jerarquia de classes amb les operacions importants definies per els m\u00e8todes membre declarades com abstractes a la base.</li> <li>Les implementacions espec\u00edfiques dels m\u00e8todes abstractes s\u2019han de fer a les classes derivades.</li> <li>Les inst\u00e0ncies d\u2019aquestes classes s\u2019usen mitjan\u00e7ant una refer\u00e8ncia a la base amb lligadura din\u00e0mica la qual \u00e9s l\u2019ess\u00e8ncia del polimorfisme a Java</li> </ol> <p>Finalment, en realitat no \u00e9s necessari declarar abstractes els m\u00e8todes a la classe base si despr\u00e9s es redefineixen amb la mateixa signatura (nom m\u00e9s par\u00e0metres) a la classe derivada.</p> Activitat 704. Classe fitxa abstracta <p>Converteix la classe pare fitxa en una classe abstracta. Tamb\u00e9 has de fer abstractes els m\u00e8todes que consideres. Ara \u00e9s un bon moment per refactoritzar el codi, \u00e9s a dir, revisar aquelles sent\u00e8ncies que s'executen comunes a totes les classes derivades i podem posar a la classe general per tal d'evitar redund\u00e0ncies. NOU: directiva override per a m\u00e8todes concrets no per a m\u00e8todes abstractes.</p>"},{"location":"Tema%2077.%20Her%C3%A8ncia%2C%20polimorfisme%20i%20interf%C3%ADcies/#avantatges-del-polimorfisme","title":"Avantatges del polimorfisme","text":"<p>El polimorfisme fa el seu sistema m\u00e9s flexible, sense perdre cap dels avantatges de la compilaci\u00f3 est\u00e0tica de tipus que tenen lloc en temps de compilaci\u00f3; tal \u00e9s el cas de Java.</p> <p>Les aplicacions m\u00e9s freq\u00fcents del polimorfisme s\u00f3n: - Especialitzaci\u00f3 de classes derivades. \u00c9s a dir, especialitzar classes que han estat definits des; per exemple: Quadrat \u00e9s una especialitzaci\u00f3 de la classe Rectangle perqu\u00e8 qualsevol quadrat \u00e9s un tipus de rectangle; aquesta classe de polimorfisme augmenta la efici\u00e8ncia de la subclasse, mentre conserva un alt grau de flexibilitat i permet un mitj\u00e0 uniforme de manejar rectangles i quadrats. - Estructures de dades heterogenis. De vegades \u00e9s \u00fatil poder manipular conjunts similars dors d'objectes; amb el polimorfisme es poden crear i gestionar f\u00e0cilment estructures de dades heterogenis que s\u00f3n f\u00e0cils de dissenyar i dibuixar, sense perdre la comprovaci\u00f3 de tipus dels elements utilitzats. - Gesti\u00f3 d'una jerarquia de classes. S\u00f3n col\u00b7leccions de classes altament estructurades amb relacions d'her\u00e8ncia que es poden estendre f\u00e0cilment.</p>"},{"location":"Tema%2077.%20Her%C3%A8ncia%2C%20polimorfisme%20i%20interf%C3%ADcies/#metodes-no-derivables-atribut-final","title":"M\u00e8todes no derivables: atribut final","text":"<p>Al context de l\u2019her\u00e8ncia, la paraula reservada final, s\u2019utilitza per protegir la redefinici\u00f3 dels m\u00e8todes de la classe base; un m\u00e8tode que t\u00e9 l\u2019atribut final, no pot tornar a definir-se a la o les classes derivades.</p> <p>Per\u00f2 veiem com podem aplicar aquestos conceptes al nostre volc\u00e0. Per tal d'il\u00b7lustrar-ho farem que els diferents tipus de Piroclast es comporten de forma diferent i que tinguen un aspecte diferent. Per un costat el fum ha de poder volar envolar-se amb el vent, la Lava canviar\u00e0 de color roig a taronja conforme vaja caent i la roca tindr\u00e0 una forma de requadre i ha d'anar girant sobre l'eix z.</p> <p>Per tal d'aconseguir-ho, la manera m\u00e9s f\u00e0cil \u00e9s convertir el m\u00e8tode display de la classe Piroclast en abstract i despr\u00e9s a cada classe filla li escriurem el codi d'acord amb el seu suposat comportament. Haurem de fer el mateix per al m\u00e8tode update ja que el moviment tampoc ser\u00e0 igual per a tots els tipus de Piroclasts. Per tant haurem de substituir el m\u00e8tode update sobreescrit de la classe fum que haviem fet abans per\u00f2 mantenint el codi anterior al m\u00e8tode update.</p> <p>Finalment nom\u00e9s ens quedaria afegir el codi necessari als m\u00e8todes display i update per tal que el fum vole amb el vent, que la lava canvie gradualment de color i s'esclafe quan arriba a terra que la roca siga un requadre que gira i que rebota a terra fins que perd tota l'energia..</p> <p>El resultat final seria el seg\u00fcent:</p> MainPiroclastCraterFumLavaRoca <pre><code>    final static int INTERVAL = 10;\n    Crater vesuvi;\n    \n    void setup () {\n        size (640, 480);\n        vesuvi = new Crater(320, 135);\n        Fisiques2D.vent = new PVector (random(-0.05, 0.05), random(-0.01, 0.01));\n    }\n    void draw () {\n        clear ();\n        background (255);\n\n        if (haPassatInterval()) \n            vesuvi.creaPiroclast ();\n\n        vesuvi.display ();\n        vesuvi.run     ();        \n    }\n\n    boolean haPassatInterval () {\n        return (frameCount - INTERVAL*vesuvi.getTotalPiroclasts()) &gt;= INTERVAL;\n    }\n</code></pre> <pre><code>    \n    public abstract class Piroclast {\n        protected int     velocitat;     // Magnitud en metres per segon\n        protected int     grandaria;     // Grand\u00e0ria del piroclast en p\u00edxels\n        protected int     lifeSpan;      // Temps de vida que li queda en frames\n        protected color   colorInicial;  // Color base o inicial del piroclast\n        protected color   colorActual;   // Color amb el que el piroclast est\u00e0 pintat\n        protected color   colorFinal;    // Color al qual va el piroclast conforme es gela\n        protected PVector posicio;       // Vector de posici\u00f3 del piroclast\n        protected PVector direccio;      // Vector de direcci\u00f3 (en realitat velocitat vectorial)\n        protected float   alturaTerra;   // Punt de l'eix de les y on ha de tocar terra la roca i rebotar\n    \n        public Piroclast (PVector pos, int tam, color colIni, color colFin) {\n            this.grandaria    = tam;\n            this.colorInicial = colIni;\n            this.colorActual  = colIni;\n            this.colorFinal   = colFin;\n            this.lifeSpan     = 255;\n            this.posicio      = pos.copy();\n            this.velocitat    = (int) random(1,3);\n            this.alturaTerra  = random (210, 280);     // Inicialitzem el punt y on es simulara que el piroclast xocar\u00e0\n            this.direccio     = new PVector (random(-1, 1), random(-2, 0));\n            this.direccio.mult (this.velocitat);\n        }\n    \n        public abstract void    display ();       // Mostra la boleta a la posici\u00f3 actual en la que es troba\n        public abstract void    update  ();       // Actualitza la posici\u00f3 del piroclast en base al nostre enunciat\n    \n        public boolean quedaVida () {\n            return this.lifeSpan &gt;= 0;\n        }\n    \n        public boolean estaTocantTerra () {\n            if (posicio.y &gt;= alturaTerra) {\n            posicio.y = alturaTerra;\n            return true;\n            }\n            else\n            return false;\n        }\n    \n        public boolean estaParada () {\n            return ((int)posicio.y &gt;= (int)alturaTerra &amp;&amp; direccio.mag() &lt;= 0.1);\n        }\n    }    \n</code></pre> <pre><code>    public class Crater {\n        private int       ample;                      // Base del volc\u00e0 en p\u00edxels\n        private int       alt;                        // Alt del volc\u00e0 en p\u00edxels\n        private color     col;                        // Color del volc\u00e0\n        public PVector   posicio;                    // Posici\u00f3 en la que es troba el volc\u00e0 que tamb\u00e9 posiciona el cr\u00e0ter\n        public ArrayList &lt;Piroclast&gt; alPiroclasts;   // Col\u00b7lecci\u00f3 de piroclasts que el volc\u00e0 va expulsant\n        \n        public Crater (int x, int y) {\n            this.ample   = 100;\n            this.alt     = 60;\n            this.posicio = new PVector (x, y);\n            this.col     = color(70, 70, 70);\n            this.alPiroclasts = new ArrayList&lt;Piroclast&gt; ();  // Inicialitzem el conjunt de piroclasts a punt de ser expulsats.\n        }\n        \n        public void display () {\n            fill     (70);\n            stroke   (0);\n            rectMode (CENTER);\n            triangle (posicio.x, posicio.y, posicio.x-(ample/2), posicio.y+alt, posicio.x+(ample/2), posicio.y+alt);\n        }\n        \n        public void run () {\n            mostraPiroclasts     ();\n            actualitzaPiroclasts ();\n            comprovaMorts        ();\n        }\n        \n        public void creaPiroclast () {\n            Fum f = new Fum(this.posicio);\n            alPiroclasts.add(f);\n            \n            if (frameCount % 2 == 0) {\n                Lava l = new Lava (this.posicio);\n                alPiroclasts.add(l);\n            }\n            else {\n                Roca r = new Roca (this.posicio);\n                alPiroclasts.add(r);\n            }\n            \n            Fum f2 = new Fum (this.posicio);\n            alPiroclasts.add (f2);\n        }\n        \n        private void mostraPiroclasts () {\n            for (Piroclast piro : this.alPiroclasts)\n            piro.display();\n        }\n        \n        private void actualitzaPiroclasts () {\n            for (Piroclast piro : this.alPiroclasts) \n            piro.update(); \n        }\n        \n        private void comprovaMorts () {\n            for (int i=0; i &lt; this.alPiroclasts.size(); i ++) {\n            Piroclast piro = this.alPiroclasts.get(i);\n            if (piro != null &amp;&amp; !piro.quedaVida())   // Esborrem els que ja se'ls haja acabada la vida (lifeSpan) \n                this.alPiroclasts.remove(piro);\n            }\n        }\n        \n        public int getTotalPiroclasts () {\n            return this.alPiroclasts.size();\n        }\n    }\n</code></pre> <pre><code>    public class Fum extends Piroclast {\n        private int dissipacio;  // Valor que determina la velocitat (p\u00edxels) a la que es dissipa el fum\n        private int expansio;   // Valor que determina la velocitat (p\u00edxels) amb la que s'expandeix el fum\n        \n        public Fum (PVector posCrater) {\n            super (posCrater, (int)random(10,20), color(170,170,170), color(255,255,255));\n            this.velocitat = (int)random(0,1);\n            this.direccio  = new PVector (random(-0.3, 0.3), random(-1, -0.1));\n            this.dissipacio = (int)random(1,3);\n            this.expansio  = (int)random(0,2);\n            this.lifeSpan  = 190;\n        }\n        \n        public void display () {\n            color pinta = color(colorInicial, lifeSpan);\n            noStroke();\n            fill (pinta);\n            circle (posicio.x, posicio.y, grandaria);\n        }\n        \n        public void update () {\n            this.direccio.add (Fisiques2D.vent);\n            this.posicio.add (direccio);\n            \n            if (frameCount % 2 == 0)\n            this.grandaria += expansio;\n            \n            this.lifeSpan -= dissipacio;\n        }\n    }\n</code></pre> <pre><code>    public class Lava extends Piroclast {\n        private float   percentColor;   // Percentatge de modulaci\u00f3 del color inicial al final\n        \n        public Lava (PVector posCrater) {\n            super (posCrater, (int)random(5,18), color(255,0,0), color(100,0,0));\n        }\n        \n        public void display () {\n            noStroke();\n            if (!estaTocantTerra()) {\n            fill(colorActual);\n            circle(posicio.x, posicio.y, grandaria);\n            }\n            else {\n            lifeSpan --;\n            fill (colorActual, lifeSpan);\n            ellipse(posicio.x, posicio.y, grandaria, 2*grandaria/3);\n            }\n        }\n        \n        public void update () {\n            if (estaTocantTerra()) \n            return;\n            \n            if (percentColor &lt; 1)\n            percentColor += 0.003;\n            \n            colorActual = lerpColor(colorInicial, colorFinal, percentColor);\n            \n            PVector friccioAire = direccio.copy().mult(Fisiques2D.friccioAire);\n            direccio.add (friccioAire);\n            direccio.add (Fisiques2D.gravetat);\n            posicio.add (direccio);\n        }\n    }\n</code></pre> <pre><code>    public class Roca extends Piroclast {\n        private float   percentColor;   // Percentatge de modulaci\u00f3 del color inicial al final\n        private float   angleDeGir;     // Angle necessari per poder simular la rotaci\u00f3 sobre l'eix Z\n        private float   velAngular;     // Velocitat angular a la que est\u00e0 rodant la roca\n        private boolean sentitRellotge; // Sentit de gir: true significa en sentit de les agulles del rellotge\n        \n        public Roca (PVector posCrater) {\n            super (posCrater, (int)random(5,15), color(175,175,175), color(0,0,0));\n            velAngular  = random (0.1, 0.20);    // Inicialitzem la velocitat angular (girat\u00f2ria) de la roca de forma aleat\u00f2ria.\n        }\n        \n        public void display ( ) {\n            stroke(0);\n            \n            calculaAngleGir ();\n            \n            if (!estaParada()) {\n            pushMatrix();\n                translate(posicio.x, posicio.y);\n                rotate(angleDeGir);\n                fill (colorActual);\n                rect (0, 0, grandaria, grandaria);\n            popMatrix();\n            }\n            else {\n            noStroke();\n            lifeSpan -= 2;\n            fill (colorActual, lifeSpan);\n            rect(posicio.x, posicio.y, grandaria, grandaria);\n            }\n        }\n        \n        public void update () { \n            if (!estaParada()) {\n            PVector friccioAire = direccio.copy().mult(Fisiques2D.friccioAire);\n            direccio.add (friccioAire);\n            direccio.add (Fisiques2D.gravetat);\n            posicio.add  (direccio);\n            \n            if (estaTocantTerra()) \n                rebota();   \n            \n            actualitzaColor (); \n            }\n        }\n        \n        private void rebota() {\n            direccio.mult(-0.5);\n            velAngular *= 0.5;\n            sentitRellotge = !sentitRellotge;  \n        }\n        \n        private void calculaAngleGir () {\n            if (sentitRellotge)\n                angleDeGir += velAngular;\n            \n            else\n                angleDeGir -= velAngular;\n            \n            if(angleDeGir &gt; TWO_PI) { \n                angleDeGir = 0.0; \n            }\n        }\n        \n        private void actualitzaColor () {\n            if (percentColor &lt; 1)\n                percentColor += 0.01;\n            \n            colorActual = lerpColor(colorInicial, colorFinal, percentColor);\n        }\n    }\n</code></pre> Activitat 705. Polimorfisme <p>Modifica els m\u00e8todes de les classes derivades per tal d'aconseguir que les fitxes es moguen de forma diferent i tinguen una aparen\u00e7a distinta entre elles. El que es preten en aquesta activitat \u00e9s un poc imitar el que hem fet amb el Volcano, que cada classe derivada tinga una imatge i un comportament diferents.</p>"},{"location":"Tema%2077.%20Her%C3%A8ncia%2C%20polimorfisme%20i%20interf%C3%ADcies/#interficies","title":"Interf\u00edcies","text":"<p>Una interf\u00edcie en Java, \u00e9s sint\u00e0cticament similar a una classe abstracta, en la qual pot especificar un o m\u00e9s m\u00e8todes que no tenen cos. Aquests m\u00e8todes han de ser implementats per una classe perqu\u00e8 es defineixen les seues accions.</p> <p>Per tant, una interf\u00edcie especifica qu\u00e8 s'ha de fer, per\u00f2 no com fer-ho. Una vegada que es defineix una interf\u00edcie, qualsevol quantitat de classes pot implementar-la. A m\u00e9s, una classe pot implementar qualsevol quantitat d'interf\u00edcies.</p> <p>Per implementar una interf\u00edcie, una classe ha de proporcionar cossos (implementacions) per als m\u00e8todes descrits per la interf\u00edcie. Cada classe \u00e9s lliure de determinar els detalls de la seva pr\u00f2pia implementaci\u00f3. Dues classes poden implementar la mateixa interf\u00edcie de diferents maneres, per\u00f2 cada classe encara admet el mateix conjunt de m\u00e8todes. Per tant, el codi que t\u00e9. Her\u00e8ncia, polimorfisme i Interf\u00edcies coneixement de la interf\u00edcie pot usar objectes de qualsevol classe, ja que la interf\u00edcie amb aquests objectes \u00e9s la mateixa.</p>"},{"location":"Tema%2077.%20Her%C3%A8ncia%2C%20polimorfisme%20i%20interf%C3%ADcies/#implementacio-duna-interficie","title":"Implementaci\u00f3 d'una interf\u00edcie","text":"<p>La interf\u00edcie especifica el comportament com\u00fa que tenen un conjunt de dades el qual es realitza en cadascuna d\u2019elles i es coneix tamb\u00e9 com a implementaci\u00f3 d\u2019una interf\u00edcie. La sintaxis \u00e9s similar a la derivaci\u00f3 o extensi\u00f3 d\u2019una classe amb la paraula reservada implements en llo d\u2019extends.</p> <pre><code>Class nomClasse implements nomInterficie {\n// definici\u00f3 d\u2019atributs\n// implementaci\u00f3 dels m\u00e8todes de la classe\n// implementaci\u00f3 dels m\u00e8todes de la interf\u00edcies\n}\n</code></pre> <p>La classe que implementa la interf\u00edcie ha d\u2019especificar el codi (la implementaci\u00f3) de cadascun dels m\u00e8todes, en cas de no fer-ho, la classe es. Her\u00e8ncia, polimorfisme i Interf\u00edcies converteix en abstracta i com a tal s\u2019ha de declarar. \u00c9s a dir, si una classe implementa una interf\u00edcie, est\u00e0 obligada a implementar tots els seus m\u00e8todes.</p> <p>Per tal d\u2019il\u00b7lustrar amb un exemple sobre una interf\u00edcie, utilitzarem un comandament a dist\u00e0ncia de qualsevol dispositiu electr\u00f2nic. Es suposa que des d\u2019un comandament a dist\u00e0ncia podrem: encendre i apagar el dispositiu, pujar i baixar el volum, silenciar etc..</p> <p>La nostra interf\u00edcie creada amb Java podria ser com la seg\u00fcent:</p> <pre><code>public abstract class Comandament {\n    public abstract void engegar ();\n    public abstract void apagar ();\n    public abstract void pujarVolum(int increment);\n    public abstract void baixarVolum(int decrement);\n    public abstract void silenciar();\n}\n</code></pre> <p>Els m\u00e8todes declarats ac\u00ed a la interf\u00edcie Comandament deurien ser auto-explicatoris. Hem incl\u00f2s nom\u00e9s unes poques de les m\u00faltiples accions que es poden realitzar amb un comandament a dist\u00e0ncia d\u2019un dispositiu electr\u00f2nic i encara se li podrien afegir algunes m\u00e9s ben segur. </p> <p>No hi ha definici\u00f3 de cap dels m\u00e8todes ac\u00ed, Els m\u00e8todes declarats en una interf\u00edcie s\u00f3n sempre abstractes i sempre p\u00fablics per defecte. Ara qualsevol classe que necessite de l\u2019\u00fas de la funcionalitat prove\u00efda per Comandament nom\u00e9s ha de declarar que implementa la interficie a m\u00e9s a m\u00e9s de definir cadascun dels m\u00e8todes que la formen. </p> <p>Posem per exemple una televisi\u00f3, el codi Java seria el seg\u00fcent:</p> <pre><code>public class TV implements comandament {\n    public void engegar () {\n        // Codi necessari per engegar la televisi\u00f3\n    }\n    public void apagar () {\n        // Codi necessari per apagar la televisi\u00f3\n    }\n\n    public void pujaVolum (int increment) {\n        // Codi necessari per incrementar el volum en increment\n    }\n\n    public void baixaVolum (int increment) {\n        // Codi necessari per disminuir el volum en increment\n    }\n\n    public void silenciar () {\n        // Codi necessari per silenciar la televisi\u00f3\n    }\n}\n</code></pre>"},{"location":"Tema%2077.%20Her%C3%A8ncia%2C%20polimorfisme%20i%20interf%C3%ADcies/#jerarquia-dinterficies","title":"Jerarquia d'interf\u00edcies","text":"<p>Les interf\u00edcies tamb\u00e9 es poden organitzar de forma jerarquica de manera que els m\u00e8todes siguen heretats</p> <pre><code>interficie extends interficie2 extends interficie3...\n</code></pre>"},{"location":"Tema%2077.%20Her%C3%A8ncia%2C%20polimorfisme%20i%20interf%C3%ADcies/#herencia-de-classes-i-implementacio-dinterficies","title":"Her\u00e8ncia de classes i implementaci\u00f3 d'interf\u00edcies","text":"<p>es interf\u00edcies no s\u00f3n classes ja que especifiquen un comportament mitjan\u00e7ant m\u00e8todes per la classe que els implemente; per aix\u00f2, una classe pot heretar de la seua classe base i al mateix temps implementar una interf\u00edcie. Per exemple si tenim una classe base anomenada Electrodom\u00e8stic de la qual hereten una s\u00e8rie de classes com podrien ser: Televisi\u00f3, DVD, Microones, Forn, Nevera etc..i a m\u00e9s a m\u00e9s tamb\u00e9 disposem d\u2019una interf\u00edcie Comandament,  podr\u00edem crear una aplicaci\u00f3 en la que la televisi\u00f3 herete de la classe general electrodom\u00e8stic i a banda implemente la interf\u00edcie comandament com hem vist abans.</p> <pre><code>public class Televisio extends Electrodomestic implements comandament { ... }\n</code></pre>"},{"location":"Tema%2077.%20Her%C3%A8ncia%2C%20polimorfisme%20i%20interf%C3%ADcies/#classes-internes","title":"Classes internes","text":"<p>Una classe interna \u00e9s una classe que es declara dintre d\u2019una altra classe.</p>"},{"location":"assets/dibuixem/Dibuixem/highlight/","title":"Highlight.js CDN Assets","text":"<p>This package contains only the CDN build assets of highlight.js.</p> <p>This may be what you want if you'd like to install the pre-built distributable highlight.js client-side assets via NPM. If you're wanting to use highlight.js mainly on the server-side you likely want the highlight.js package instead.</p> <p>To access these files via CDN: https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@latest/build/</p> <p>If you just want a single .js file with the common languages built-in: https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@latest/build/highlight.min.js</p>"},{"location":"assets/dibuixem/Dibuixem/highlight/#highlightjs","title":"Highlight.js","text":"<p>Highlight.js is a syntax highlighter written in JavaScript. It works in the browser as well as on the server. It works with pretty much any markup, doesn\u2019t depend on any framework, and has automatic language detection.</p> <p>If you'd like to read the full README: https://github.com/highlightjs/highlight.js/blob/main/README.md</p>"},{"location":"assets/dibuixem/Dibuixem/highlight/#license","title":"License","text":"<p>Highlight.js is released under the BSD License. See LICENSE file for details.</p>"},{"location":"assets/dibuixem/Dibuixem/highlight/#links","title":"Links","text":"<p>The official site for the library is at https://highlightjs.org/.</p> <p>The Github project may be found at: https://github.com/highlightjs/highlight.js</p> <p>Further in-depth documentation for the API and other topics is at http://highlightjs.readthedocs.io/.</p> <p>A list of the Core Team and contributors can be found in the CONTRIBUTORS.md file.</p>"},{"location":"assets/dibuixem/Dibuixem/highlight/DIGESTS/","title":"DIGESTS","text":""},{"location":"assets/dibuixem/Dibuixem/highlight/DIGESTS/#subresource-integrity","title":"Subresource Integrity","text":"<p>If you are loading Highlight.js via CDN you may wish to use Subresource Integrity to guarantee that you are using a legimitate build of the library.</p> <p>To do this you simply need to add the <code>integrity</code> attribute for each JavaScript file you download via CDN. These digests are used by the browser to confirm the files downloaded have not been modified.</p> <pre><code>&lt;script\n  src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/highlight.min.js\"\n  integrity=\"sha384-5xdYoZ0Lt6Jw8GFfRP91J0jaOVUq7DGI1J5wIyNi0D+eHVdfUwHR4gW6kPsw489E\"&gt;&lt;/script&gt;\n&lt;!-- including any other grammars you might need to load --&gt;\n&lt;script\n  src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/languages/go.min.js\"\n  integrity=\"sha384-HdearVH8cyfzwBIQOjL/6dSEmZxQ5rJRezN7spps8E7iu+R6utS8c2ab0AgBNFfH\"&gt;&lt;/script&gt;\n</code></pre> <p>The full list of digests for every file can be found below.</p>"},{"location":"assets/dibuixem/Dibuixem/highlight/DIGESTS/#digests","title":"Digests","text":"<pre><code>sha384-6kBK/+lkKAJ5g1lJ/COy1rlkZV6a9bK5ZmkYoP8wE35pVdqHX85QDo7Ci2Gi6qLS /highlight.js\nsha384-5xdYoZ0Lt6Jw8GFfRP91J0jaOVUq7DGI1J5wIyNi0D+eHVdfUwHR4gW6kPsw489E /highlight.min.js\n</code></pre>"},{"location":"assets/dibuixem/legal/jquery/","title":"Jquery","text":""},{"location":"assets/dibuixem/legal/jquery/#jquery-v371","title":"jQuery v3.7.1","text":""},{"location":"assets/dibuixem/legal/jquery/#jquery-license","title":"jQuery License","text":"<pre><code>jQuery v 3.7.1\nCopyright OpenJS Foundation and other contributors, https://openjsf.org/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n</code></pre>"},{"location":"assets/dibuixem/legal/jqueryUI/","title":"jqueryUI","text":""},{"location":"assets/dibuixem/legal/jqueryUI/#jquery-ui-v1132","title":"jQuery UI v1.13.2","text":""},{"location":"assets/dibuixem/legal/jqueryUI/#jquery-ui-license","title":"jQuery UI License","text":"<pre><code>Copyright jQuery Foundation and other contributors, https://jquery.org/\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/jquery/jquery-ui\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nCopyright and related rights for sample code are waived via CC0. Sample\ncode is defined as all source code contained within the demos directory.\n\nCC0: http://creativecommons.org/publicdomain/zero/1.0/\n\n====\n\nAll files located in the node_modules and external directories are\nexternally maintained libraries used by this software which have their\nown licenses; we recommend you read them, as their terms may differ from\nthe terms above.\n</code></pre>"}]}